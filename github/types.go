// Package github provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package github

import (
	"encoding/json"
	"fmt"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for ActionsDefaultWorkflowPermissions.
const (
	ActionsDefaultWorkflowPermissionsActionsDefaultWorkflowPermissionsRead ActionsDefaultWorkflowPermissions = "read"

	ActionsDefaultWorkflowPermissionsActionsDefaultWorkflowPermissionsWrite ActionsDefaultWorkflowPermissions = "write"
)

// Defines values for ActionsWorkflowAccessToRepositoryAccessLevel.
const (
	ActionsWorkflowAccessToRepositoryAccessLevelActionsWorkflowAccessToRepositoryAccessLevelEnterprise ActionsWorkflowAccessToRepositoryAccessLevel = "enterprise"

	ActionsWorkflowAccessToRepositoryAccessLevelActionsWorkflowAccessToRepositoryAccessLevelNone ActionsWorkflowAccessToRepositoryAccessLevel = "none"

	ActionsWorkflowAccessToRepositoryAccessLevelActionsWorkflowAccessToRepositoryAccessLevelOrganization ActionsWorkflowAccessToRepositoryAccessLevel = "organization"
)

// Defines values for AllowedActions.
const (
	AllowedActionsAllowedActionsAll AllowedActions = "all"

	AllowedActionsAllowedActionsLocalOnly AllowedActions = "local_only"

	AllowedActionsAllowedActionsSelected AllowedActions = "selected"
)

// Defines values for AppPermissionsActions.
const (
	AppPermissionsActionsAppPermissionsActionsRead AppPermissionsActions = "read"

	AppPermissionsActionsAppPermissionsActionsWrite AppPermissionsActions = "write"
)

// Defines values for AppPermissionsAdministration.
const (
	AppPermissionsAdministrationAppPermissionsAdministrationRead AppPermissionsAdministration = "read"

	AppPermissionsAdministrationAppPermissionsAdministrationWrite AppPermissionsAdministration = "write"
)

// Defines values for AppPermissionsChecks.
const (
	AppPermissionsChecksAppPermissionsChecksRead AppPermissionsChecks = "read"

	AppPermissionsChecksAppPermissionsChecksWrite AppPermissionsChecks = "write"
)

// Defines values for AppPermissionsContents.
const (
	AppPermissionsContentsAppPermissionsContentsRead AppPermissionsContents = "read"

	AppPermissionsContentsAppPermissionsContentsWrite AppPermissionsContents = "write"
)

// Defines values for AppPermissionsDeployments.
const (
	AppPermissionsDeploymentsAppPermissionsDeploymentsRead AppPermissionsDeployments = "read"

	AppPermissionsDeploymentsAppPermissionsDeploymentsWrite AppPermissionsDeployments = "write"
)

// Defines values for AppPermissionsEnvironments.
const (
	AppPermissionsEnvironmentsAppPermissionsEnvironmentsRead AppPermissionsEnvironments = "read"

	AppPermissionsEnvironmentsAppPermissionsEnvironmentsWrite AppPermissionsEnvironments = "write"
)

// Defines values for AppPermissionsIssues.
const (
	AppPermissionsIssuesAppPermissionsIssuesRead AppPermissionsIssues = "read"

	AppPermissionsIssuesAppPermissionsIssuesWrite AppPermissionsIssues = "write"
)

// Defines values for AppPermissionsMembers.
const (
	AppPermissionsMembersAppPermissionsMembersRead AppPermissionsMembers = "read"

	AppPermissionsMembersAppPermissionsMembersWrite AppPermissionsMembers = "write"
)

// Defines values for AppPermissionsMetadata.
const (
	AppPermissionsMetadataAppPermissionsMetadataRead AppPermissionsMetadata = "read"

	AppPermissionsMetadataAppPermissionsMetadataWrite AppPermissionsMetadata = "write"
)

// Defines values for AppPermissionsOrganizationAdministration.
const (
	AppPermissionsOrganizationAdministrationAppPermissionsOrganizationAdministrationRead AppPermissionsOrganizationAdministration = "read"

	AppPermissionsOrganizationAdministrationAppPermissionsOrganizationAdministrationWrite AppPermissionsOrganizationAdministration = "write"
)

// Defines values for AppPermissionsOrganizationHooks.
const (
	AppPermissionsOrganizationHooksAppPermissionsOrganizationHooksRead AppPermissionsOrganizationHooks = "read"

	AppPermissionsOrganizationHooksAppPermissionsOrganizationHooksWrite AppPermissionsOrganizationHooks = "write"
)

// Defines values for AppPermissionsOrganizationPackages.
const (
	AppPermissionsOrganizationPackagesAppPermissionsOrganizationPackagesRead AppPermissionsOrganizationPackages = "read"

	AppPermissionsOrganizationPackagesAppPermissionsOrganizationPackagesWrite AppPermissionsOrganizationPackages = "write"
)

// Defines values for AppPermissionsOrganizationPlan.
const (
	AppPermissionsOrganizationPlanAppPermissionsOrganizationPlanRead AppPermissionsOrganizationPlan = "read"
)

// Defines values for AppPermissionsOrganizationProjects.
const (
	AppPermissionsOrganizationProjectsAppPermissionsOrganizationProjectsAdmin AppPermissionsOrganizationProjects = "admin"

	AppPermissionsOrganizationProjectsAppPermissionsOrganizationProjectsRead AppPermissionsOrganizationProjects = "read"

	AppPermissionsOrganizationProjectsAppPermissionsOrganizationProjectsWrite AppPermissionsOrganizationProjects = "write"
)

// Defines values for AppPermissionsOrganizationSecrets.
const (
	AppPermissionsOrganizationSecretsAppPermissionsOrganizationSecretsRead AppPermissionsOrganizationSecrets = "read"

	AppPermissionsOrganizationSecretsAppPermissionsOrganizationSecretsWrite AppPermissionsOrganizationSecrets = "write"
)

// Defines values for AppPermissionsOrganizationSelfHostedRunners.
const (
	AppPermissionsOrganizationSelfHostedRunnersAppPermissionsOrganizationSelfHostedRunnersRead AppPermissionsOrganizationSelfHostedRunners = "read"

	AppPermissionsOrganizationSelfHostedRunnersAppPermissionsOrganizationSelfHostedRunnersWrite AppPermissionsOrganizationSelfHostedRunners = "write"
)

// Defines values for AppPermissionsOrganizationUserBlocking.
const (
	AppPermissionsOrganizationUserBlockingAppPermissionsOrganizationUserBlockingRead AppPermissionsOrganizationUserBlocking = "read"

	AppPermissionsOrganizationUserBlockingAppPermissionsOrganizationUserBlockingWrite AppPermissionsOrganizationUserBlocking = "write"
)

// Defines values for AppPermissionsPackages.
const (
	AppPermissionsPackagesAppPermissionsPackagesRead AppPermissionsPackages = "read"

	AppPermissionsPackagesAppPermissionsPackagesWrite AppPermissionsPackages = "write"
)

// Defines values for AppPermissionsPages.
const (
	AppPermissionsPagesAppPermissionsPagesRead AppPermissionsPages = "read"

	AppPermissionsPagesAppPermissionsPagesWrite AppPermissionsPages = "write"
)

// Defines values for AppPermissionsPullRequests.
const (
	AppPermissionsPullRequestsAppPermissionsPullRequestsRead AppPermissionsPullRequests = "read"

	AppPermissionsPullRequestsAppPermissionsPullRequestsWrite AppPermissionsPullRequests = "write"
)

// Defines values for AppPermissionsRepositoryHooks.
const (
	AppPermissionsRepositoryHooksAppPermissionsRepositoryHooksRead AppPermissionsRepositoryHooks = "read"

	AppPermissionsRepositoryHooksAppPermissionsRepositoryHooksWrite AppPermissionsRepositoryHooks = "write"
)

// Defines values for AppPermissionsRepositoryProjects.
const (
	AppPermissionsRepositoryProjectsAppPermissionsRepositoryProjectsAdmin AppPermissionsRepositoryProjects = "admin"

	AppPermissionsRepositoryProjectsAppPermissionsRepositoryProjectsRead AppPermissionsRepositoryProjects = "read"

	AppPermissionsRepositoryProjectsAppPermissionsRepositoryProjectsWrite AppPermissionsRepositoryProjects = "write"
)

// Defines values for AppPermissionsSecretScanningAlerts.
const (
	AppPermissionsSecretScanningAlertsAppPermissionsSecretScanningAlertsRead AppPermissionsSecretScanningAlerts = "read"

	AppPermissionsSecretScanningAlertsAppPermissionsSecretScanningAlertsWrite AppPermissionsSecretScanningAlerts = "write"
)

// Defines values for AppPermissionsSecrets.
const (
	AppPermissionsSecretsAppPermissionsSecretsRead AppPermissionsSecrets = "read"

	AppPermissionsSecretsAppPermissionsSecretsWrite AppPermissionsSecrets = "write"
)

// Defines values for AppPermissionsSecurityEvents.
const (
	AppPermissionsSecurityEventsAppPermissionsSecurityEventsRead AppPermissionsSecurityEvents = "read"

	AppPermissionsSecurityEventsAppPermissionsSecurityEventsWrite AppPermissionsSecurityEvents = "write"
)

// Defines values for AppPermissionsSingleFile.
const (
	AppPermissionsSingleFileAppPermissionsSingleFileRead AppPermissionsSingleFile = "read"

	AppPermissionsSingleFileAppPermissionsSingleFileWrite AppPermissionsSingleFile = "write"
)

// Defines values for AppPermissionsStatuses.
const (
	AppPermissionsStatusesAppPermissionsStatusesRead AppPermissionsStatuses = "read"

	AppPermissionsStatusesAppPermissionsStatusesWrite AppPermissionsStatuses = "write"
)

// Defines values for AppPermissionsTeamDiscussions.
const (
	AppPermissionsTeamDiscussionsAppPermissionsTeamDiscussionsRead AppPermissionsTeamDiscussions = "read"

	AppPermissionsTeamDiscussionsAppPermissionsTeamDiscussionsWrite AppPermissionsTeamDiscussions = "write"
)

// Defines values for AppPermissionsVulnerabilityAlerts.
const (
	AppPermissionsVulnerabilityAlertsAppPermissionsVulnerabilityAlertsRead AppPermissionsVulnerabilityAlerts = "read"

	AppPermissionsVulnerabilityAlertsAppPermissionsVulnerabilityAlertsWrite AppPermissionsVulnerabilityAlerts = "write"
)

// Defines values for AppPermissionsWorkflows.
const (
	AppPermissionsWorkflowsAppPermissionsWorkflowsWrite AppPermissionsWorkflows = "write"
)

// Defines values for AuthenticationTokenRepositorySelection.
const (
	AuthenticationTokenRepositorySelectionAuthenticationTokenRepositorySelectionAll AuthenticationTokenRepositorySelection = "all"

	AuthenticationTokenRepositorySelectionAuthenticationTokenRepositorySelectionSelected AuthenticationTokenRepositorySelection = "selected"
)

// Defines values for AuthorAssociation.
const (
	AuthorAssociationAuthorAssociationCOLLABORATOR AuthorAssociation = "COLLABORATOR"

	AuthorAssociationAuthorAssociationCONTRIBUTOR AuthorAssociation = "CONTRIBUTOR"

	AuthorAssociationAuthorAssociationFIRSTTIMECONTRIBUTOR AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"

	AuthorAssociationAuthorAssociationFIRSTTIMER AuthorAssociation = "FIRST_TIMER"

	AuthorAssociationAuthorAssociationMANNEQUIN AuthorAssociation = "MANNEQUIN"

	AuthorAssociationAuthorAssociationMEMBER AuthorAssociation = "MEMBER"

	AuthorAssociationAuthorAssociationNONE AuthorAssociation = "NONE"

	AuthorAssociationAuthorAssociationOWNER AuthorAssociation = "OWNER"
)

// Defines values for AutoMergeMergeMethod.
const (
	AutoMergeMergeMethodAutoMergeMergeMethodMerge AutoMergeMergeMethod = "merge"

	AutoMergeMergeMethodAutoMergeMergeMethodRebase AutoMergeMergeMethod = "rebase"

	AutoMergeMergeMethodAutoMergeMergeMethodSquash AutoMergeMergeMethod = "squash"
)

// Defines values for CheckRunConclusion.
const (
	CheckRunConclusionCheckRunConclusionActionRequired CheckRunConclusion = "action_required"

	CheckRunConclusionCheckRunConclusionCancelled CheckRunConclusion = "cancelled"

	CheckRunConclusionCheckRunConclusionFailure CheckRunConclusion = "failure"

	CheckRunConclusionCheckRunConclusionNeutral CheckRunConclusion = "neutral"

	CheckRunConclusionCheckRunConclusionSkipped CheckRunConclusion = "skipped"

	CheckRunConclusionCheckRunConclusionSuccess CheckRunConclusion = "success"

	CheckRunConclusionCheckRunConclusionTimedOut CheckRunConclusion = "timed_out"
)

// Defines values for CheckRunStatus.
const (
	CheckRunStatusCheckRunStatusCompleted CheckRunStatus = "completed"

	CheckRunStatusCheckRunStatusInProgress CheckRunStatus = "in_progress"

	CheckRunStatusCheckRunStatusQueued CheckRunStatus = "queued"
)

// Defines values for CheckSuiteConclusion.
const (
	CheckSuiteConclusionCheckSuiteConclusionActionRequired CheckSuiteConclusion = "action_required"

	CheckSuiteConclusionCheckSuiteConclusionCancelled CheckSuiteConclusion = "cancelled"

	CheckSuiteConclusionCheckSuiteConclusionFailure CheckSuiteConclusion = "failure"

	CheckSuiteConclusionCheckSuiteConclusionNeutral CheckSuiteConclusion = "neutral"

	CheckSuiteConclusionCheckSuiteConclusionSkipped CheckSuiteConclusion = "skipped"

	CheckSuiteConclusionCheckSuiteConclusionSuccess CheckSuiteConclusion = "success"

	CheckSuiteConclusionCheckSuiteConclusionTimedOut CheckSuiteConclusion = "timed_out"
)

// Defines values for CheckSuiteStatus.
const (
	CheckSuiteStatusCheckSuiteStatusCompleted CheckSuiteStatus = "completed"

	CheckSuiteStatusCheckSuiteStatusInProgress CheckSuiteStatus = "in_progress"

	CheckSuiteStatusCheckSuiteStatusQueued CheckSuiteStatus = "queued"
)

// Defines values for CodeScanningAlertClassification.
const (
	CodeScanningAlertClassificationCodeScanningAlertClassificationGenerated CodeScanningAlertClassification = "generated"

	CodeScanningAlertClassificationCodeScanningAlertClassificationLibrary CodeScanningAlertClassification = "library"

	CodeScanningAlertClassificationCodeScanningAlertClassificationSource CodeScanningAlertClassification = "source"

	CodeScanningAlertClassificationCodeScanningAlertClassificationTest CodeScanningAlertClassification = "test"
)

// Defines values for CodeScanningAlertDismissedReason.
const (
	CodeScanningAlertDismissedReasonCodeScanningAlertDismissedReasonFalsePositive CodeScanningAlertDismissedReason = "false positive"

	CodeScanningAlertDismissedReasonCodeScanningAlertDismissedReasonNil CodeScanningAlertDismissedReason = "<nil>"

	CodeScanningAlertDismissedReasonCodeScanningAlertDismissedReasonUsedInTests CodeScanningAlertDismissedReason = "used in tests"

	CodeScanningAlertDismissedReasonCodeScanningAlertDismissedReasonWontFix CodeScanningAlertDismissedReason = "won't fix"
)

// Defines values for CodeScanningAlertRuleSecuritySeverityLevel.
const (
	CodeScanningAlertRuleSecuritySeverityLevelCodeScanningAlertRuleSecuritySeverityLevelCritical CodeScanningAlertRuleSecuritySeverityLevel = "critical"

	CodeScanningAlertRuleSecuritySeverityLevelCodeScanningAlertRuleSecuritySeverityLevelHigh CodeScanningAlertRuleSecuritySeverityLevel = "high"

	CodeScanningAlertRuleSecuritySeverityLevelCodeScanningAlertRuleSecuritySeverityLevelLow CodeScanningAlertRuleSecuritySeverityLevel = "low"

	CodeScanningAlertRuleSecuritySeverityLevelCodeScanningAlertRuleSecuritySeverityLevelMedium CodeScanningAlertRuleSecuritySeverityLevel = "medium"
)

// Defines values for CodeScanningAlertRuleSeverity.
const (
	CodeScanningAlertRuleSeverityCodeScanningAlertRuleSeverityError CodeScanningAlertRuleSeverity = "error"

	CodeScanningAlertRuleSeverityCodeScanningAlertRuleSeverityNone CodeScanningAlertRuleSeverity = "none"

	CodeScanningAlertRuleSeverityCodeScanningAlertRuleSeverityNote CodeScanningAlertRuleSeverity = "note"

	CodeScanningAlertRuleSeverityCodeScanningAlertRuleSeverityWarning CodeScanningAlertRuleSeverity = "warning"
)

// Defines values for CodeScanningAlertRuleSummarySeverity.
const (
	CodeScanningAlertRuleSummarySeverityCodeScanningAlertRuleSummarySeverityError CodeScanningAlertRuleSummarySeverity = "error"

	CodeScanningAlertRuleSummarySeverityCodeScanningAlertRuleSummarySeverityNone CodeScanningAlertRuleSummarySeverity = "none"

	CodeScanningAlertRuleSummarySeverityCodeScanningAlertRuleSummarySeverityNote CodeScanningAlertRuleSummarySeverity = "note"

	CodeScanningAlertRuleSummarySeverityCodeScanningAlertRuleSummarySeverityWarning CodeScanningAlertRuleSummarySeverity = "warning"
)

// Defines values for CodeScanningAlertSetState.
const (
	CodeScanningAlertSetStateCodeScanningAlertSetStateDismissed CodeScanningAlertSetState = "dismissed"

	CodeScanningAlertSetStateCodeScanningAlertSetStateOpen CodeScanningAlertSetState = "open"
)

// Defines values for CodeScanningAlertState.
const (
	CodeScanningAlertStateCodeScanningAlertStateClosed CodeScanningAlertState = "closed"

	CodeScanningAlertStateCodeScanningAlertStateDismissed CodeScanningAlertState = "dismissed"

	CodeScanningAlertStateCodeScanningAlertStateFixed CodeScanningAlertState = "fixed"

	CodeScanningAlertStateCodeScanningAlertStateOpen CodeScanningAlertState = "open"
)

// Defines values for CodeScanningSarifsStatusProcessingStatus.
const (
	CodeScanningSarifsStatusProcessingStatusCodeScanningSarifsStatusProcessingStatusComplete CodeScanningSarifsStatusProcessingStatus = "complete"

	CodeScanningSarifsStatusProcessingStatusCodeScanningSarifsStatusProcessingStatusFailed CodeScanningSarifsStatusProcessingStatus = "failed"

	CodeScanningSarifsStatusProcessingStatusCodeScanningSarifsStatusProcessingStatusPending CodeScanningSarifsStatusProcessingStatus = "pending"
)

// Defines values for CodespaceLocation.
const (
	CodespaceLocationCodespaceLocationEastUs CodespaceLocation = "EastUs"

	CodespaceLocationCodespaceLocationSouthEastAsia CodespaceLocation = "SouthEastAsia"

	CodespaceLocationCodespaceLocationWestEurope CodespaceLocation = "WestEurope"

	CodespaceLocationCodespaceLocationWestUs2 CodespaceLocation = "WestUs2"
)

// Defines values for CodespaceState.
const (
	CodespaceStateCodespaceStateArchived CodespaceState = "Archived"

	CodespaceStateCodespaceStateAvailable CodespaceState = "Available"

	CodespaceStateCodespaceStateAwaiting CodespaceState = "Awaiting"

	CodespaceStateCodespaceStateCreated CodespaceState = "Created"

	CodespaceStateCodespaceStateDeleted CodespaceState = "Deleted"

	CodespaceStateCodespaceStateExporting CodespaceState = "Exporting"

	CodespaceStateCodespaceStateFailed CodespaceState = "Failed"

	CodespaceStateCodespaceStateMoved CodespaceState = "Moved"

	CodespaceStateCodespaceStateProvisioning CodespaceState = "Provisioning"

	CodespaceStateCodespaceStateQueued CodespaceState = "Queued"

	CodespaceStateCodespaceStateRebuilding CodespaceState = "Rebuilding"

	CodespaceStateCodespaceStateShutdown CodespaceState = "Shutdown"

	CodespaceStateCodespaceStateShuttingDown CodespaceState = "ShuttingDown"

	CodespaceStateCodespaceStateStarting CodespaceState = "Starting"

	CodespaceStateCodespaceStateUnavailable CodespaceState = "Unavailable"

	CodespaceStateCodespaceStateUnknown CodespaceState = "Unknown"

	CodespaceStateCodespaceStateUpdating CodespaceState = "Updating"
)

// Defines values for CodespaceMachinePrebuildAvailability.
const (
	CodespaceMachinePrebuildAvailabilityCodespaceMachinePrebuildAvailabilityBlob CodespaceMachinePrebuildAvailability = "blob"

	CodespaceMachinePrebuildAvailabilityCodespaceMachinePrebuildAvailabilityNone CodespaceMachinePrebuildAvailability = "none"

	CodespaceMachinePrebuildAvailabilityCodespaceMachinePrebuildAvailabilityPool CodespaceMachinePrebuildAvailability = "pool"
)

// Defines values for CodespacesSecretVisibility.
const (
	CodespacesSecretVisibilityCodespacesSecretVisibilityAll CodespacesSecretVisibility = "all"

	CodespacesSecretVisibilityCodespacesSecretVisibilityPrivate CodespacesSecretVisibility = "private"

	CodespacesSecretVisibilityCodespacesSecretVisibilitySelected CodespacesSecretVisibility = "selected"
)

// Defines values for CommitComparisonStatus.
const (
	CommitComparisonStatusCommitComparisonStatusAhead CommitComparisonStatus = "ahead"

	CommitComparisonStatusCommitComparisonStatusBehind CommitComparisonStatus = "behind"

	CommitComparisonStatusCommitComparisonStatusDiverged CommitComparisonStatus = "diverged"

	CommitComparisonStatusCommitComparisonStatusIdentical CommitComparisonStatus = "identical"
)

// Defines values for DependencyGraphDiffChangeType.
const (
	DependencyGraphDiffChangeTypeDependencyGraphDiffChangeTypeAdded DependencyGraphDiffChangeType = "added"

	DependencyGraphDiffChangeTypeDependencyGraphDiffChangeTypeRemoved DependencyGraphDiffChangeType = "removed"
)

// Defines values for DeploymentReviewerType.
const (
	DeploymentReviewerTypeDeploymentReviewerTypeTeam DeploymentReviewerType = "Team"

	DeploymentReviewerTypeDeploymentReviewerTypeUser DeploymentReviewerType = "User"
)

// Defines values for DeploymentStatusState.
const (
	DeploymentStatusStateDeploymentStatusStateError DeploymentStatusState = "error"

	DeploymentStatusStateDeploymentStatusStateFailure DeploymentStatusState = "failure"

	DeploymentStatusStateDeploymentStatusStateInProgress DeploymentStatusState = "in_progress"

	DeploymentStatusStateDeploymentStatusStateInactive DeploymentStatusState = "inactive"

	DeploymentStatusStateDeploymentStatusStatePending DeploymentStatusState = "pending"

	DeploymentStatusStateDeploymentStatusStateQueued DeploymentStatusState = "queued"

	DeploymentStatusStateDeploymentStatusStateSuccess DeploymentStatusState = "success"
)

// Defines values for DiffEntryStatus.
const (
	DiffEntryStatusDiffEntryStatusAdded DiffEntryStatus = "added"

	DiffEntryStatusDiffEntryStatusChanged DiffEntryStatus = "changed"

	DiffEntryStatusDiffEntryStatusCopied DiffEntryStatus = "copied"

	DiffEntryStatusDiffEntryStatusModified DiffEntryStatus = "modified"

	DiffEntryStatusDiffEntryStatusRemoved DiffEntryStatus = "removed"

	DiffEntryStatusDiffEntryStatusRenamed DiffEntryStatus = "renamed"

	DiffEntryStatusDiffEntryStatusUnchanged DiffEntryStatus = "unchanged"
)

// Defines values for EnabledOrganizations.
const (
	EnabledOrganizationsEnabledOrganizationsAll EnabledOrganizations = "all"

	EnabledOrganizationsEnabledOrganizationsNone EnabledOrganizations = "none"

	EnabledOrganizationsEnabledOrganizationsSelected EnabledOrganizations = "selected"
)

// Defines values for EnabledRepositories.
const (
	EnabledRepositoriesEnabledRepositoriesAll EnabledRepositories = "all"

	EnabledRepositoriesEnabledRepositoriesNone EnabledRepositories = "none"

	EnabledRepositoriesEnabledRepositoriesSelected EnabledRepositories = "selected"
)

// Defines values for EnvironmentApprovalsState.
const (
	EnvironmentApprovalsStateEnvironmentApprovalsStateApproved EnvironmentApprovalsState = "approved"

	EnvironmentApprovalsStateEnvironmentApprovalsStateRejected EnvironmentApprovalsState = "rejected"
)

// Defines values for FullRepositorySecurityAndAnalysisAdvancedSecurityStatus.
const (
	FullRepositorySecurityAndAnalysisAdvancedSecurityStatusFullRepositorySecurityAndAnalysisAdvancedSecurityStatusDisabled FullRepositorySecurityAndAnalysisAdvancedSecurityStatus = "disabled"

	FullRepositorySecurityAndAnalysisAdvancedSecurityStatusFullRepositorySecurityAndAnalysisAdvancedSecurityStatusEnabled FullRepositorySecurityAndAnalysisAdvancedSecurityStatus = "enabled"
)

// Defines values for FullRepositorySecurityAndAnalysisSecretScanningStatus.
const (
	FullRepositorySecurityAndAnalysisSecretScanningStatusFullRepositorySecurityAndAnalysisSecretScanningStatusDisabled FullRepositorySecurityAndAnalysisSecretScanningStatus = "disabled"

	FullRepositorySecurityAndAnalysisSecretScanningStatusFullRepositorySecurityAndAnalysisSecretScanningStatusEnabled FullRepositorySecurityAndAnalysisSecretScanningStatus = "enabled"
)

// Defines values for FullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatus.
const (
	FullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatusFullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatusDisabled FullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatus = "disabled"

	FullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatusFullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatusEnabled FullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatus = "enabled"
)

// Defines values for ImportStatus.
const (
	ImportStatusImportStatusAuth ImportStatus = "auth"

	ImportStatusImportStatusAuthFailed ImportStatus = "auth_failed"

	ImportStatusImportStatusChoose ImportStatus = "choose"

	ImportStatusImportStatusComplete ImportStatus = "complete"

	ImportStatusImportStatusDetecting ImportStatus = "detecting"

	ImportStatusImportStatusDetectionFoundMultiple ImportStatus = "detection_found_multiple"

	ImportStatusImportStatusDetectionFoundNothing ImportStatus = "detection_found_nothing"

	ImportStatusImportStatusDetectionNeedsAuth ImportStatus = "detection_needs_auth"

	ImportStatusImportStatusError ImportStatus = "error"

	ImportStatusImportStatusImporting ImportStatus = "importing"

	ImportStatusImportStatusMapping ImportStatus = "mapping"

	ImportStatusImportStatusNone ImportStatus = "none"

	ImportStatusImportStatusPushing ImportStatus = "pushing"

	ImportStatusImportStatusSetup ImportStatus = "setup"

	ImportStatusImportStatusUnknown ImportStatus = "unknown"

	ImportStatusImportStatusWaitingToPush ImportStatus = "waiting_to_push"
)

// Defines values for InstallationRepositorySelection.
const (
	InstallationRepositorySelectionInstallationRepositorySelectionAll InstallationRepositorySelection = "all"

	InstallationRepositorySelectionInstallationRepositorySelectionSelected InstallationRepositorySelection = "selected"
)

// Defines values for InstallationTokenRepositorySelection.
const (
	InstallationTokenRepositorySelectionInstallationTokenRepositorySelectionAll InstallationTokenRepositorySelection = "all"

	InstallationTokenRepositorySelectionInstallationTokenRepositorySelectionSelected InstallationTokenRepositorySelection = "selected"
)

// Defines values for InteractionExpiry.
const (
	InteractionExpiryInteractionExpiryOneDay InteractionExpiry = "one_day"

	InteractionExpiryInteractionExpiryOneMonth InteractionExpiry = "one_month"

	InteractionExpiryInteractionExpiryOneWeek InteractionExpiry = "one_week"

	InteractionExpiryInteractionExpirySixMonths InteractionExpiry = "six_months"

	InteractionExpiryInteractionExpiryThreeDays InteractionExpiry = "three_days"
)

// Defines values for InteractionGroup.
const (
	InteractionGroupInteractionGroupCollaboratorsOnly InteractionGroup = "collaborators_only"

	InteractionGroupInteractionGroupContributorsOnly InteractionGroup = "contributors_only"

	InteractionGroupInteractionGroupExistingUsers InteractionGroup = "existing_users"
)

// Defines values for JobStatus.
const (
	JobStatusJobStatusCompleted JobStatus = "completed"

	JobStatusJobStatusInProgress JobStatus = "in_progress"

	JobStatusJobStatusQueued JobStatus = "queued"
)

// Defines values for JobStepsStatus.
const (
	JobStepsStatusJobStepsStatusCompleted JobStepsStatus = "completed"

	JobStepsStatusJobStepsStatusInProgress JobStepsStatus = "in_progress"

	JobStepsStatusJobStepsStatusQueued JobStepsStatus = "queued"
)

// Defines values for MergedUpstreamMergeType.
const (
	MergedUpstreamMergeTypeMergedUpstreamMergeTypeFastForward MergedUpstreamMergeType = "fast-forward"

	MergedUpstreamMergeTypeMergedUpstreamMergeTypeMerge MergedUpstreamMergeType = "merge"

	MergedUpstreamMergeTypeMergedUpstreamMergeTypeNone MergedUpstreamMergeType = "none"
)

// Defines values for MilestoneState.
const (
	MilestoneStateMilestoneStateClosed MilestoneState = "closed"

	MilestoneStateMilestoneStateOpen MilestoneState = "open"
)

// Defines values for NullableCodespaceMachinePrebuildAvailability.
const (
	NullableCodespaceMachinePrebuildAvailabilityNullableCodespaceMachinePrebuildAvailabilityBlob NullableCodespaceMachinePrebuildAvailability = "blob"

	NullableCodespaceMachinePrebuildAvailabilityNullableCodespaceMachinePrebuildAvailabilityNone NullableCodespaceMachinePrebuildAvailability = "none"

	NullableCodespaceMachinePrebuildAvailabilityNullableCodespaceMachinePrebuildAvailabilityPool NullableCodespaceMachinePrebuildAvailability = "pool"
)

// Defines values for NullableMilestoneState.
const (
	NullableMilestoneStateNullableMilestoneStateClosed NullableMilestoneState = "closed"

	NullableMilestoneStateNullableMilestoneStateOpen NullableMilestoneState = "open"
)

// Defines values for NullableScopedInstallationRepositorySelection.
const (
	NullableScopedInstallationRepositorySelectionNullableScopedInstallationRepositorySelectionAll NullableScopedInstallationRepositorySelection = "all"

	NullableScopedInstallationRepositorySelectionNullableScopedInstallationRepositorySelectionSelected NullableScopedInstallationRepositorySelection = "selected"
)

// Defines values for OrgMembershipRole.
const (
	OrgMembershipRoleOrgMembershipRoleAdmin OrgMembershipRole = "admin"

	OrgMembershipRoleOrgMembershipRoleBillingManager OrgMembershipRole = "billing_manager"

	OrgMembershipRoleOrgMembershipRoleMember OrgMembershipRole = "member"
)

// Defines values for OrgMembershipState.
const (
	OrgMembershipStateOrgMembershipStateActive OrgMembershipState = "active"

	OrgMembershipStateOrgMembershipStatePending OrgMembershipState = "pending"
)

// Defines values for OrganizationActionsSecretVisibility.
const (
	OrganizationActionsSecretVisibilityOrganizationActionsSecretVisibilityAll OrganizationActionsSecretVisibility = "all"

	OrganizationActionsSecretVisibilityOrganizationActionsSecretVisibilityPrivate OrganizationActionsSecretVisibility = "private"

	OrganizationActionsSecretVisibilityOrganizationActionsSecretVisibilitySelected OrganizationActionsSecretVisibility = "selected"
)

// Defines values for OrganizationDependabotSecretVisibility.
const (
	OrganizationDependabotSecretVisibilityOrganizationDependabotSecretVisibilityAll OrganizationDependabotSecretVisibility = "all"

	OrganizationDependabotSecretVisibilityOrganizationDependabotSecretVisibilityPrivate OrganizationDependabotSecretVisibility = "private"

	OrganizationDependabotSecretVisibilityOrganizationDependabotSecretVisibilitySelected OrganizationDependabotSecretVisibility = "selected"
)

// Defines values for PackagePackageType.
const (
	PackagePackageTypePackagePackageTypeContainer PackagePackageType = "container"

	PackagePackageTypePackagePackageTypeDocker PackagePackageType = "docker"

	PackagePackageTypePackagePackageTypeMaven PackagePackageType = "maven"

	PackagePackageTypePackagePackageTypeNpm PackagePackageType = "npm"

	PackagePackageTypePackagePackageTypeNuget PackagePackageType = "nuget"

	PackagePackageTypePackagePackageTypeRubygems PackagePackageType = "rubygems"
)

// Defines values for PackageVisibility.
const (
	PackageVisibilityPackageVisibilityPrivate PackageVisibility = "private"

	PackageVisibilityPackageVisibilityPublic PackageVisibility = "public"
)

// Defines values for PackageVersionMetadataPackageType.
const (
	PackageVersionMetadataPackageTypePackageVersionMetadataPackageTypeContainer PackageVersionMetadataPackageType = "container"

	PackageVersionMetadataPackageTypePackageVersionMetadataPackageTypeDocker PackageVersionMetadataPackageType = "docker"

	PackageVersionMetadataPackageTypePackageVersionMetadataPackageTypeMaven PackageVersionMetadataPackageType = "maven"

	PackageVersionMetadataPackageTypePackageVersionMetadataPackageTypeNpm PackageVersionMetadataPackageType = "npm"

	PackageVersionMetadataPackageTypePackageVersionMetadataPackageTypeNuget PackageVersionMetadataPackageType = "nuget"

	PackageVersionMetadataPackageTypePackageVersionMetadataPackageTypeRubygems PackageVersionMetadataPackageType = "rubygems"
)

// Defines values for PageBuildType.
const (
	PageBuildTypePageBuildTypeLegacy PageBuildType = "legacy"

	PageBuildTypePageBuildTypeWorkflow PageBuildType = "workflow"
)

// Defines values for PageProtectedDomainState.
const (
	PageProtectedDomainStatePageProtectedDomainStatePending PageProtectedDomainState = "pending"

	PageProtectedDomainStatePageProtectedDomainStateUnverified PageProtectedDomainState = "unverified"

	PageProtectedDomainStatePageProtectedDomainStateVerified PageProtectedDomainState = "verified"
)

// Defines values for PageStatus.
const (
	PageStatusPageStatusBuilding PageStatus = "building"

	PageStatusPageStatusBuilt PageStatus = "built"

	PageStatusPageStatusErrored PageStatus = "errored"
)

// Defines values for PagesHttpsCertificateState.
const (
	PagesHttpsCertificateStatePagesHttpsCertificateStateApproved PagesHttpsCertificateState = "approved"

	PagesHttpsCertificateStatePagesHttpsCertificateStateAuthorizationCreated PagesHttpsCertificateState = "authorization_created"

	PagesHttpsCertificateStatePagesHttpsCertificateStateAuthorizationPending PagesHttpsCertificateState = "authorization_pending"

	PagesHttpsCertificateStatePagesHttpsCertificateStateAuthorizationRevoked PagesHttpsCertificateState = "authorization_revoked"

	PagesHttpsCertificateStatePagesHttpsCertificateStateAuthorized PagesHttpsCertificateState = "authorized"

	PagesHttpsCertificateStatePagesHttpsCertificateStateBadAuthz PagesHttpsCertificateState = "bad_authz"

	PagesHttpsCertificateStatePagesHttpsCertificateStateDestroyPending PagesHttpsCertificateState = "destroy_pending"

	PagesHttpsCertificateStatePagesHttpsCertificateStateDnsChanged PagesHttpsCertificateState = "dns_changed"

	PagesHttpsCertificateStatePagesHttpsCertificateStateErrored PagesHttpsCertificateState = "errored"

	PagesHttpsCertificateStatePagesHttpsCertificateStateIssued PagesHttpsCertificateState = "issued"

	PagesHttpsCertificateStatePagesHttpsCertificateStateNew PagesHttpsCertificateState = "new"

	PagesHttpsCertificateStatePagesHttpsCertificateStateUploaded PagesHttpsCertificateState = "uploaded"
)

// Defines values for ProjectOrganizationPermission.
const (
	ProjectOrganizationPermissionProjectOrganizationPermissionAdmin ProjectOrganizationPermission = "admin"

	ProjectOrganizationPermissionProjectOrganizationPermissionNone ProjectOrganizationPermission = "none"

	ProjectOrganizationPermissionProjectOrganizationPermissionRead ProjectOrganizationPermission = "read"

	ProjectOrganizationPermissionProjectOrganizationPermissionWrite ProjectOrganizationPermission = "write"
)

// Defines values for PullRequestState.
const (
	PullRequestStatePullRequestStateClosed PullRequestState = "closed"

	PullRequestStatePullRequestStateOpen PullRequestState = "open"
)

// Defines values for PullRequestReviewCommentSide.
const (
	PullRequestReviewCommentSidePullRequestReviewCommentSideLEFT PullRequestReviewCommentSide = "LEFT"

	PullRequestReviewCommentSidePullRequestReviewCommentSideRIGHT PullRequestReviewCommentSide = "RIGHT"
)

// Defines values for PullRequestReviewCommentStartSide.
const (
	PullRequestReviewCommentStartSidePullRequestReviewCommentStartSideLEFT PullRequestReviewCommentStartSide = "LEFT"

	PullRequestReviewCommentStartSidePullRequestReviewCommentStartSideRIGHT PullRequestReviewCommentStartSide = "RIGHT"
)

// Defines values for ReactionContent.
const (
	ReactionContentReactionContentConfused ReactionContent = "confused"

	ReactionContentReactionContentEyes ReactionContent = "eyes"

	ReactionContentReactionContentHeart ReactionContent = "heart"

	ReactionContentReactionContentHooray ReactionContent = "hooray"

	ReactionContentReactionContentLaugh ReactionContent = "laugh"

	ReactionContentReactionContentMinus1 ReactionContent = "-1"

	ReactionContentReactionContentPlus1 ReactionContent = "+1"

	ReactionContentReactionContentRocket ReactionContent = "rocket"
)

// Defines values for ReleaseAssetState.
const (
	ReleaseAssetStateReleaseAssetStateOpen ReleaseAssetState = "open"

	ReleaseAssetStateReleaseAssetStateUploaded ReleaseAssetState = "uploaded"
)

// Defines values for RepositoryInvitationPermissions.
const (
	RepositoryInvitationPermissionsRepositoryInvitationPermissionsAdmin RepositoryInvitationPermissions = "admin"

	RepositoryInvitationPermissionsRepositoryInvitationPermissionsMaintain RepositoryInvitationPermissions = "maintain"

	RepositoryInvitationPermissionsRepositoryInvitationPermissionsRead RepositoryInvitationPermissions = "read"

	RepositoryInvitationPermissionsRepositoryInvitationPermissionsTriage RepositoryInvitationPermissions = "triage"

	RepositoryInvitationPermissionsRepositoryInvitationPermissionsWrite RepositoryInvitationPermissions = "write"
)

// Defines values for ReviewCommentSide.
const (
	ReviewCommentSideReviewCommentSideLEFT ReviewCommentSide = "LEFT"

	ReviewCommentSideReviewCommentSideRIGHT ReviewCommentSide = "RIGHT"
)

// Defines values for ReviewCommentStartSide.
const (
	ReviewCommentStartSideReviewCommentStartSideLEFT ReviewCommentStartSide = "LEFT"

	ReviewCommentStartSideReviewCommentStartSideRIGHT ReviewCommentStartSide = "RIGHT"
)

// Defines values for RunnerLabelType.
const (
	RunnerLabelTypeRunnerLabelTypeCustom RunnerLabelType = "custom"

	RunnerLabelTypeRunnerLabelTypeReadOnly RunnerLabelType = "read-only"
)

// Defines values for ScimUserOperationsOp.
const (
	ScimUserOperationsOpScimUserOperationsOpAdd ScimUserOperationsOp = "add"

	ScimUserOperationsOpScimUserOperationsOpRemove ScimUserOperationsOp = "remove"

	ScimUserOperationsOpScimUserOperationsOpReplace ScimUserOperationsOp = "replace"
)

// Defines values for SecretScanningAlertResolution.
const (
	SecretScanningAlertResolutionSecretScanningAlertResolutionFalsePositive SecretScanningAlertResolution = "false_positive"

	SecretScanningAlertResolutionSecretScanningAlertResolutionNil SecretScanningAlertResolution = "<nil>"

	SecretScanningAlertResolutionSecretScanningAlertResolutionRevoked SecretScanningAlertResolution = "revoked"

	SecretScanningAlertResolutionSecretScanningAlertResolutionUsedInTests SecretScanningAlertResolution = "used_in_tests"

	SecretScanningAlertResolutionSecretScanningAlertResolutionWontFix SecretScanningAlertResolution = "wont_fix"
)

// Defines values for SecretScanningAlertState.
const (
	SecretScanningAlertStateSecretScanningAlertStateOpen SecretScanningAlertState = "open"

	SecretScanningAlertStateSecretScanningAlertStateResolved SecretScanningAlertState = "resolved"
)

// Defines values for SecretScanningLocationType.
const (
	SecretScanningLocationTypeSecretScanningLocationTypeCommit SecretScanningLocationType = "commit"
)

// Defines values for TeamFullPrivacy.
const (
	TeamFullPrivacyTeamFullPrivacyClosed TeamFullPrivacy = "closed"

	TeamFullPrivacyTeamFullPrivacySecret TeamFullPrivacy = "secret"
)

// Defines values for TeamMembershipRole.
const (
	TeamMembershipRoleTeamMembershipRoleMaintainer TeamMembershipRole = "maintainer"

	TeamMembershipRoleTeamMembershipRoleMember TeamMembershipRole = "member"
)

// Defines values for TeamMembershipState.
const (
	TeamMembershipStateTeamMembershipStateActive TeamMembershipState = "active"

	TeamMembershipStateTeamMembershipStatePending TeamMembershipState = "pending"
)

// Defines values for WorkflowState.
const (
	WorkflowStateWorkflowStateActive WorkflowState = "active"

	WorkflowStateWorkflowStateDeleted WorkflowState = "deleted"

	WorkflowStateWorkflowStateDisabledFork WorkflowState = "disabled_fork"

	WorkflowStateWorkflowStateDisabledInactivity WorkflowState = "disabled_inactivity"

	WorkflowStateWorkflowStateDisabledManually WorkflowState = "disabled_manually"
)

// Defines values for AuditLogInclude.
const (
	AuditLogIncludeAll AuditLogInclude = "all"

	AuditLogIncludeGit AuditLogInclude = "git"

	AuditLogIncludeWeb AuditLogInclude = "web"
)

// Defines values for AuditLogOrder.
const (
	AuditLogOrderAsc AuditLogOrder = "asc"

	AuditLogOrderDesc AuditLogOrder = "desc"
)

// Defines values for Direction.
const (
	DirectionAsc Direction = "asc"

	DirectionDesc Direction = "desc"
)

// Defines values for Order.
const (
	OrderAsc Order = "asc"

	OrderDesc Order = "desc"
)

// Defines values for PackageType.
const (
	PackageTypeContainer PackageType = "container"

	PackageTypeDocker PackageType = "docker"

	PackageTypeMaven PackageType = "maven"

	PackageTypeNpm PackageType = "npm"

	PackageTypeNuget PackageType = "nuget"

	PackageTypeRubygems PackageType = "rubygems"
)

// Defines values for Per.
const (
	PerDay Per = "day"

	PerEmpty Per = ""

	PerWeek Per = "week"
)

// Defines values for Sort.
const (
	SortCreated Sort = "created"

	SortUpdated Sort = "updated"
)

// Defines values for WorkflowRunStatus.
const (
	WorkflowRunStatusActionRequired WorkflowRunStatus = "action_required"

	WorkflowRunStatusCancelled WorkflowRunStatus = "cancelled"

	WorkflowRunStatusCompleted WorkflowRunStatus = "completed"

	WorkflowRunStatusFailure WorkflowRunStatus = "failure"

	WorkflowRunStatusInProgress WorkflowRunStatus = "in_progress"

	WorkflowRunStatusNeutral WorkflowRunStatus = "neutral"

	WorkflowRunStatusQueued WorkflowRunStatus = "queued"

	WorkflowRunStatusRequested WorkflowRunStatus = "requested"

	WorkflowRunStatusSkipped WorkflowRunStatus = "skipped"

	WorkflowRunStatusStale WorkflowRunStatus = "stale"

	WorkflowRunStatusSuccess WorkflowRunStatus = "success"

	WorkflowRunStatusTimedOut WorkflowRunStatus = "timed_out"

	WorkflowRunStatusWaiting WorkflowRunStatus = "waiting"
)

// ActionsBillingUsage defines model for actions-billing-usage.
type ActionsBillingUsage struct {
	// The amount of free GitHub Actions minutes available.
	IncludedMinutes      int `json:"included_minutes"`
	MinutesUsedBreakdown struct {
		// Total minutes used on macOS runner machines.
		MACOS *int `json:"MACOS,omitempty"`

		// Total minutes used on Ubuntu runner machines.
		UBUNTU *int `json:"UBUNTU,omitempty"`

		// Total minutes used on Windows runner machines.
		WINDOWS *int `json:"WINDOWS,omitempty"`

		// Total minutes used on Linux 16 core runner machines.
		Linux16Core *int `json:"linux_16_core,omitempty"`

		// Total minutes used on Linux 32 core runner machines.
		Linux32Core *int `json:"linux_32_core,omitempty"`

		// Total minutes used on Linux 4 core runner machines.
		Linux4Core *int `json:"linux_4_core,omitempty"`

		// Total minutes used on Linux 64 core runner machines.
		Linux64Core *int `json:"linux_64_core,omitempty"`

		// Total minutes used on Linux 8 core runner machines.
		Linux8Core *int `json:"linux_8_core,omitempty"`

		// Total minutes used on all runner machines.
		Total *int `json:"total,omitempty"`

		// Total minutes used on Windows 16 core runner machines.
		Windows16Core *int `json:"windows_16_core,omitempty"`

		// Total minutes used on Windows 32 core runner machines.
		Windows32Core *int `json:"windows_32_core,omitempty"`

		// Total minutes used on Windows 4 core runner machines.
		Windows4Core *int `json:"windows_4_core,omitempty"`

		// Total minutes used on Windows 64 core runner machines.
		Windows64Core *int `json:"windows_64_core,omitempty"`

		// Total minutes used on Windows 8 core runner machines.
		Windows8Core *int `json:"windows_8_core,omitempty"`
	} `json:"minutes_used_breakdown"`

	// The sum of the free and paid GitHub Actions minutes used.
	TotalMinutesUsed int `json:"total_minutes_used"`

	// The total paid GitHub Actions minutes used.
	TotalPaidMinutesUsed int `json:"total_paid_minutes_used"`
}

// GitHub Actions Cache Usage by repository.
type ActionsCacheUsageByRepository struct {
	// The number of active caches in the repository.
	ActiveCachesCount int `json:"active_caches_count"`

	// The sum of the size in bytes of all the active cache items in the repository.
	ActiveCachesSizeInBytes int `json:"active_caches_size_in_bytes"`

	// The repository owner and name for the cache usage being shown.
	FullName string `json:"full_name"`
}

// ActionsCacheUsageOrgEnterprise defines model for actions-cache-usage-org-enterprise.
type ActionsCacheUsageOrgEnterprise struct {
	// The count of active caches across all repositories of an enterprise or an organization.
	TotalActiveCachesCount int `json:"total_active_caches_count"`

	// The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
	TotalActiveCachesSizeInBytes int `json:"total_active_caches_size_in_bytes"`
}

// Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
type ActionsCanApprovePullRequestReviews bool

// The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
type ActionsDefaultWorkflowPermissions string

// Whether GitHub Actions is enabled on the repository.
type ActionsEnabled bool

// ActionsEnterprisePermissions defines model for actions-enterprise-permissions.
type ActionsEnterprisePermissions struct {
	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`

	// The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
	EnabledOrganizations EnabledOrganizations `json:"enabled_organizations"`

	// The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
	SelectedActionsUrl *SelectedActionsUrl `json:"selected_actions_url,omitempty"`

	// The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`.
	SelectedOrganizationsUrl *string `json:"selected_organizations_url,omitempty"`
}

// ActionsGetDefaultWorkflowPermissions defines model for actions-get-default-workflow-permissions.
type ActionsGetDefaultWorkflowPermissions struct {
	// Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
	CanApprovePullRequestReviews ActionsCanApprovePullRequestReviews `json:"can_approve_pull_request_reviews"`

	// The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
	DefaultWorkflowPermissions ActionsDefaultWorkflowPermissions `json:"default_workflow_permissions"`
}

// ActionsOrganizationPermissions defines model for actions-organization-permissions.
type ActionsOrganizationPermissions struct {
	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`

	// The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
	EnabledRepositories EnabledRepositories `json:"enabled_repositories"`

	// The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
	SelectedActionsUrl *SelectedActionsUrl `json:"selected_actions_url,omitempty"`

	// The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
	SelectedRepositoriesUrl *string `json:"selected_repositories_url,omitempty"`
}

// The public key used for setting Actions Secrets.
type ActionsPublicKey struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Id        *int    `json:"id,omitempty"`

	// The Base64 encoded public key.
	Key string `json:"key"`

	// The identifier for the key.
	KeyId string  `json:"key_id"`
	Title *string `json:"title,omitempty"`
	Url   *string `json:"url,omitempty"`
}

// ActionsRepositoryPermissions defines model for actions-repository-permissions.
type ActionsRepositoryPermissions struct {
	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`

	// Whether GitHub Actions is enabled on the repository.
	Enabled ActionsEnabled `json:"enabled"`

	// The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
	SelectedActionsUrl *SelectedActionsUrl `json:"selected_actions_url,omitempty"`
}

// Set secrets for GitHub Actions.
type ActionsSecret struct {
	CreatedAt time.Time `json:"created_at"`

	// The name of the secret.
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// ActionsSetDefaultWorkflowPermissions defines model for actions-set-default-workflow-permissions.
type ActionsSetDefaultWorkflowPermissions struct {
	// Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
	CanApprovePullRequestReviews *ActionsCanApprovePullRequestReviews `json:"can_approve_pull_request_reviews,omitempty"`

	// The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
	DefaultWorkflowPermissions *ActionsDefaultWorkflowPermissions `json:"default_workflow_permissions,omitempty"`
}

// ActionsWorkflowAccessToRepository defines model for actions-workflow-access-to-repository.
type ActionsWorkflowAccessToRepository struct {
	// Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
	// repository. `none` means access is only possible from workflows in this repository.
	AccessLevel ActionsWorkflowAccessToRepositoryAccessLevel `json:"access_level"`
}

// Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
// repository. `none` means access is only possible from workflows in this repository.
type ActionsWorkflowAccessToRepositoryAccessLevel string

// Actor
type Actor struct {
	AvatarUrl    string  `json:"avatar_url"`
	DisplayLogin *string `json:"display_login,omitempty"`
	GravatarId   *string `json:"gravatar_id"`
	Id           int     `json:"id"`
	Login        string  `json:"login"`
	Url          string  `json:"url"`
}

// Added to Project Issue Event
type AddedToProjectIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	ProjectCard           *struct {
		ColumnName         string  `json:"column_name"`
		Id                 int     `json:"id"`
		PreviousColumnName *string `json:"previous_column_name,omitempty"`
		ProjectId          int     `json:"project_id"`
		ProjectUrl         string  `json:"project_url"`
		Url                string  `json:"url"`
	} `json:"project_card,omitempty"`
	Url string `json:"url"`
}

// AdvancedSecurityActiveCommitters defines model for advanced-security-active-committers.
type AdvancedSecurityActiveCommitters struct {
	Repositories                    []AdvancedSecurityActiveCommittersRepository `json:"repositories"`
	TotalAdvancedSecurityCommitters *int                                         `json:"total_advanced_security_committers,omitempty"`
}

// AdvancedSecurityActiveCommittersRepository defines model for advanced-security-active-committers-repository.
type AdvancedSecurityActiveCommittersRepository struct {
	AdvancedSecurityCommitters          int                                    `json:"advanced_security_committers"`
	AdvancedSecurityCommittersBreakdown []AdvancedSecurityActiveCommittersUser `json:"advanced_security_committers_breakdown"`
	Name                                string                                 `json:"name"`
}

// AdvancedSecurityActiveCommittersUser defines model for advanced-security-active-committers-user.
type AdvancedSecurityActiveCommittersUser struct {
	LastPushedDate string `json:"last_pushed_date"`
	UserLogin      string `json:"user_login"`
}

// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
type AlertCreatedAt time.Time

// The GitHub URL of the alert resource.
type AlertHtmlUrl string

// The REST API URL for fetching the list of instances for an alert.
type AlertInstancesUrl string

// The security alert number.
type AlertNumber int

// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
type AlertUpdatedAt time.Time

// The REST API URL of the alert resource.
type AlertUrl string

// The permissions policy that controls the actions and reusable workflows that are allowed to run.
type AllowedActions string

// Api Overview
type ApiOverview struct {
	Actions            *[]string `json:"actions,omitempty"`
	Api                *[]string `json:"api,omitempty"`
	Dependabot         *[]string `json:"dependabot,omitempty"`
	Git                *[]string `json:"git,omitempty"`
	Hooks              *[]string `json:"hooks,omitempty"`
	Importer           *[]string `json:"importer,omitempty"`
	Packages           *[]string `json:"packages,omitempty"`
	Pages              *[]string `json:"pages,omitempty"`
	SshKeyFingerprints *struct {
		SHA256DSA     *string `json:"SHA256_DSA,omitempty"`
		SHA256ECDSA   *string `json:"SHA256_ECDSA,omitempty"`
		SHA256ED25519 *string `json:"SHA256_ED25519,omitempty"`
		SHA256RSA     *string `json:"SHA256_RSA,omitempty"`
	} `json:"ssh_key_fingerprints,omitempty"`
	SshKeys                          *[]string `json:"ssh_keys,omitempty"`
	VerifiablePasswordAuthentication bool      `json:"verifiable_password_authentication"`
	Web                              *[]string `json:"web,omitempty"`
}

// The permissions granted to the user-to-server access token.
type AppPermissions struct {
	// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
	Actions *AppPermissionsActions `json:"actions,omitempty"`

	// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
	Administration *AppPermissionsAdministration `json:"administration,omitempty"`

	// The level of permission to grant the access token for checks on code.
	Checks *AppPermissionsChecks `json:"checks,omitempty"`

	// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
	Contents *AppPermissionsContents `json:"contents,omitempty"`

	// The level of permission to grant the access token for deployments and deployment statuses.
	Deployments *AppPermissionsDeployments `json:"deployments,omitempty"`

	// The level of permission to grant the access token for managing repository environments.
	Environments *AppPermissionsEnvironments `json:"environments,omitempty"`

	// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
	Issues *AppPermissionsIssues `json:"issues,omitempty"`

	// The level of permission to grant the access token for organization teams and members.
	Members *AppPermissionsMembers `json:"members,omitempty"`

	// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
	Metadata *AppPermissionsMetadata `json:"metadata,omitempty"`

	// The level of permission to grant the access token to manage access to an organization.
	OrganizationAdministration *AppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`

	// The level of permission to grant the access token to manage the post-receive hooks for an organization.
	OrganizationHooks *AppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`

	// The level of permission to grant the access token for organization packages published to GitHub Packages.
	OrganizationPackages *AppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`

	// The level of permission to grant the access token for viewing an organization's plan.
	OrganizationPlan *AppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`

	// The level of permission to grant the access token to manage organization projects and projects beta (where available).
	OrganizationProjects *AppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`

	// The level of permission to grant the access token to manage organization secrets.
	OrganizationSecrets *AppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`

	// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
	OrganizationSelfHostedRunners *AppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`

	// The level of permission to grant the access token to view and manage users blocked by the organization.
	OrganizationUserBlocking *AppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`

	// The level of permission to grant the access token for packages published to GitHub Packages.
	Packages *AppPermissionsPackages `json:"packages,omitempty"`

	// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
	Pages *AppPermissionsPages `json:"pages,omitempty"`

	// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
	PullRequests *AppPermissionsPullRequests `json:"pull_requests,omitempty"`

	// The level of permission to grant the access token to manage the post-receive hooks for a repository.
	RepositoryHooks *AppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`

	// The level of permission to grant the access token to manage repository projects, columns, and cards.
	RepositoryProjects *AppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`

	// The level of permission to grant the access token to view and manage secret scanning alerts.
	SecretScanningAlerts *AppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`

	// The level of permission to grant the access token to manage repository secrets.
	Secrets *AppPermissionsSecrets `json:"secrets,omitempty"`

	// The level of permission to grant the access token to view and manage security events like code scanning alerts.
	SecurityEvents *AppPermissionsSecurityEvents `json:"security_events,omitempty"`

	// The level of permission to grant the access token to manage just a single file.
	SingleFile *AppPermissionsSingleFile `json:"single_file,omitempty"`

	// The level of permission to grant the access token for commit statuses.
	Statuses *AppPermissionsStatuses `json:"statuses,omitempty"`

	// The level of permission to grant the access token to manage team discussions and related comments.
	TeamDiscussions *AppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`

	// The level of permission to grant the access token to manage Dependabot alerts.
	VulnerabilityAlerts *AppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`

	// The level of permission to grant the access token to update GitHub Actions workflow files.
	Workflows *AppPermissionsWorkflows `json:"workflows,omitempty"`
}

// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
type AppPermissionsActions string

// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
type AppPermissionsAdministration string

// The level of permission to grant the access token for checks on code.
type AppPermissionsChecks string

// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
type AppPermissionsContents string

// The level of permission to grant the access token for deployments and deployment statuses.
type AppPermissionsDeployments string

// The level of permission to grant the access token for managing repository environments.
type AppPermissionsEnvironments string

// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
type AppPermissionsIssues string

// The level of permission to grant the access token for organization teams and members.
type AppPermissionsMembers string

// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
type AppPermissionsMetadata string

// The level of permission to grant the access token to manage access to an organization.
type AppPermissionsOrganizationAdministration string

// The level of permission to grant the access token to manage the post-receive hooks for an organization.
type AppPermissionsOrganizationHooks string

// The level of permission to grant the access token for organization packages published to GitHub Packages.
type AppPermissionsOrganizationPackages string

// The level of permission to grant the access token for viewing an organization's plan.
type AppPermissionsOrganizationPlan string

// The level of permission to grant the access token to manage organization projects and projects beta (where available).
type AppPermissionsOrganizationProjects string

// The level of permission to grant the access token to manage organization secrets.
type AppPermissionsOrganizationSecrets string

// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
type AppPermissionsOrganizationSelfHostedRunners string

// The level of permission to grant the access token to view and manage users blocked by the organization.
type AppPermissionsOrganizationUserBlocking string

// The level of permission to grant the access token for packages published to GitHub Packages.
type AppPermissionsPackages string

// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
type AppPermissionsPages string

// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
type AppPermissionsPullRequests string

// The level of permission to grant the access token to manage the post-receive hooks for a repository.
type AppPermissionsRepositoryHooks string

// The level of permission to grant the access token to manage repository projects, columns, and cards.
type AppPermissionsRepositoryProjects string

// The level of permission to grant the access token to view and manage secret scanning alerts.
type AppPermissionsSecretScanningAlerts string

// The level of permission to grant the access token to manage repository secrets.
type AppPermissionsSecrets string

// The level of permission to grant the access token to view and manage security events like code scanning alerts.
type AppPermissionsSecurityEvents string

// The level of permission to grant the access token to manage just a single file.
type AppPermissionsSingleFile string

// The level of permission to grant the access token for commit statuses.
type AppPermissionsStatuses string

// The level of permission to grant the access token to manage team discussions and related comments.
type AppPermissionsTeamDiscussions string

// The level of permission to grant the access token to manage Dependabot alerts.
type AppPermissionsVulnerabilityAlerts string

// The level of permission to grant the access token to update GitHub Actions workflow files.
type AppPermissionsWorkflows string

// The authorization associated with an OAuth Access.
type ApplicationGrant struct {
	App struct {
		ClientId string `json:"client_id"`
		Name     string `json:"name"`
		Url      string `json:"url"`
	} `json:"app"`
	CreatedAt time.Time `json:"created_at"`
	Id        int       `json:"id"`
	Scopes    []string  `json:"scopes"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// An artifact
type Artifact struct {
	ArchiveDownloadUrl string     `json:"archive_download_url"`
	CreatedAt          *time.Time `json:"created_at"`

	// Whether or not the artifact has expired.
	Expired   bool       `json:"expired"`
	ExpiresAt *time.Time `json:"expires_at"`
	Id        int        `json:"id"`

	// The name of the artifact.
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// The size in bytes of the artifact.
	SizeInBytes int        `json:"size_in_bytes"`
	UpdatedAt   *time.Time `json:"updated_at"`
	Url         string     `json:"url"`
}

// Assigned Issue Event
type AssignedIssueEvent struct {
	// Simple User
	Actor SimpleUser `json:"actor"`

	// Simple User
	Assignee SimpleUser `json:"assignee"`

	// Simple User
	Assigner  SimpleUser `json:"assigner"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp Integration `json:"performed_via_github_app"`
	Url                   string      `json:"url"`
}

// AuditLogEvent defines model for audit-log-event.
type AuditLogEvent struct {
	// The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
	Timestamp *int `json:"@timestamp,omitempty"`

	// A unique identifier for an audit event.
	DocumentId *string `json:"_document_id,omitempty"`

	// The name of the action that was performed, for example `user.login` or `repo.create`.
	Action    *string `json:"action,omitempty"`
	Active    *bool   `json:"active,omitempty"`
	ActiveWas *bool   `json:"active_was,omitempty"`

	// The actor who performed the action.
	Actor *string `json:"actor,omitempty"`

	// The id of the actor who performed the action.
	ActorId       *int `json:"actor_id,omitempty"`
	ActorLocation *struct {
		CountryName *string `json:"country_name,omitempty"`
	} `json:"actor_location,omitempty"`

	// The username of the account being blocked.
	BlockedUser *string                   `json:"blocked_user,omitempty"`
	Business    *string                   `json:"business,omitempty"`
	Config      *[]map[string]interface{} `json:"config,omitempty"`
	ConfigWas   *[]map[string]interface{} `json:"config_was,omitempty"`
	ContentType *string                   `json:"content_type,omitempty"`

	// The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
	CreatedAt            *int                      `json:"created_at,omitempty"`
	Data                 *AuditLogEvent_Data       `json:"data,omitempty"`
	DeployKeyFingerprint *string                   `json:"deploy_key_fingerprint,omitempty"`
	Emoji                *string                   `json:"emoji,omitempty"`
	Events               *[]map[string]interface{} `json:"events,omitempty"`
	EventsWere           *[]map[string]interface{} `json:"events_were,omitempty"`
	Explanation          *string                   `json:"explanation,omitempty"`
	Fingerprint          *string                   `json:"fingerprint,omitempty"`
	HookId               *int                      `json:"hook_id,omitempty"`
	LimitedAvailability  *bool                     `json:"limited_availability,omitempty"`
	Message              *string                   `json:"message,omitempty"`
	Name                 *string                   `json:"name,omitempty"`
	OldUser              *string                   `json:"old_user,omitempty"`
	OpensshPublicKey     *string                   `json:"openssh_public_key,omitempty"`
	Org                  *string                   `json:"org,omitempty"`
	OrgId                *int                      `json:"org_id,omitempty"`
	PreviousVisibility   *string                   `json:"previous_visibility,omitempty"`
	ReadOnly             *bool                     `json:"read_only,omitempty"`

	// The name of the repository.
	Repo *string `json:"repo,omitempty"`

	// The name of the repository.
	Repository       *string `json:"repository,omitempty"`
	RepositoryPublic *bool   `json:"repository_public,omitempty"`
	TargetLogin      *string `json:"target_login,omitempty"`
	Team             *string `json:"team,omitempty"`

	// The type of protocol (for example, HTTP or SSH) used to transfer Git data.
	TransportProtocol *int `json:"transport_protocol,omitempty"`

	// A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
	TransportProtocolName *string `json:"transport_protocol_name,omitempty"`

	// The user that was affected by the action performed (if available).
	User *string `json:"user,omitempty"`

	// The repository visibility, for example `public` or `private`.
	Visibility *string `json:"visibility,omitempty"`
}

// AuditLogEvent_Data defines model for AuditLogEvent.Data.
type AuditLogEvent_Data struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Authentication Token
type AuthenticationToken struct {
	// The time this token expires
	ExpiresAt   time.Time               `json:"expires_at"`
	Permissions *map[string]interface{} `json:"permissions,omitempty"`

	// The repositories this token has access to
	Repositories *[]Repository `json:"repositories,omitempty"`

	// Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection *AuthenticationTokenRepositorySelection `json:"repository_selection,omitempty"`
	SingleFile          *string                                 `json:"single_file"`

	// The token used for authentication
	Token string `json:"token"`
}

// Describe whether all repositories have been selected or there's a selection involved
type AuthenticationTokenRepositorySelection string

// How the author is associated with the repository.
type AuthorAssociation string

// The authorization for an OAuth app, GitHub App, or a Personal Access Token.
type Authorization struct {
	App struct {
		ClientId string `json:"client_id"`
		Name     string `json:"name"`
		Url      string `json:"url"`
	} `json:"app"`
	CreatedAt    time.Time                   `json:"created_at"`
	ExpiresAt    *time.Time                  `json:"expires_at"`
	Fingerprint  *string                     `json:"fingerprint"`
	HashedToken  *string                     `json:"hashed_token"`
	Id           int                         `json:"id"`
	Installation *NullableScopedInstallation `json:"installation"`
	Note         *string                     `json:"note"`
	NoteUrl      *string                     `json:"note_url"`

	// A list of scopes that this authorization is in.
	Scopes         *[]string `json:"scopes"`
	Token          string    `json:"token"`
	TokenLastEight *string   `json:"token_last_eight"`
	UpdatedAt      time.Time `json:"updated_at"`
	Url            string    `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// The status of auto merging a pull request.
type AutoMerge struct {
	// Commit message for the merge commit.
	CommitMessage string `json:"commit_message"`

	// Title for the merge commit message.
	CommitTitle string `json:"commit_title"`

	// Simple User
	EnabledBy SimpleUser `json:"enabled_by"`

	// The merge method to use.
	MergeMethod AutoMergeMergeMethod `json:"merge_method"`
}

// The merge method to use.
type AutoMergeMergeMethod string

// An autolink reference.
type Autolink struct {
	Id int `json:"id"`

	// The prefix of a key that is linkified.
	KeyPrefix string `json:"key_prefix"`

	// A template for the target URL that is generated if a key was found.
	UrlTemplate string `json:"url_template"`
}

// Base Gist
type BaseGist struct {
	Comments    int            `json:"comments"`
	CommentsUrl string         `json:"comments_url"`
	CommitsUrl  string         `json:"commits_url"`
	CreatedAt   time.Time      `json:"created_at"`
	Description *string        `json:"description"`
	Files       BaseGist_Files `json:"files"`
	Forks       *[]interface{} `json:"forks,omitempty"`
	ForksUrl    string         `json:"forks_url"`
	GitPullUrl  string         `json:"git_pull_url"`
	GitPushUrl  string         `json:"git_push_url"`
	History     *[]interface{} `json:"history,omitempty"`
	HtmlUrl     string         `json:"html_url"`
	Id          string         `json:"id"`
	NodeId      string         `json:"node_id"`

	// Simple User
	Owner     *SimpleUser `json:"owner,omitempty"`
	Public    bool        `json:"public"`
	Truncated *bool       `json:"truncated,omitempty"`
	UpdatedAt time.Time   `json:"updated_at"`
	Url       string      `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// BaseGist_Files defines model for BaseGist.Files.
type BaseGist_Files struct {
	AdditionalProperties map[string]struct {
		Filename *string `json:"filename,omitempty"`
		Language *string `json:"language,omitempty"`
		RawUrl   *string `json:"raw_url,omitempty"`
		Size     *int    `json:"size,omitempty"`
		Type     *string `json:"type,omitempty"`
	} `json:"-"`
}

// Basic Error
type BasicError struct {
	DocumentationUrl *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
	Status           *string `json:"status,omitempty"`
	Url              *string `json:"url,omitempty"`
}

// Blob
type Blob struct {
	Content            string  `json:"content"`
	Encoding           string  `json:"encoding"`
	HighlightedContent *string `json:"highlighted_content,omitempty"`
	NodeId             string  `json:"node_id"`
	Sha                string  `json:"sha"`
	Size               *int    `json:"size"`
	Url                string  `json:"url"`
}

// Branch Protection
type BranchProtection struct {
	AllowDeletions *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"allow_deletions,omitempty"`
	AllowForcePushes *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"allow_force_pushes,omitempty"`
	BlockCreations *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"block_creations,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`

	// Protected Branch Admin Enforced
	EnforceAdmins                  *ProtectedBranchAdminEnforced `json:"enforce_admins,omitempty"`
	Name                           *string                       `json:"name,omitempty"`
	ProtectionUrl                  *string                       `json:"protection_url,omitempty"`
	RequiredConversationResolution *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"required_conversation_resolution,omitempty"`
	RequiredLinearHistory *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"required_linear_history,omitempty"`

	// Protected Branch Pull Request Review
	RequiredPullRequestReviews *ProtectedBranchPullRequestReview `json:"required_pull_request_reviews,omitempty"`
	RequiredSignatures         *struct {
		Enabled bool   `json:"enabled"`
		Url     string `json:"url"`
	} `json:"required_signatures,omitempty"`

	// Protected Branch Required Status Check
	RequiredStatusChecks *ProtectedBranchRequiredStatusCheck `json:"required_status_checks,omitempty"`

	// Branch Restriction Policy
	Restrictions *BranchRestrictionPolicy `json:"restrictions,omitempty"`
	Url          *string                  `json:"url,omitempty"`
}

// Branch Restriction Policy
type BranchRestrictionPolicy struct {
	Apps []struct {
		CreatedAt   *string   `json:"created_at,omitempty"`
		Description *string   `json:"description,omitempty"`
		Events      *[]string `json:"events,omitempty"`
		ExternalUrl *string   `json:"external_url,omitempty"`
		HtmlUrl     *string   `json:"html_url,omitempty"`
		Id          *int      `json:"id,omitempty"`
		Name        *string   `json:"name,omitempty"`
		NodeId      *string   `json:"node_id,omitempty"`
		Owner       *struct {
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			Description       *string `json:"description,omitempty"`
			EventsUrl         *string `json:"events_url,omitempty"`
			FollowersUrl      *string `json:"followers_url,omitempty"`
			FollowingUrl      *string `json:"following_url,omitempty"`
			GistsUrl          *string `json:"gists_url,omitempty"`
			GravatarId        *string `json:"gravatar_id,omitempty"`
			HooksUrl          *string `json:"hooks_url,omitempty"`
			HtmlUrl           *string `json:"html_url,omitempty"`
			Id                *int    `json:"id,omitempty"`
			IssuesUrl         *string `json:"issues_url,omitempty"`
			Login             *string `json:"login,omitempty"`
			MembersUrl        *string `json:"members_url,omitempty"`
			NodeId            *string `json:"node_id,omitempty"`
			OrganizationsUrl  *string `json:"organizations_url,omitempty"`
			PublicMembersUrl  *string `json:"public_members_url,omitempty"`
			ReceivedEventsUrl *string `json:"received_events_url,omitempty"`
			ReposUrl          *string `json:"repos_url,omitempty"`
			SiteAdmin         *bool   `json:"site_admin,omitempty"`
			StarredUrl        *string `json:"starred_url,omitempty"`
			SubscriptionsUrl  *string `json:"subscriptions_url,omitempty"`
			Type              *string `json:"type,omitempty"`
			Url               *string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions *struct {
			Contents   *string `json:"contents,omitempty"`
			Issues     *string `json:"issues,omitempty"`
			Metadata   *string `json:"metadata,omitempty"`
			SingleFile *string `json:"single_file,omitempty"`
		} `json:"permissions,omitempty"`
		Slug      *string `json:"slug,omitempty"`
		UpdatedAt *string `json:"updated_at,omitempty"`
	} `json:"apps"`
	AppsUrl string `json:"apps_url"`
	Teams   []struct {
		Description     *string `json:"description"`
		HtmlUrl         *string `json:"html_url,omitempty"`
		Id              *int    `json:"id,omitempty"`
		MembersUrl      *string `json:"members_url,omitempty"`
		Name            *string `json:"name,omitempty"`
		NodeId          *string `json:"node_id,omitempty"`
		Parent          *string `json:"parent"`
		Permission      *string `json:"permission,omitempty"`
		Privacy         *string `json:"privacy,omitempty"`
		RepositoriesUrl *string `json:"repositories_url,omitempty"`
		Slug            *string `json:"slug,omitempty"`
		Url             *string `json:"url,omitempty"`
	} `json:"teams"`
	TeamsUrl string `json:"teams_url"`
	Url      string `json:"url"`
	Users    []struct {
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		EventsUrl         *string `json:"events_url,omitempty"`
		FollowersUrl      *string `json:"followers_url,omitempty"`
		FollowingUrl      *string `json:"following_url,omitempty"`
		GistsUrl          *string `json:"gists_url,omitempty"`
		GravatarId        *string `json:"gravatar_id,omitempty"`
		HtmlUrl           *string `json:"html_url,omitempty"`
		Id                *int    `json:"id,omitempty"`
		Login             *string `json:"login,omitempty"`
		NodeId            *string `json:"node_id,omitempty"`
		OrganizationsUrl  *string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl *string `json:"received_events_url,omitempty"`
		ReposUrl          *string `json:"repos_url,omitempty"`
		SiteAdmin         *bool   `json:"site_admin,omitempty"`
		StarredUrl        *string `json:"starred_url,omitempty"`
		SubscriptionsUrl  *string `json:"subscriptions_url,omitempty"`
		Type              *string `json:"type,omitempty"`
		Url               *string `json:"url,omitempty"`
	} `json:"users"`
	UsersUrl string `json:"users_url"`
}

// Branch Short
type BranchShort struct {
	Commit struct {
		Sha string `json:"sha"`
		Url string `json:"url"`
	} `json:"commit"`
	Name      string `json:"name"`
	Protected bool   `json:"protected"`
}

// Branch With Protection
type BranchWithProtection struct {
	Links struct {
		Html string `json:"html"`
		Self string `json:"self"`
	} `json:"_links"`

	// Commit
	Commit    Commit  `json:"commit"`
	Name      string  `json:"name"`
	Pattern   *string `json:"pattern,omitempty"`
	Protected bool    `json:"protected"`

	// Branch Protection
	Protection                   BranchProtection `json:"protection"`
	ProtectionUrl                string           `json:"protection_url"`
	RequiredApprovingReviewCount *int             `json:"required_approving_review_count,omitempty"`
}

// Check Annotation
type CheckAnnotation struct {
	AnnotationLevel *string `json:"annotation_level"`
	BlobHref        string  `json:"blob_href"`
	EndColumn       *int    `json:"end_column"`
	EndLine         int     `json:"end_line"`
	Message         *string `json:"message"`
	Path            string  `json:"path"`
	RawDetails      *string `json:"raw_details"`
	StartColumn     *int    `json:"start_column"`
	StartLine       int     `json:"start_line"`
	Title           *string `json:"title"`
}

// A check performed on the code of a given code change
type CheckRun struct {
	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	App        *NullableIntegration `json:"app"`
	CheckSuite *struct {
		Id int `json:"id"`
	} `json:"check_suite"`
	CompletedAt *time.Time          `json:"completed_at"`
	Conclusion  *CheckRunConclusion `json:"conclusion"`

	// A deployment created as the result of an Actions check run from a workflow that references an environment
	Deployment *DeploymentSimple `json:"deployment,omitempty"`
	DetailsUrl *string           `json:"details_url"`
	ExternalId *string           `json:"external_id"`

	// The SHA of the commit that is being checked.
	HeadSha string  `json:"head_sha"`
	HtmlUrl *string `json:"html_url"`

	// The id of the check.
	Id int `json:"id"`

	// The name of the check.
	Name   string `json:"name"`
	NodeId string `json:"node_id"`
	Output struct {
		AnnotationsCount int     `json:"annotations_count"`
		AnnotationsUrl   string  `json:"annotations_url"`
		Summary          *string `json:"summary"`
		Text             *string `json:"text"`
		Title            *string `json:"title"`
	} `json:"output"`
	PullRequests []PullRequestMinimal `json:"pull_requests"`
	StartedAt    *time.Time           `json:"started_at"`

	// The phase of the lifecycle that the check is currently in.
	Status CheckRunStatus `json:"status"`
	Url    string         `json:"url"`
}

// CheckRunConclusion defines model for CheckRun.Conclusion.
type CheckRunConclusion string

// The phase of the lifecycle that the check is currently in.
type CheckRunStatus string

// A suite of checks performed on the code of a given code change
type CheckSuite struct {
	After *string `json:"after"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	App          *NullableIntegration  `json:"app"`
	Before       *string               `json:"before"`
	CheckRunsUrl string                `json:"check_runs_url"`
	Conclusion   *CheckSuiteConclusion `json:"conclusion"`
	CreatedAt    *time.Time            `json:"created_at"`
	HeadBranch   *string               `json:"head_branch"`

	// Simple Commit
	HeadCommit SimpleCommit `json:"head_commit"`

	// The SHA of the head commit that is being checked.
	HeadSha              string                `json:"head_sha"`
	Id                   int                   `json:"id"`
	LatestCheckRunsCount int                   `json:"latest_check_runs_count"`
	NodeId               string                `json:"node_id"`
	PullRequests         *[]PullRequestMinimal `json:"pull_requests"`

	// Minimal Repository
	Repository        MinimalRepository `json:"repository"`
	Rerequestable     *bool             `json:"rerequestable,omitempty"`
	RunsRerequestable *bool             `json:"runs_rerequestable,omitempty"`
	Status            *CheckSuiteStatus `json:"status"`
	UpdatedAt         *time.Time        `json:"updated_at"`
	Url               *string           `json:"url"`
}

// CheckSuiteConclusion defines model for CheckSuite.Conclusion.
type CheckSuiteConclusion string

// CheckSuiteStatus defines model for CheckSuite.Status.
type CheckSuiteStatus string

// Check suite configuration preferences for a repository.
type CheckSuitePreference struct {
	Preferences struct {
		AutoTriggerChecks *[]struct {
			AppId   int  `json:"app_id"`
			Setting bool `json:"setting"`
		} `json:"auto_trigger_checks,omitempty"`
	} `json:"preferences"`

	// Minimal Repository
	Repository MinimalRepository `json:"repository"`
}

// Clone Traffic
type CloneTraffic struct {
	Clones  []Traffic `json:"clones"`
	Count   int       `json:"count"`
	Uniques int       `json:"uniques"`
}

// Code Frequency Stat
type CodeFrequencyStat []int

// Code Of Conduct
type CodeOfConduct struct {
	Body    *string `json:"body,omitempty"`
	HtmlUrl *string `json:"html_url"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	Url     string  `json:"url"`
}

// Code of Conduct Simple
type CodeOfConductSimple struct {
	HtmlUrl *string `json:"html_url"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	Url     string  `json:"url"`
}

// CodeScanningAlert defines model for code-scanning-alert.
type CodeScanningAlert struct {
	// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	CreatedAt *AlertCreatedAt `json:"created_at,omitempty"`

	// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	DismissedAt *CodeScanningAlertDismissedAt `json:"dismissed_at"`

	// Simple User
	DismissedBy *NullableSimpleUser `json:"dismissed_by"`

	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *CodeScanningAlertDismissedComment `json:"dismissed_comment"`

	// **Required when the state is dismissed.** The reason for dismissing or closing the alert.
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason"`

	// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	FixedAt *CodeScanningAlertFixedAt `json:"fixed_at"`

	// The GitHub URL of the alert resource.
	HtmlUrl *AlertHtmlUrl `json:"html_url,omitempty"`

	// The REST API URL for fetching the list of instances for an alert.
	InstancesUrl       *AlertInstancesUrl        `json:"instances_url,omitempty"`
	MostRecentInstance CodeScanningAlertInstance `json:"most_recent_instance"`

	// The security alert number.
	Number *AlertNumber          `json:"number,omitempty"`
	Rule   CodeScanningAlertRule `json:"rule"`

	// State of a code scanning alert.
	State CodeScanningAlertState   `json:"state"`
	Tool  CodeScanningAnalysisTool `json:"tool"`

	// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	UpdatedAt *AlertUpdatedAt `json:"updated_at,omitempty"`

	// The REST API URL of the alert resource.
	Url *AlertUrl `json:"url,omitempty"`
}

// A classification of the file. For example to identify it as generated.
type CodeScanningAlertClassification string

// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
type CodeScanningAlertDismissedAt time.Time

// The dismissal comment associated with the dismissal of the alert.
type CodeScanningAlertDismissedComment string

// **Required when the state is dismissed.** The reason for dismissing or closing the alert.
type CodeScanningAlertDismissedReason string

// Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
type CodeScanningAlertEnvironment string

// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
type CodeScanningAlertFixedAt time.Time

// CodeScanningAlertInstance defines model for code-scanning-alert-instance.
type CodeScanningAlertInstance struct {
	// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
	AnalysisKey *CodeScanningAnalysisAnalysisKey `json:"analysis_key,omitempty"`

	// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
	Category *CodeScanningAnalysisCategory `json:"category,omitempty"`

	// Classifications that have been applied to the file that triggered the alert.
	// For example identifying it as documentation, or a generated file.
	Classifications *[]CodeScanningAlertClassification `json:"classifications,omitempty"`
	CommitSha       *string                            `json:"commit_sha,omitempty"`

	// Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
	Environment *CodeScanningAlertEnvironment `json:"environment,omitempty"`
	HtmlUrl     *string                       `json:"html_url,omitempty"`

	// Describe a region within a file for the alert.
	Location *CodeScanningAlertLocation `json:"location,omitempty"`
	Message  *struct {
		Text *string `json:"text,omitempty"`
	} `json:"message,omitempty"`

	// The full Git reference, formatted as `refs/heads/<branch name>`,
	// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
	Ref *CodeScanningRef `json:"ref,omitempty"`

	// State of a code scanning alert.
	State *CodeScanningAlertState `json:"state,omitempty"`
}

// CodeScanningAlertItems defines model for code-scanning-alert-items.
type CodeScanningAlertItems struct {
	// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	CreatedAt *AlertCreatedAt `json:"created_at,omitempty"`

	// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	DismissedAt *CodeScanningAlertDismissedAt `json:"dismissed_at"`

	// Simple User
	DismissedBy *NullableSimpleUser `json:"dismissed_by"`

	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *CodeScanningAlertDismissedComment `json:"dismissed_comment"`

	// **Required when the state is dismissed.** The reason for dismissing or closing the alert.
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason"`

	// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	FixedAt *CodeScanningAlertFixedAt `json:"fixed_at"`

	// The GitHub URL of the alert resource.
	HtmlUrl *AlertHtmlUrl `json:"html_url,omitempty"`

	// The REST API URL for fetching the list of instances for an alert.
	InstancesUrl       *AlertInstancesUrl        `json:"instances_url,omitempty"`
	MostRecentInstance CodeScanningAlertInstance `json:"most_recent_instance"`

	// The security alert number.
	Number *AlertNumber                 `json:"number,omitempty"`
	Rule   CodeScanningAlertRuleSummary `json:"rule"`

	// State of a code scanning alert.
	State CodeScanningAlertState   `json:"state"`
	Tool  CodeScanningAnalysisTool `json:"tool"`

	// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	UpdatedAt *AlertUpdatedAt `json:"updated_at,omitempty"`

	// The REST API URL of the alert resource.
	Url *AlertUrl `json:"url,omitempty"`
}

// Describe a region within a file for the alert.
type CodeScanningAlertLocation struct {
	EndColumn   *int    `json:"end_column,omitempty"`
	EndLine     *int    `json:"end_line,omitempty"`
	Path        *string `json:"path,omitempty"`
	StartColumn *int    `json:"start_column,omitempty"`
	StartLine   *int    `json:"start_line,omitempty"`
}

// CodeScanningAlertRule defines model for code-scanning-alert-rule.
type CodeScanningAlertRule struct {
	// A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// description of the rule used to detect the alert.
	FullDescription *string `json:"full_description,omitempty"`

	// Detailed documentation for the rule as GitHub Flavored Markdown.
	Help *string `json:"help"`

	// A unique identifier for the rule used to detect the alert.
	Id *string `json:"id"`

	// The name of the rule used to detect the alert.
	Name *string `json:"name,omitempty"`

	// The security severity of the alert.
	SecuritySeverityLevel *CodeScanningAlertRuleSecuritySeverityLevel `json:"security_severity_level"`

	// The severity of the alert.
	Severity *CodeScanningAlertRuleSeverity `json:"severity"`

	// A set of tags applicable for the rule.
	Tags *[]string `json:"tags"`
}

// The security severity of the alert.
type CodeScanningAlertRuleSecuritySeverityLevel string

// The severity of the alert.
type CodeScanningAlertRuleSeverity string

// CodeScanningAlertRuleSummary defines model for code-scanning-alert-rule-summary.
type CodeScanningAlertRuleSummary struct {
	// A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// A unique identifier for the rule used to detect the alert.
	Id *string `json:"id"`

	// The name of the rule used to detect the alert.
	Name *string `json:"name,omitempty"`

	// The severity of the alert.
	Severity *CodeScanningAlertRuleSummarySeverity `json:"severity"`

	// A set of tags applicable for the rule.
	Tags *[]string `json:"tags"`
}

// The severity of the alert.
type CodeScanningAlertRuleSummarySeverity string

// Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
type CodeScanningAlertSetState string

// State of a code scanning alert.
type CodeScanningAlertState string

// CodeScanningAnalysis defines model for code-scanning-analysis.
type CodeScanningAnalysis struct {
	// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
	AnalysisKey CodeScanningAnalysisAnalysisKey `json:"analysis_key"`

	// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
	Category *CodeScanningAnalysisCategory `json:"category,omitempty"`

	// The SHA of the commit to which the analysis you are uploading relates.
	CommitSha CodeScanningAnalysisCommitSha `json:"commit_sha"`

	// The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	CreatedAt *CodeScanningAnalysisCreatedAt `json:"created_at,omitempty"`
	Deletable bool                           `json:"deletable"`

	// Identifies the variable values associated with the environment in which this analysis was performed.
	Environment CodeScanningAnalysisEnvironment `json:"environment"`
	Error       string                          `json:"error"`

	// Unique identifier for this analysis.
	Id int `json:"id"`

	// The full Git reference, formatted as `refs/heads/<branch name>`,
	// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
	Ref CodeScanningRef `json:"ref"`

	// The total number of results in the analysis.
	ResultsCount int `json:"results_count"`

	// The total number of rules used in the analysis.
	RulesCount int `json:"rules_count"`

	// An identifier for the upload.
	SarifId CodeScanningAnalysisSarifId `json:"sarif_id"`
	Tool    CodeScanningAnalysisTool    `json:"tool"`

	// The REST API URL of the analysis resource.
	Url *CodeScanningAnalysisUrl `json:"url,omitempty"`

	// Warning generated when processing the analysis
	Warning string `json:"warning"`
}

// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
type CodeScanningAnalysisAnalysisKey string

// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
type CodeScanningAnalysisCategory string

// The SHA of the commit to which the analysis you are uploading relates.
type CodeScanningAnalysisCommitSha string

// The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
type CodeScanningAnalysisCreatedAt time.Time

// Successful deletion of a code scanning analysis
type CodeScanningAnalysisDeletion struct {
	// Next deletable analysis in chain, with last analysis deletion confirmation
	ConfirmDeleteUrl *string `json:"confirm_delete_url"`

	// Next deletable analysis in chain, without last analysis deletion confirmation
	NextAnalysisUrl *string `json:"next_analysis_url"`
}

// Identifies the variable values associated with the environment in which this analysis was performed.
type CodeScanningAnalysisEnvironment string

// A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
type CodeScanningAnalysisSarifFile string

// An identifier for the upload.
type CodeScanningAnalysisSarifId string

// CodeScanningAnalysisTool defines model for code-scanning-analysis-tool.
type CodeScanningAnalysisTool struct {
	// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
	Guid *CodeScanningAnalysisToolGuid `json:"guid"`

	// The name of the tool used to generate the code scanning analysis.
	Name *CodeScanningAnalysisToolName `json:"name,omitempty"`

	// The version of the tool used to generate the code scanning analysis.
	Version *CodeScanningAnalysisToolVersion `json:"version"`
}

// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
type CodeScanningAnalysisToolGuid string

// The name of the tool used to generate the code scanning analysis.
type CodeScanningAnalysisToolName string

// The version of the tool used to generate the code scanning analysis.
type CodeScanningAnalysisToolVersion string

// The REST API URL of the analysis resource.
type CodeScanningAnalysisUrl string

// CodeScanningOrganizationAlertItems defines model for code-scanning-organization-alert-items.
type CodeScanningOrganizationAlertItems struct {
	// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	CreatedAt *AlertCreatedAt `json:"created_at,omitempty"`

	// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	DismissedAt *CodeScanningAlertDismissedAt `json:"dismissed_at"`

	// Simple User
	DismissedBy *NullableSimpleUser `json:"dismissed_by"`

	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *CodeScanningAlertDismissedComment `json:"dismissed_comment"`

	// **Required when the state is dismissed.** The reason for dismissing or closing the alert.
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason"`

	// The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	FixedAt *CodeScanningAlertFixedAt `json:"fixed_at"`

	// The GitHub URL of the alert resource.
	HtmlUrl *AlertHtmlUrl `json:"html_url,omitempty"`

	// The REST API URL for fetching the list of instances for an alert.
	InstancesUrl       *AlertInstancesUrl        `json:"instances_url,omitempty"`
	MostRecentInstance CodeScanningAlertInstance `json:"most_recent_instance"`

	// The security alert number.
	Number *AlertNumber `json:"number,omitempty"`

	// Minimal Repository
	Repository MinimalRepository     `json:"repository"`
	Rule       CodeScanningAlertRule `json:"rule"`

	// State of a code scanning alert.
	State CodeScanningAlertState   `json:"state"`
	Tool  CodeScanningAnalysisTool `json:"tool"`

	// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	UpdatedAt *AlertUpdatedAt `json:"updated_at,omitempty"`

	// The REST API URL of the alert resource.
	Url *AlertUrl `json:"url,omitempty"`
}

// The full Git reference, formatted as `refs/heads/<branch name>`,
// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
type CodeScanningRef string

// CodeScanningSarifsReceipt defines model for code-scanning-sarifs-receipt.
type CodeScanningSarifsReceipt struct {
	// An identifier for the upload.
	Id *CodeScanningAnalysisSarifId `json:"id,omitempty"`

	// The REST API URL for checking the status of the upload.
	Url *string `json:"url,omitempty"`
}

// CodeScanningSarifsStatus defines model for code-scanning-sarifs-status.
type CodeScanningSarifsStatus struct {
	// The REST API URL for getting the analyses associated with the upload.
	AnalysesUrl *string `json:"analyses_url"`

	// Any errors that ocurred during processing of the delivery.
	Errors *[]string `json:"errors"`

	// `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
	ProcessingStatus *CodeScanningSarifsStatusProcessingStatus `json:"processing_status,omitempty"`
}

// `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
type CodeScanningSarifsStatusProcessingStatus string

// Code Search Result Item
type CodeSearchResultItem struct {
	FileSize       *int       `json:"file_size,omitempty"`
	GitUrl         string     `json:"git_url"`
	HtmlUrl        string     `json:"html_url"`
	Language       *string    `json:"language"`
	LastModifiedAt *time.Time `json:"last_modified_at,omitempty"`
	LineNumbers    *[]string  `json:"line_numbers,omitempty"`
	Name           string     `json:"name"`
	Path           string     `json:"path"`

	// Minimal Repository
	Repository  MinimalRepository        `json:"repository"`
	Score       float32                  `json:"score"`
	Sha         string                   `json:"sha"`
	TextMatches *SearchResultTextMatches `json:"text_matches,omitempty"`
	Url         string                   `json:"url"`
}

// A list of errors found in a repo's CODEOWNERS file
type CodeownersErrors struct {
	Errors []struct {
		// The column number where this errors occurs.
		Column int `json:"column"`

		// The type of error.
		Kind string `json:"kind"`

		// The line number where this errors occurs.
		Line int `json:"line"`

		// A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
		Message string `json:"message"`

		// The path of the file where the error occured.
		Path string `json:"path"`

		// The contents of the line where the error occurs.
		Source *string `json:"source,omitempty"`

		// Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
		Suggestion *string `json:"suggestion"`
	} `json:"errors"`
}

// A codespace.
type Codespace struct {
	// Simple User
	BillableOwner SimpleUser `json:"billable_owner"`
	CreatedAt     time.Time  `json:"created_at"`

	// Path to devcontainer.json from repo root used to create Codespace.
	DevcontainerPath *string `json:"devcontainer_path"`

	// Display name for this codespace.
	DisplayName *string `json:"display_name"`

	// UUID identifying this codespace's environment.
	EnvironmentId *string `json:"environment_id"`

	// Details about the codespace's git repository.
	GitStatus struct {
		// The number of commits the local repository is ahead of the remote.
		Ahead *int `json:"ahead,omitempty"`

		// The number of commits the local repository is behind the remote.
		Behind *int `json:"behind,omitempty"`

		// Whether the local repository has uncommitted changes.
		HasUncommittedChanges *bool `json:"has_uncommitted_changes,omitempty"`

		// Whether the local repository has unpushed changes.
		HasUnpushedChanges *bool `json:"has_unpushed_changes,omitempty"`

		// The current branch (or SHA if in detached HEAD state) of the local repository.
		Ref *string `json:"ref,omitempty"`
	} `json:"git_status"`
	Id int `json:"id"`

	// The number of minutes of inactivity after which this codespace will be automatically stopped.
	IdleTimeoutMinutes *int `json:"idle_timeout_minutes"`

	// Text to show user when codespace idle timeout minutes has been overriden by an organization policy
	IdleTimeoutNotice *string `json:"idle_timeout_notice"`

	// Last known time this codespace was started.
	LastUsedAt time.Time `json:"last_used_at"`

	// The Azure region where this codespace is located.
	Location CodespaceLocation `json:"location"`

	// A description of the machine powering a codespace.
	Machine *NullableCodespaceMachine `json:"machine"`

	// API URL to access available alternate machine types for this codespace.
	MachinesUrl string `json:"machines_url"`

	// Automatically generated name of this codespace.
	Name string `json:"name"`

	// Simple User
	Owner SimpleUser `json:"owner"`

	// Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
	PendingOperation *bool `json:"pending_operation"`

	// Text to show user when codespace is disabled by a pending operation
	PendingOperationDisabledReason *string `json:"pending_operation_disabled_reason"`

	// Whether the codespace was created from a prebuild.
	Prebuild *bool `json:"prebuild"`

	// API URL for the Pull Request associated with this codespace, if any.
	PullsUrl      *string  `json:"pulls_url"`
	RecentFolders []string `json:"recent_folders"`

	// Minimal Repository
	Repository         MinimalRepository `json:"repository"`
	RuntimeConstraints *struct {
		// The privacy settings a user can select from when forwarding a port.
		AllowedPortPrivacySettings *[]string `json:"allowed_port_privacy_settings"`
	} `json:"runtime_constraints,omitempty"`

	// API URL to start this codespace.
	StartUrl string `json:"start_url"`

	// State of this codespace.
	State CodespaceState `json:"state"`

	// API URL to stop this codespace.
	StopUrl   string    `json:"stop_url"`
	UpdatedAt time.Time `json:"updated_at"`

	// API URL for this codespace.
	Url string `json:"url"`

	// URL to access this codespace on the web.
	WebUrl string `json:"web_url"`
}

// The Azure region where this codespace is located.
type CodespaceLocation string

// State of this codespace.
type CodespaceState string

// An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
type CodespaceExportDetails struct {
	// Name of the exported branch
	Branch *string `json:"branch"`

	// Completion time of the last export operation
	CompletedAt *time.Time `json:"completed_at"`

	// Url for fetching export details
	ExportUrl *string `json:"export_url,omitempty"`

	// Web url for the exported branch
	HtmlUrl *string `json:"html_url"`

	// Id for the export details
	Id *string `json:"id,omitempty"`

	// Git commit SHA of the exported branch
	Sha *string `json:"sha"`

	// State of the latest export
	State *string `json:"state"`
}

// A description of the machine powering a codespace.
type CodespaceMachine struct {
	// How many cores are available to the codespace.
	Cpus int `json:"cpus"`

	// The display name of the machine includes cores, memory, and storage.
	DisplayName string `json:"display_name"`

	// How much memory is available to the codespace.
	MemoryInBytes int `json:"memory_in_bytes"`

	// The name of the machine.
	Name string `json:"name"`

	// The operating system of the machine.
	OperatingSystem string `json:"operating_system"`

	// Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value is the type of prebuild available, or "none" if none are available.
	PrebuildAvailability *CodespaceMachinePrebuildAvailability `json:"prebuild_availability"`

	// How much storage is available to the codespace.
	StorageInBytes int `json:"storage_in_bytes"`
}

// Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value is the type of prebuild available, or "none" if none are available.
type CodespaceMachinePrebuildAvailability string

// The public key used for setting Codespaces secrets.
type CodespacesPublicKey struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Id        *int    `json:"id,omitempty"`

	// The Base64 encoded public key.
	Key string `json:"key"`

	// The identifier for the key.
	KeyId string  `json:"key_id"`
	Title *string `json:"title,omitempty"`
	Url   *string `json:"url,omitempty"`
}

// Secrets for a GitHub Codespace.
type CodespacesSecret struct {
	CreatedAt time.Time `json:"created_at"`

	// The name of the secret.
	Name                    string    `json:"name"`
	SelectedRepositoriesUrl string    `json:"selected_repositories_url"`
	UpdatedAt               time.Time `json:"updated_at"`

	// Visibility of a secret
	Visibility CodespacesSecretVisibility `json:"visibility"`
}

// Visibility of a secret
type CodespacesSecretVisibility string

// The public key used for setting user Codespaces' Secrets.
type CodespacesUserPublicKey struct {
	// The Base64 encoded public key.
	Key string `json:"key"`

	// The identifier for the key.
	KeyId string `json:"key_id"`
}

// Collaborator
type Collaborator struct {
	AvatarUrl        string  `json:"avatar_url"`
	Email            *string `json:"email"`
	EventsUrl        string  `json:"events_url"`
	FollowersUrl     string  `json:"followers_url"`
	FollowingUrl     string  `json:"following_url"`
	GistsUrl         string  `json:"gists_url"`
	GravatarId       *string `json:"gravatar_id"`
	HtmlUrl          string  `json:"html_url"`
	Id               int     `json:"id"`
	Login            string  `json:"login"`
	Name             *string `json:"name"`
	NodeId           string  `json:"node_id"`
	OrganizationsUrl string  `json:"organizations_url"`
	Permissions      *struct {
		Admin    bool  `json:"admin"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     bool  `json:"pull"`
		Push     bool  `json:"push"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`
	ReceivedEventsUrl string `json:"received_events_url"`
	ReposUrl          string `json:"repos_url"`
	RoleName          string `json:"role_name"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredUrl        string `json:"starred_url"`
	SubscriptionsUrl  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	Url               string `json:"url"`
}

// CombinedBillingUsage defines model for combined-billing-usage.
type CombinedBillingUsage struct {
	// Numbers of days left in billing cycle.
	DaysLeftInBillingCycle int `json:"days_left_in_billing_cycle"`

	// Estimated storage space (GB) used in billing cycle.
	EstimatedPaidStorageForMonth int `json:"estimated_paid_storage_for_month"`

	// Estimated sum of free and paid storage space (GB) used in billing cycle.
	EstimatedStorageForMonth int `json:"estimated_storage_for_month"`
}

// Combined Commit Status
type CombinedCommitStatus struct {
	CommitUrl string `json:"commit_url"`

	// Minimal Repository
	Repository MinimalRepository    `json:"repository"`
	Sha        string               `json:"sha"`
	State      string               `json:"state"`
	Statuses   []SimpleCommitStatus `json:"statuses"`
	TotalCount int                  `json:"total_count"`
	Url        string               `json:"url"`
}

// Commit
type Commit struct {
	// Simple User
	Author      *NullableSimpleUser `json:"author"`
	CommentsUrl string              `json:"comments_url"`
	Commit      struct {
		// Metaproperties for Git author/committer information.
		Author       *NullableGitUser `json:"author"`
		CommentCount int              `json:"comment_count"`

		// Metaproperties for Git author/committer information.
		Committer *NullableGitUser `json:"committer"`
		Message   string           `json:"message"`
		Tree      struct {
			Sha string `json:"sha"`
			Url string `json:"url"`
		} `json:"tree"`
		Url          string        `json:"url"`
		Verification *Verification `json:"verification,omitempty"`
	} `json:"commit"`

	// Simple User
	Committer *NullableSimpleUser `json:"committer"`
	Files     *[]DiffEntry        `json:"files,omitempty"`
	HtmlUrl   string              `json:"html_url"`
	NodeId    string              `json:"node_id"`
	Parents   []struct {
		HtmlUrl *string `json:"html_url,omitempty"`
		Sha     string  `json:"sha"`
		Url     string  `json:"url"`
	} `json:"parents"`
	Sha   string `json:"sha"`
	Stats *struct {
		Additions *int `json:"additions,omitempty"`
		Deletions *int `json:"deletions,omitempty"`
		Total     *int `json:"total,omitempty"`
	} `json:"stats,omitempty"`
	Url string `json:"url"`
}

// Commit Activity
type CommitActivity struct {
	Days  []int `json:"days"`
	Total int   `json:"total"`
	Week  int   `json:"week"`
}

// Commit Comment
type CommitComment struct {
	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`
	Body              string            `json:"body"`
	CommitId          string            `json:"commit_id"`
	CreatedAt         time.Time         `json:"created_at"`
	HtmlUrl           string            `json:"html_url"`
	Id                int               `json:"id"`
	Line              *int              `json:"line"`
	NodeId            string            `json:"node_id"`
	Path              *string           `json:"path"`
	Position          *int              `json:"position"`
	Reactions         *ReactionRollup   `json:"reactions,omitempty"`
	UpdatedAt         time.Time         `json:"updated_at"`
	Url               string            `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// Commit Comparison
type CommitComparison struct {
	AheadBy int `json:"ahead_by"`

	// Commit
	BaseCommit Commit       `json:"base_commit"`
	BehindBy   int          `json:"behind_by"`
	Commits    []Commit     `json:"commits"`
	DiffUrl    string       `json:"diff_url"`
	Files      *[]DiffEntry `json:"files,omitempty"`
	HtmlUrl    string       `json:"html_url"`

	// Commit
	MergeBaseCommit Commit                 `json:"merge_base_commit"`
	PatchUrl        string                 `json:"patch_url"`
	PermalinkUrl    string                 `json:"permalink_url"`
	Status          CommitComparisonStatus `json:"status"`
	TotalCommits    int                    `json:"total_commits"`
	Url             string                 `json:"url"`
}

// CommitComparisonStatus defines model for CommitComparison.Status.
type CommitComparisonStatus string

// Commit Search Result Item
type CommitSearchResultItem struct {
	// Simple User
	Author      *NullableSimpleUser `json:"author"`
	CommentsUrl string              `json:"comments_url"`
	Commit      struct {
		Author struct {
			Date  time.Time `json:"date"`
			Email string    `json:"email"`
			Name  string    `json:"name"`
		} `json:"author"`
		CommentCount int `json:"comment_count"`

		// Metaproperties for Git author/committer information.
		Committer *NullableGitUser `json:"committer"`
		Message   string           `json:"message"`
		Tree      struct {
			Sha string `json:"sha"`
			Url string `json:"url"`
		} `json:"tree"`
		Url          string        `json:"url"`
		Verification *Verification `json:"verification,omitempty"`
	} `json:"commit"`

	// Metaproperties for Git author/committer information.
	Committer *NullableGitUser `json:"committer"`
	HtmlUrl   string           `json:"html_url"`
	NodeId    string           `json:"node_id"`
	Parents   []struct {
		HtmlUrl *string `json:"html_url,omitempty"`
		Sha     *string `json:"sha,omitempty"`
		Url     *string `json:"url,omitempty"`
	} `json:"parents"`

	// Minimal Repository
	Repository  MinimalRepository        `json:"repository"`
	Score       float32                  `json:"score"`
	Sha         string                   `json:"sha"`
	TextMatches *SearchResultTextMatches `json:"text_matches,omitempty"`
	Url         string                   `json:"url"`
}

// Community Profile
type CommunityProfile struct {
	ContentReportsEnabled *bool   `json:"content_reports_enabled,omitempty"`
	Description           *string `json:"description"`
	Documentation         *string `json:"documentation"`
	Files                 struct {
		// Code of Conduct Simple
		CodeOfConduct     *NullableCodeOfConductSimple `json:"code_of_conduct"`
		CodeOfConductFile *NullableCommunityHealthFile `json:"code_of_conduct_file"`
		Contributing      *NullableCommunityHealthFile `json:"contributing"`
		IssueTemplate     *NullableCommunityHealthFile `json:"issue_template"`

		// License Simple
		License             *NullableLicenseSimple       `json:"license"`
		PullRequestTemplate *NullableCommunityHealthFile `json:"pull_request_template"`
		Readme              *NullableCommunityHealthFile `json:"readme"`
	} `json:"files"`
	HealthPercentage int        `json:"health_percentage"`
	UpdatedAt        *time.Time `json:"updated_at"`
}

// A list of directory items
type ContentDirectory []struct {
	Links struct {
		Git  *string `json:"git"`
		Html *string `json:"html"`
		Self string  `json:"self"`
	} `json:"_links"`
	Content     *string `json:"content,omitempty"`
	DownloadUrl *string `json:"download_url"`
	GitUrl      *string `json:"git_url"`
	HtmlUrl     *string `json:"html_url"`
	Name        string  `json:"name"`
	Path        string  `json:"path"`
	Sha         string  `json:"sha"`
	Size        int     `json:"size"`
	Type        string  `json:"type"`
	Url         string  `json:"url"`
}

// Content File
type ContentFile struct {
	Links struct {
		Git  *string `json:"git"`
		Html *string `json:"html"`
		Self string  `json:"self"`
	} `json:"_links"`
	Content         string  `json:"content"`
	DownloadUrl     *string `json:"download_url"`
	Encoding        string  `json:"encoding"`
	GitUrl          *string `json:"git_url"`
	HtmlUrl         *string `json:"html_url"`
	Name            string  `json:"name"`
	Path            string  `json:"path"`
	Sha             string  `json:"sha"`
	Size            int     `json:"size"`
	SubmoduleGitUrl *string `json:"submodule_git_url,omitempty"`
	Target          *string `json:"target,omitempty"`
	Type            string  `json:"type"`
	Url             string  `json:"url"`
}

// An object describing a symlink
type ContentSubmodule struct {
	Links struct {
		Git  *string `json:"git"`
		Html *string `json:"html"`
		Self string  `json:"self"`
	} `json:"_links"`
	DownloadUrl     *string `json:"download_url"`
	GitUrl          *string `json:"git_url"`
	HtmlUrl         *string `json:"html_url"`
	Name            string  `json:"name"`
	Path            string  `json:"path"`
	Sha             string  `json:"sha"`
	Size            int     `json:"size"`
	SubmoduleGitUrl string  `json:"submodule_git_url"`
	Type            string  `json:"type"`
	Url             string  `json:"url"`
}

// An object describing a symlink
type ContentSymlink struct {
	Links struct {
		Git  *string `json:"git"`
		Html *string `json:"html"`
		Self string  `json:"self"`
	} `json:"_links"`
	DownloadUrl *string `json:"download_url"`
	GitUrl      *string `json:"git_url"`
	HtmlUrl     *string `json:"html_url"`
	Name        string  `json:"name"`
	Path        string  `json:"path"`
	Sha         string  `json:"sha"`
	Size        int     `json:"size"`
	Target      string  `json:"target"`
	Type        string  `json:"type"`
	Url         string  `json:"url"`
}

// Content Traffic
type ContentTraffic struct {
	Count   int    `json:"count"`
	Path    string `json:"path"`
	Title   string `json:"title"`
	Uniques int    `json:"uniques"`
}

// Content Tree
type ContentTree struct {
	Links struct {
		Git  *string `json:"git"`
		Html *string `json:"html"`
		Self string  `json:"self"`
	} `json:"_links"`
	DownloadUrl *string `json:"download_url"`
	Entries     *[]struct {
		Links struct {
			Git  *string `json:"git"`
			Html *string `json:"html"`
			Self string  `json:"self"`
		} `json:"_links"`
		Content     *string `json:"content,omitempty"`
		DownloadUrl *string `json:"download_url"`
		GitUrl      *string `json:"git_url"`
		HtmlUrl     *string `json:"html_url"`
		Name        string  `json:"name"`
		Path        string  `json:"path"`
		Sha         string  `json:"sha"`
		Size        int     `json:"size"`
		Type        string  `json:"type"`
		Url         string  `json:"url"`
	} `json:"entries,omitempty"`
	GitUrl  *string `json:"git_url"`
	HtmlUrl *string `json:"html_url"`
	Name    string  `json:"name"`
	Path    string  `json:"path"`
	Sha     string  `json:"sha"`
	Size    int     `json:"size"`
	Type    string  `json:"type"`
	Url     string  `json:"url"`
}

// Contributor
type Contributor struct {
	AvatarUrl         *string `json:"avatar_url,omitempty"`
	Contributions     int     `json:"contributions"`
	Email             *string `json:"email,omitempty"`
	EventsUrl         *string `json:"events_url,omitempty"`
	FollowersUrl      *string `json:"followers_url,omitempty"`
	FollowingUrl      *string `json:"following_url,omitempty"`
	GistsUrl          *string `json:"gists_url,omitempty"`
	GravatarId        *string `json:"gravatar_id"`
	HtmlUrl           *string `json:"html_url,omitempty"`
	Id                *int    `json:"id,omitempty"`
	Login             *string `json:"login,omitempty"`
	Name              *string `json:"name,omitempty"`
	NodeId            *string `json:"node_id,omitempty"`
	OrganizationsUrl  *string `json:"organizations_url,omitempty"`
	ReceivedEventsUrl *string `json:"received_events_url,omitempty"`
	ReposUrl          *string `json:"repos_url,omitempty"`
	SiteAdmin         *bool   `json:"site_admin,omitempty"`
	StarredUrl        *string `json:"starred_url,omitempty"`
	SubscriptionsUrl  *string `json:"subscriptions_url,omitempty"`
	Type              string  `json:"type"`
	Url               *string `json:"url,omitempty"`
}

// Contributor Activity
type ContributorActivity struct {
	// Simple User
	Author *NullableSimpleUser `json:"author"`
	Total  int                 `json:"total"`
	Weeks  []struct {
		A *int `json:"a,omitempty"`
		C *int `json:"c,omitempty"`
		D *int `json:"d,omitempty"`
		W *int `json:"w,omitempty"`
	} `json:"weeks"`
}

// Converted Note to Issue Issue Event
type ConvertedNoteToIssueIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp Integration `json:"performed_via_github_app"`
	ProjectCard           *struct {
		ColumnName         string  `json:"column_name"`
		Id                 int     `json:"id"`
		PreviousColumnName *string `json:"previous_column_name,omitempty"`
		ProjectId          int     `json:"project_id"`
		ProjectUrl         string  `json:"project_url"`
		Url                string  `json:"url"`
	} `json:"project_card,omitempty"`
	Url string `json:"url"`
}

// Credential Authorization
type CredentialAuthorization struct {
	// The expiry for the token. This will only be present when the credential is a token.
	AuthorizedCredentialExpiresAt *time.Time `json:"authorized_credential_expires_at"`
	AuthorizedCredentialId        *int       `json:"authorized_credential_id"`

	// The note given to the token. This will only be present when the credential is a token.
	AuthorizedCredentialNote *string `json:"authorized_credential_note"`

	// The title given to the ssh key. This will only be present when the credential is an ssh key.
	AuthorizedCredentialTitle *string `json:"authorized_credential_title"`

	// Date when the credential was last accessed. May be null if it was never accessed
	CredentialAccessedAt *time.Time `json:"credential_accessed_at"`

	// Date when the credential was authorized for use.
	CredentialAuthorizedAt time.Time `json:"credential_authorized_at"`

	// Unique identifier for the credential.
	CredentialId int `json:"credential_id"`

	// Human-readable description of the credential type.
	CredentialType string `json:"credential_type"`

	// Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
	Fingerprint *string `json:"fingerprint,omitempty"`

	// User login that owns the underlying credential.
	Login string `json:"login"`

	// List of oauth scopes the token has been granted.
	Scopes *[]string `json:"scopes,omitempty"`

	// Last eight characters of the credential. Only included in responses with credential_type of personal access token.
	TokenLastEight *string `json:"token_last_eight,omitempty"`
}

// Demilestoned Issue Event
type DemilestonedIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	Milestone struct {
		Title string `json:"title"`
	} `json:"milestone"`
	NodeId string `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// The public key used for setting Dependabot Secrets.
type DependabotPublicKey struct {
	// The Base64 encoded public key.
	Key string `json:"key"`

	// The identifier for the key.
	KeyId string `json:"key_id"`
}

// Set secrets for Dependabot.
type DependabotSecret struct {
	CreatedAt time.Time `json:"created_at"`

	// The name of the secret.
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// A diff of the dependencies between two commits.
type DependencyGraphDiff []struct {
	ChangeType          DependencyGraphDiffChangeType `json:"change_type"`
	Ecosystem           string                        `json:"ecosystem"`
	License             *string                       `json:"license"`
	Manifest            string                        `json:"manifest"`
	Name                string                        `json:"name"`
	PackageUrl          *string                       `json:"package_url"`
	SourceRepositoryUrl *string                       `json:"source_repository_url"`
	Version             string                        `json:"version"`
	Vulnerabilities     []struct {
		AdvisoryGhsaId  string `json:"advisory_ghsa_id"`
		AdvisorySummary string `json:"advisory_summary"`
		AdvisoryUrl     string `json:"advisory_url"`
		Severity        string `json:"severity"`
	} `json:"vulnerabilities"`
}

// DependencyGraphDiffChangeType defines model for DependencyGraphDiff.ChangeType.
type DependencyGraphDiffChangeType string

// An SSH key granting access to a single repository.
type DeployKey struct {
	CreatedAt string `json:"created_at"`
	Id        int    `json:"id"`
	Key       string `json:"key"`
	ReadOnly  bool   `json:"read_only"`
	Title     string `json:"title"`
	Url       string `json:"url"`
	Verified  bool   `json:"verified"`
}

// A request for a specific ref(branch,sha,tag) to be deployed
type Deployment struct {
	CreatedAt time.Time `json:"created_at"`

	// Simple User
	Creator     *NullableSimpleUser `json:"creator"`
	Description *string             `json:"description"`

	// Name for the target deployment environment.
	Environment string `json:"environment"`

	// Unique identifier of the deployment
	Id                  int         `json:"id"`
	NodeId              string      `json:"node_id"`
	OriginalEnvironment *string     `json:"original_environment,omitempty"`
	Payload             interface{} `json:"payload"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`

	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment *bool `json:"production_environment,omitempty"`

	// The ref to deploy. This can be a branch, tag, or sha.
	Ref           string `json:"ref"`
	RepositoryUrl string `json:"repository_url"`
	Sha           string `json:"sha"`
	StatusesUrl   string `json:"statuses_url"`

	// Parameter to specify a task to execute
	Task string `json:"task"`

	// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
	TransientEnvironment *bool     `json:"transient_environment,omitempty"`
	UpdatedAt            time.Time `json:"updated_at"`
	Url                  string    `json:"url"`
}

// The type of reviewer.
type DeploymentReviewerType string

// A deployment created as the result of an Actions check run from a workflow that references an environment
type DeploymentSimple struct {
	CreatedAt   time.Time `json:"created_at"`
	Description *string   `json:"description"`

	// Name for the target deployment environment.
	Environment string `json:"environment"`

	// Unique identifier of the deployment
	Id                  int     `json:"id"`
	NodeId              string  `json:"node_id"`
	OriginalEnvironment *string `json:"original_environment,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`

	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment *bool  `json:"production_environment,omitempty"`
	RepositoryUrl         string `json:"repository_url"`
	StatusesUrl           string `json:"statuses_url"`

	// Parameter to specify a task to execute
	Task string `json:"task"`

	// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
	TransientEnvironment *bool     `json:"transient_environment,omitempty"`
	UpdatedAt            time.Time `json:"updated_at"`
	Url                  string    `json:"url"`
}

// The status of a deployment.
type DeploymentStatus struct {
	CreatedAt time.Time `json:"created_at"`

	// Simple User
	Creator       *NullableSimpleUser `json:"creator"`
	DeploymentUrl string              `json:"deployment_url"`

	// A short description of the status.
	Description string `json:"description"`

	// The environment of the deployment that the status is for.
	Environment *string `json:"environment,omitempty"`

	// The URL for accessing your environment.
	EnvironmentUrl *string `json:"environment_url,omitempty"`
	Id             int     `json:"id"`

	// The URL to associate with this status.
	LogUrl *string `json:"log_url,omitempty"`
	NodeId string  `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	RepositoryUrl         string               `json:"repository_url"`

	// The state of the status.
	State DeploymentStatusState `json:"state"`

	// Deprecated: the URL to associate with this status.
	TargetUrl string    `json:"target_url"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// The state of the status.
type DeploymentStatusState string

// The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
type DeploymentBranchPolicy struct {
	// Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
	CustomBranchPolicies bool `json:"custom_branch_policies"`

	// Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
	ProtectedBranches bool `json:"protected_branches"`
}

// Diff Entry
type DiffEntry struct {
	Additions        int             `json:"additions"`
	BlobUrl          string          `json:"blob_url"`
	Changes          int             `json:"changes"`
	ContentsUrl      string          `json:"contents_url"`
	Deletions        int             `json:"deletions"`
	Filename         string          `json:"filename"`
	Patch            *string         `json:"patch,omitempty"`
	PreviousFilename *string         `json:"previous_filename,omitempty"`
	RawUrl           string          `json:"raw_url"`
	Sha              string          `json:"sha"`
	Status           DiffEntryStatus `json:"status"`
}

// DiffEntryStatus defines model for DiffEntry.Status.
type DiffEntryStatus string

// Email
type Email struct {
	Email      openapi_types.Email `json:"email"`
	Primary    bool                `json:"primary"`
	Verified   bool                `json:"verified"`
	Visibility *string             `json:"visibility"`
}

// An object without any properties.
type EmptyObject map[string]interface{}

// The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
type EnabledOrganizations string

// The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
type EnabledRepositories string

// An enterprise account
type Enterprise struct {
	AvatarUrl string     `json:"avatar_url"`
	CreatedAt *time.Time `json:"created_at"`

	// A short description of the enterprise.
	Description *string `json:"description"`
	HtmlUrl     string  `json:"html_url"`

	// Unique identifier of the enterprise
	Id int `json:"id"`

	// The name of the enterprise.
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// The slug url identifier for the enterprise.
	Slug      string     `json:"slug"`
	UpdatedAt *time.Time `json:"updated_at"`

	// The enterprise's website URL.
	WebsiteUrl *string `json:"website_url"`
}

// Details of a deployment environment
type Environment struct {
	// The time that the environment was created, in ISO 8601 format.
	CreatedAt time.Time `json:"created_at"`

	// The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
	DeploymentBranchPolicy *DeploymentBranchPolicy `json:"deployment_branch_policy"`
	HtmlUrl                string                  `json:"html_url"`

	// The id of the environment.
	Id int `json:"id"`

	// The name of the environment.
	Name            string         `json:"name"`
	NodeId          string         `json:"node_id"`
	ProtectionRules *[]interface{} `json:"protection_rules,omitempty"`

	// The time that the environment was last updated, in ISO 8601 format.
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// An entry in the reviews log for environment deployments
type EnvironmentApprovals struct {
	// The comment submitted with the deployment review
	Comment string `json:"comment"`

	// The list of environments that were approved or rejected
	Environments []struct {
		// The time that the environment was created, in ISO 8601 format.
		CreatedAt *time.Time `json:"created_at,omitempty"`
		HtmlUrl   *string    `json:"html_url,omitempty"`

		// The id of the environment.
		Id *int `json:"id,omitempty"`

		// The name of the environment.
		Name   *string `json:"name,omitempty"`
		NodeId *string `json:"node_id,omitempty"`

		// The time that the environment was last updated, in ISO 8601 format.
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		Url       *string    `json:"url,omitempty"`
	} `json:"environments"`

	// Whether deployment to the environment(s) was approved or rejected
	State EnvironmentApprovalsState `json:"state"`

	// Simple User
	User SimpleUser `json:"user"`
}

// Whether deployment to the environment(s) was approved or rejected
type EnvironmentApprovalsState string

// Event
type Event struct {
	// Actor
	Actor     Actor      `json:"actor"`
	CreatedAt *time.Time `json:"created_at"`
	Id        string     `json:"id"`

	// Actor
	Org     *Actor `json:"org,omitempty"`
	Payload struct {
		Action *string `json:"action,omitempty"`

		// Comments provide a way for people to collaborate on an issue.
		Comment *IssueComment `json:"comment,omitempty"`

		// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
		Issue *Issue `json:"issue,omitempty"`
		Pages *[]struct {
			Action   *string `json:"action,omitempty"`
			HtmlUrl  *string `json:"html_url,omitempty"`
			PageName *string `json:"page_name,omitempty"`
			Sha      *string `json:"sha,omitempty"`
			Summary  *string `json:"summary"`
			Title    *string `json:"title,omitempty"`
		} `json:"pages,omitempty"`
	} `json:"payload"`
	Public bool `json:"public"`
	Repo   struct {
		Id   int    `json:"id"`
		Name string `json:"name"`
		Url  string `json:"url"`
	} `json:"repo"`
	Type *string `json:"type"`
}

// Information about an external group's usage and its members
type ExternalGroup struct {
	// The internal ID of the group
	GroupId int `json:"group_id"`

	// The display name for the group
	GroupName string `json:"group_name"`

	// An array of external members linked to this group
	Members []struct {
		// An email attached to a user
		MemberEmail string `json:"member_email"`

		// The internal user ID of the identity
		MemberId int `json:"member_id"`

		// The handle/login for the user
		MemberLogin string `json:"member_login"`

		// The user display name/profile name
		MemberName string `json:"member_name"`
	} `json:"members"`

	// An array of teams linked to this group
	Teams []struct {
		// The id for a team
		TeamId int `json:"team_id"`

		// The name of the team
		TeamName string `json:"team_name"`
	} `json:"teams"`

	// The date when the group was last updated_at
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// A list of external groups available to be connected to a team
type ExternalGroups struct {
	// An array of external groups available to be mapped to a team
	Groups *[]struct {
		// The internal ID of the group
		GroupId int `json:"group_id"`

		// The display name of the group
		GroupName string `json:"group_name"`

		// The time of the last update for this group
		UpdatedAt string `json:"updated_at"`
	} `json:"groups,omitempty"`
}

// Feed
type Feed struct {
	Links struct {
		// Hypermedia Link with Type
		CurrentUser *LinkWithType `json:"current_user,omitempty"`

		// Hypermedia Link with Type
		CurrentUserActor *LinkWithType `json:"current_user_actor,omitempty"`

		// Hypermedia Link with Type
		CurrentUserOrganization  *LinkWithType   `json:"current_user_organization,omitempty"`
		CurrentUserOrganizations *[]LinkWithType `json:"current_user_organizations,omitempty"`

		// Hypermedia Link with Type
		CurrentUserPublic *LinkWithType `json:"current_user_public,omitempty"`

		// Hypermedia Link with Type
		SecurityAdvisories *LinkWithType `json:"security_advisories,omitempty"`

		// Hypermedia Link with Type
		Timeline LinkWithType `json:"timeline"`

		// Hypermedia Link with Type
		User LinkWithType `json:"user"`
	} `json:"_links"`
	CurrentUserActorUrl         *string   `json:"current_user_actor_url,omitempty"`
	CurrentUserOrganizationUrl  *string   `json:"current_user_organization_url,omitempty"`
	CurrentUserOrganizationUrls *[]string `json:"current_user_organization_urls,omitempty"`
	CurrentUserPublicUrl        *string   `json:"current_user_public_url,omitempty"`
	CurrentUserUrl              *string   `json:"current_user_url,omitempty"`
	SecurityAdvisoriesUrl       *string   `json:"security_advisories_url,omitempty"`
	TimelineUrl                 string    `json:"timeline_url"`
	UserUrl                     string    `json:"user_url"`
}

// File Commit
type FileCommit struct {
	Commit struct {
		Author *struct {
			Date  *string `json:"date,omitempty"`
			Email *string `json:"email,omitempty"`
			Name  *string `json:"name,omitempty"`
		} `json:"author,omitempty"`
		Committer *struct {
			Date  *string `json:"date,omitempty"`
			Email *string `json:"email,omitempty"`
			Name  *string `json:"name,omitempty"`
		} `json:"committer,omitempty"`
		HtmlUrl *string `json:"html_url,omitempty"`
		Message *string `json:"message,omitempty"`
		NodeId  *string `json:"node_id,omitempty"`
		Parents *[]struct {
			HtmlUrl *string `json:"html_url,omitempty"`
			Sha     *string `json:"sha,omitempty"`
			Url     *string `json:"url,omitempty"`
		} `json:"parents,omitempty"`
		Sha  *string `json:"sha,omitempty"`
		Tree *struct {
			Sha *string `json:"sha,omitempty"`
			Url *string `json:"url,omitempty"`
		} `json:"tree,omitempty"`
		Url          *string `json:"url,omitempty"`
		Verification *struct {
			Payload   *string `json:"payload"`
			Reason    *string `json:"reason,omitempty"`
			Signature *string `json:"signature"`
			Verified  *bool   `json:"verified,omitempty"`
		} `json:"verification,omitempty"`
	} `json:"commit"`
	Content *struct {
		Links *struct {
			Git  *string `json:"git,omitempty"`
			Html *string `json:"html,omitempty"`
			Self *string `json:"self,omitempty"`
		} `json:"_links,omitempty"`
		DownloadUrl *string `json:"download_url,omitempty"`
		GitUrl      *string `json:"git_url,omitempty"`
		HtmlUrl     *string `json:"html_url,omitempty"`
		Name        *string `json:"name,omitempty"`
		Path        *string `json:"path,omitempty"`
		Sha         *string `json:"sha,omitempty"`
		Size        *int    `json:"size,omitempty"`
		Type        *string `json:"type,omitempty"`
		Url         *string `json:"url,omitempty"`
	} `json:"content"`
}

// Full Repository
type FullRepository struct {
	AllowAutoMerge   *bool `json:"allow_auto_merge,omitempty"`
	AllowForking     *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Whether anonymous git access is allowed.
	AnonymousAccessEnabled *bool  `json:"anonymous_access_enabled,omitempty"`
	ArchiveUrl             string `json:"archive_url"`
	Archived               bool   `json:"archived"`
	AssigneesUrl           string `json:"assignees_url"`
	BlobsUrl               string `json:"blobs_url"`
	BranchesUrl            string `json:"branches_url"`
	CloneUrl               string `json:"clone_url"`

	// Code of Conduct Simple
	CodeOfConduct       *CodeOfConductSimple `json:"code_of_conduct,omitempty"`
	CollaboratorsUrl    string               `json:"collaborators_url"`
	CommentsUrl         string               `json:"comments_url"`
	CommitsUrl          string               `json:"commits_url"`
	CompareUrl          string               `json:"compare_url"`
	ContentsUrl         string               `json:"contents_url"`
	ContributorsUrl     string               `json:"contributors_url"`
	CreatedAt           time.Time            `json:"created_at"`
	DefaultBranch       string               `json:"default_branch"`
	DeleteBranchOnMerge *bool                `json:"delete_branch_on_merge,omitempty"`
	DeploymentsUrl      string               `json:"deployments_url"`
	Description         *string              `json:"description"`

	// Returns whether or not this repository disabled.
	Disabled        bool    `json:"disabled"`
	DownloadsUrl    string  `json:"downloads_url"`
	EventsUrl       string  `json:"events_url"`
	Fork            bool    `json:"fork"`
	Forks           int     `json:"forks"`
	ForksCount      int     `json:"forks_count"`
	ForksUrl        string  `json:"forks_url"`
	FullName        string  `json:"full_name"`
	GitCommitsUrl   string  `json:"git_commits_url"`
	GitRefsUrl      string  `json:"git_refs_url"`
	GitTagsUrl      string  `json:"git_tags_url"`
	GitUrl          string  `json:"git_url"`
	HasDownloads    bool    `json:"has_downloads"`
	HasIssues       bool    `json:"has_issues"`
	HasPages        bool    `json:"has_pages"`
	HasProjects     bool    `json:"has_projects"`
	HasWiki         bool    `json:"has_wiki"`
	Homepage        *string `json:"homepage"`
	HooksUrl        string  `json:"hooks_url"`
	HtmlUrl         string  `json:"html_url"`
	Id              int     `json:"id"`
	IsTemplate      *bool   `json:"is_template,omitempty"`
	IssueCommentUrl string  `json:"issue_comment_url"`
	IssueEventsUrl  string  `json:"issue_events_url"`
	IssuesUrl       string  `json:"issues_url"`
	KeysUrl         string  `json:"keys_url"`
	LabelsUrl       string  `json:"labels_url"`
	Language        *string `json:"language"`
	LanguagesUrl    string  `json:"languages_url"`

	// License Simple
	License          *NullableLicenseSimple `json:"license"`
	MasterBranch     *string                `json:"master_branch,omitempty"`
	MergesUrl        string                 `json:"merges_url"`
	MilestonesUrl    string                 `json:"milestones_url"`
	MirrorUrl        *string                `json:"mirror_url"`
	Name             string                 `json:"name"`
	NetworkCount     int                    `json:"network_count"`
	NodeId           string                 `json:"node_id"`
	NotificationsUrl string                 `json:"notifications_url"`
	OpenIssues       int                    `json:"open_issues"`
	OpenIssuesCount  int                    `json:"open_issues_count"`

	// Simple User
	Organization *NullableSimpleUser `json:"organization"`

	// Simple User
	Owner SimpleUser `json:"owner"`

	// A git repository
	Parent      *Repository `json:"parent,omitempty"`
	Permissions *struct {
		Admin    bool  `json:"admin"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     bool  `json:"pull"`
		Push     bool  `json:"push"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`
	Private             bool      `json:"private"`
	PullsUrl            string    `json:"pulls_url"`
	PushedAt            time.Time `json:"pushed_at"`
	ReleasesUrl         string    `json:"releases_url"`
	SecurityAndAnalysis *struct {
		AdvancedSecurity *struct {
			Status *FullRepositorySecurityAndAnalysisAdvancedSecurityStatus `json:"status,omitempty"`
		} `json:"advanced_security,omitempty"`
		SecretScanning *struct {
			Status *FullRepositorySecurityAndAnalysisSecretScanningStatus `json:"status,omitempty"`
		} `json:"secret_scanning,omitempty"`
		SecretScanningPushProtection *struct {
			Status *FullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatus `json:"status,omitempty"`
		} `json:"secret_scanning_push_protection,omitempty"`
	} `json:"security_and_analysis"`
	Size int `json:"size"`

	// A git repository
	Source           *Repository `json:"source,omitempty"`
	SshUrl           string      `json:"ssh_url"`
	StargazersCount  int         `json:"stargazers_count"`
	StargazersUrl    string      `json:"stargazers_url"`
	StatusesUrl      string      `json:"statuses_url"`
	SubscribersCount int         `json:"subscribers_count"`
	SubscribersUrl   string      `json:"subscribers_url"`
	SubscriptionUrl  string      `json:"subscription_url"`
	SvnUrl           string      `json:"svn_url"`
	TagsUrl          string      `json:"tags_url"`
	TeamsUrl         string      `json:"teams_url"`
	TempCloneToken   *string     `json:"temp_clone_token"`

	// A git repository
	TemplateRepository *NullableRepository `json:"template_repository"`
	Topics             *[]string           `json:"topics,omitempty"`
	TreesUrl           string              `json:"trees_url"`
	UpdatedAt          time.Time           `json:"updated_at"`
	Url                string              `json:"url"`

	// The repository visibility: public, private, or internal.
	Visibility    *string `json:"visibility,omitempty"`
	Watchers      int     `json:"watchers"`
	WatchersCount int     `json:"watchers_count"`
}

// FullRepositorySecurityAndAnalysisAdvancedSecurityStatus defines model for FullRepository.SecurityAndAnalysis.AdvancedSecurity.Status.
type FullRepositorySecurityAndAnalysisAdvancedSecurityStatus string

// FullRepositorySecurityAndAnalysisSecretScanningStatus defines model for FullRepository.SecurityAndAnalysis.SecretScanning.Status.
type FullRepositorySecurityAndAnalysisSecretScanningStatus string

// FullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatus defines model for FullRepository.SecurityAndAnalysis.SecretScanningPushProtection.Status.
type FullRepositorySecurityAndAnalysisSecretScanningPushProtectionStatus string

// A comment made to a gist.
type GistComment struct {
	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// The comment text.
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`
	Id        int       `json:"id"`
	NodeId    string    `json:"node_id"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// Gist Commit
type GistCommit struct {
	ChangeStatus struct {
		Additions *int `json:"additions,omitempty"`
		Deletions *int `json:"deletions,omitempty"`
		Total     *int `json:"total,omitempty"`
	} `json:"change_status"`
	CommittedAt time.Time `json:"committed_at"`
	Url         string    `json:"url"`

	// Simple User
	User    *NullableSimpleUser `json:"user"`
	Version string              `json:"version"`
}

// Gist History
type GistHistory struct {
	ChangeStatus *struct {
		Additions *int `json:"additions,omitempty"`
		Deletions *int `json:"deletions,omitempty"`
		Total     *int `json:"total,omitempty"`
	} `json:"change_status,omitempty"`
	CommittedAt *time.Time `json:"committed_at,omitempty"`
	Url         *string    `json:"url,omitempty"`

	// Simple User
	User    *NullableSimpleUser `json:"user"`
	Version *string             `json:"version,omitempty"`
}

// Gist Simple
type GistSimple struct {
	Comments    *int              `json:"comments,omitempty"`
	CommentsUrl *string           `json:"comments_url,omitempty"`
	CommitsUrl  *string           `json:"commits_url,omitempty"`
	CreatedAt   *string           `json:"created_at,omitempty"`
	Description *string           `json:"description"`
	Files       *GistSimple_Files `json:"files,omitempty"`

	// Gist
	ForkOf *struct {
		Comments    int                     `json:"comments"`
		CommentsUrl string                  `json:"comments_url"`
		CommitsUrl  string                  `json:"commits_url"`
		CreatedAt   time.Time               `json:"created_at"`
		Description *string                 `json:"description"`
		Files       GistSimple_ForkOf_Files `json:"files"`
		Forks       *[]interface{}          `json:"forks,omitempty"`
		ForksUrl    string                  `json:"forks_url"`
		GitPullUrl  string                  `json:"git_pull_url"`
		GitPushUrl  string                  `json:"git_push_url"`
		History     *[]interface{}          `json:"history,omitempty"`
		HtmlUrl     string                  `json:"html_url"`
		Id          string                  `json:"id"`
		NodeId      string                  `json:"node_id"`

		// Simple User
		Owner     *NullableSimpleUser `json:"owner"`
		Public    bool                `json:"public"`
		Truncated *bool               `json:"truncated,omitempty"`
		UpdatedAt time.Time           `json:"updated_at"`
		Url       string              `json:"url"`

		// Simple User
		User *NullableSimpleUser `json:"user"`
	} `json:"fork_of"`
	Forks *[]struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Id        *string    `json:"id,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		Url       *string    `json:"url,omitempty"`

		// Public User
		User *PublicUser `json:"user,omitempty"`
	} `json:"forks"`
	ForksUrl   *string        `json:"forks_url,omitempty"`
	GitPullUrl *string        `json:"git_pull_url,omitempty"`
	GitPushUrl *string        `json:"git_push_url,omitempty"`
	History    *[]GistHistory `json:"history"`
	HtmlUrl    *string        `json:"html_url,omitempty"`
	Id         *string        `json:"id,omitempty"`
	NodeId     *string        `json:"node_id,omitempty"`

	// Simple User
	Owner     *SimpleUser `json:"owner,omitempty"`
	Public    *bool       `json:"public,omitempty"`
	Truncated *bool       `json:"truncated,omitempty"`
	UpdatedAt *string     `json:"updated_at,omitempty"`
	Url       *string     `json:"url,omitempty"`
	User      *string     `json:"user"`
}

// GistSimple_Files defines model for GistSimple.Files.
type GistSimple_Files struct {
	AdditionalProperties map[string]struct {
		Content   *string `json:"content,omitempty"`
		Filename  *string `json:"filename,omitempty"`
		Language  *string `json:"language,omitempty"`
		RawUrl    *string `json:"raw_url,omitempty"`
		Size      *int    `json:"size,omitempty"`
		Truncated *bool   `json:"truncated,omitempty"`
		Type      *string `json:"type,omitempty"`
	} `json:"-"`
}

// GistSimple_ForkOf_Files defines model for GistSimple.ForkOf.Files.
type GistSimple_ForkOf_Files struct {
	AdditionalProperties map[string]struct {
		Filename *string `json:"filename,omitempty"`
		Language *string `json:"language,omitempty"`
		RawUrl   *string `json:"raw_url,omitempty"`
		Size     *int    `json:"size,omitempty"`
		Type     *string `json:"type,omitempty"`
	} `json:"-"`
}

// Low-level Git commit operations within a repository
type GitCommit struct {
	// Identifying information for the git-user
	Author struct {
		// Timestamp of the commit
		Date time.Time `json:"date"`

		// Git email address of the user
		Email string `json:"email"`

		// Name of the git user
		Name string `json:"name"`
	} `json:"author"`

	// Identifying information for the git-user
	Committer struct {
		// Timestamp of the commit
		Date time.Time `json:"date"`

		// Git email address of the user
		Email string `json:"email"`

		// Name of the git user
		Name string `json:"name"`
	} `json:"committer"`
	HtmlUrl string `json:"html_url"`

	// Message describing the purpose of the commit
	Message string `json:"message"`
	NodeId  string `json:"node_id"`
	Parents []struct {
		HtmlUrl string `json:"html_url"`

		// SHA for the commit
		Sha string `json:"sha"`
		Url string `json:"url"`
	} `json:"parents"`

	// SHA for the commit
	Sha  string `json:"sha"`
	Tree struct {
		// SHA for the commit
		Sha string `json:"sha"`
		Url string `json:"url"`
	} `json:"tree"`
	Url          string `json:"url"`
	Verification struct {
		Payload   *string `json:"payload"`
		Reason    string  `json:"reason"`
		Signature *string `json:"signature"`
		Verified  bool    `json:"verified"`
	} `json:"verification"`
}

// Git references within a repository
type GitRef struct {
	NodeId string `json:"node_id"`
	Object struct {
		// SHA for the reference
		Sha  string `json:"sha"`
		Type string `json:"type"`
		Url  string `json:"url"`
	} `json:"object"`
	Ref string `json:"ref"`
	Url string `json:"url"`
}

// Metadata for a Git tag
type GitTag struct {
	// Message describing the purpose of the tag
	Message string `json:"message"`
	NodeId  string `json:"node_id"`
	Object  struct {
		Sha  string `json:"sha"`
		Type string `json:"type"`
		Url  string `json:"url"`
	} `json:"object"`
	Sha string `json:"sha"`

	// Name of the tag
	Tag    string `json:"tag"`
	Tagger struct {
		Date  string `json:"date"`
		Email string `json:"email"`
		Name  string `json:"name"`
	} `json:"tagger"`

	// URL for the tag
	Url          string        `json:"url"`
	Verification *Verification `json:"verification,omitempty"`
}

// The hierarchy between files in a Git repository.
type GitTree struct {
	Sha string `json:"sha"`

	// Objects specifying a tree structure
	Tree []struct {
		Mode *string `json:"mode,omitempty"`
		Path *string `json:"path,omitempty"`
		Sha  *string `json:"sha,omitempty"`
		Size *int    `json:"size,omitempty"`
		Type *string `json:"type,omitempty"`
		Url  *string `json:"url,omitempty"`
	} `json:"tree"`
	Truncated bool   `json:"truncated"`
	Url       string `json:"url"`
}

// Gitignore Template
type GitignoreTemplate struct {
	Name   string `json:"name"`
	Source string `json:"source"`
}

// A unique encryption key
type GpgKey struct {
	CanCertify        bool      `json:"can_certify"`
	CanEncryptComms   bool      `json:"can_encrypt_comms"`
	CanEncryptStorage bool      `json:"can_encrypt_storage"`
	CanSign           bool      `json:"can_sign"`
	CreatedAt         time.Time `json:"created_at"`
	Emails            []struct {
		Email    *string `json:"email,omitempty"`
		Verified *bool   `json:"verified,omitempty"`
	} `json:"emails"`
	ExpiresAt    *time.Time `json:"expires_at"`
	Id           int        `json:"id"`
	KeyId        string     `json:"key_id"`
	Name         *string    `json:"name"`
	PrimaryKeyId *int       `json:"primary_key_id"`
	PublicKey    string     `json:"public_key"`
	RawKey       *string    `json:"raw_key"`
	Revoked      bool       `json:"revoked"`
	Subkeys      []struct {
		CanCertify        *bool          `json:"can_certify,omitempty"`
		CanEncryptComms   *bool          `json:"can_encrypt_comms,omitempty"`
		CanEncryptStorage *bool          `json:"can_encrypt_storage,omitempty"`
		CanSign           *bool          `json:"can_sign,omitempty"`
		CreatedAt         *string        `json:"created_at,omitempty"`
		Emails            *[]interface{} `json:"emails,omitempty"`
		ExpiresAt         *string        `json:"expires_at"`
		Id                *int           `json:"id,omitempty"`
		KeyId             *string        `json:"key_id,omitempty"`
		PrimaryKeyId      *int           `json:"primary_key_id,omitempty"`
		PublicKey         *string        `json:"public_key,omitempty"`
		RawKey            *string        `json:"raw_key"`
		Revoked           *bool          `json:"revoked,omitempty"`
		Subkeys           *[]interface{} `json:"subkeys,omitempty"`
	} `json:"subkeys"`
}

// External Groups to be mapped to a team for membership
type GroupMapping struct {
	// Array of groups to be mapped to this team
	Groups *[]struct {
		// a description of the group
		GroupDescription string `json:"group_description"`

		// The ID of the group
		GroupId string `json:"group_id"`

		// The name of the group
		GroupName string `json:"group_name"`

		// synchronization status for this group mapping
		Status *string `json:"status,omitempty"`

		// the time of the last sync for this group-mapping
		SyncedAt *string `json:"synced_at"`
	} `json:"groups,omitempty"`
}

// Webhooks for repositories.
type Hook struct {
	// Determines whether the hook is actually triggered on pushes.
	Active bool `json:"active"`
	Config struct {
		// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
		ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
		Digest      *string                   `json:"digest,omitempty"`
		Email       *string                   `json:"email,omitempty"`
		InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`
		Password    *string                   `json:"password,omitempty"`
		Room        *string                   `json:"room,omitempty"`

		// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
		Secret    *WebhookConfigSecret `json:"secret,omitempty"`
		Subdomain *string              `json:"subdomain,omitempty"`
		Token     *string              `json:"token,omitempty"`

		// The URL to which the payloads will be delivered.
		Url *WebhookConfigUrl `json:"url,omitempty"`
	} `json:"config"`
	CreatedAt     time.Time `json:"created_at"`
	DeliveriesUrl *string   `json:"deliveries_url,omitempty"`

	// Determines what events the hook is triggered for. Default: ['push'].
	Events []string `json:"events"`

	// Unique identifier of the webhook.
	Id           int          `json:"id"`
	LastResponse HookResponse `json:"last_response"`

	// The name of a valid service, use 'web' for a webhook.
	Name      string    `json:"name"`
	PingUrl   string    `json:"ping_url"`
	TestUrl   string    `json:"test_url"`
	Type      string    `json:"type"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// Delivery made by a webhook.
type HookDelivery struct {
	// The type of activity for the event that triggered the delivery.
	Action *string `json:"action"`

	// Time when the delivery was delivered.
	DeliveredAt time.Time `json:"delivered_at"`

	// Time spent delivering.
	Duration float32 `json:"duration"`

	// The event that triggered the delivery.
	Event string `json:"event"`

	// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
	Guid string `json:"guid"`

	// Unique identifier of the delivery.
	Id int `json:"id"`

	// The id of the GitHub App installation associated with this event.
	InstallationId *int `json:"installation_id"`

	// Whether the delivery is a redelivery.
	Redelivery bool `json:"redelivery"`

	// The id of the repository associated with this event.
	RepositoryId *int `json:"repository_id"`
	Request      struct {
		// The request headers sent with the webhook delivery.
		Headers *HookDelivery_Request_Headers `json:"headers"`

		// The webhook payload.
		Payload *HookDelivery_Request_Payload `json:"payload"`
	} `json:"request"`
	Response struct {
		// The response headers received when the delivery was made.
		Headers *HookDelivery_Response_Headers `json:"headers"`

		// The response payload received.
		Payload *string `json:"payload"`
	} `json:"response"`

	// Description of the status of the attempted delivery
	Status string `json:"status"`

	// Status code received when delivery was made.
	StatusCode int `json:"status_code"`

	// The URL target of the delivery.
	Url *string `json:"url,omitempty"`
}

// The request headers sent with the webhook delivery.
type HookDelivery_Request_Headers struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// The webhook payload.
type HookDelivery_Request_Payload struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// The response headers received when the delivery was made.
type HookDelivery_Response_Headers struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Delivery made by a webhook, without request and response information.
type HookDeliveryItem struct {
	// The type of activity for the event that triggered the delivery.
	Action *string `json:"action"`

	// Time when the webhook delivery occurred.
	DeliveredAt time.Time `json:"delivered_at"`

	// Time spent delivering.
	Duration float32 `json:"duration"`

	// The event that triggered the delivery.
	Event string `json:"event"`

	// Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
	Guid string `json:"guid"`

	// Unique identifier of the webhook delivery.
	Id int `json:"id"`

	// The id of the GitHub App installation associated with this event.
	InstallationId *int `json:"installation_id"`

	// Whether the webhook delivery is a redelivery.
	Redelivery bool `json:"redelivery"`

	// The id of the repository associated with this event.
	RepositoryId *int `json:"repository_id"`

	// Describes the response returned after attempting the delivery.
	Status string `json:"status"`

	// Status code received when delivery was made.
	StatusCode int `json:"status_code"`
}

// HookResponse defines model for hook-response.
type HookResponse struct {
	Code    *int    `json:"code"`
	Message *string `json:"message"`
	Status  *string `json:"status"`
}

// Hovercard
type Hovercard struct {
	Contexts []struct {
		Message string `json:"message"`
		Octicon string `json:"octicon"`
	} `json:"contexts"`
}

// A repository import from an external source.
type Import struct {
	AuthorsCount    *int    `json:"authors_count"`
	AuthorsUrl      string  `json:"authors_url"`
	CommitCount     *int    `json:"commit_count"`
	ErrorMessage    *string `json:"error_message"`
	FailedStep      *string `json:"failed_step"`
	HasLargeFiles   *bool   `json:"has_large_files,omitempty"`
	HtmlUrl         string  `json:"html_url"`
	ImportPercent   *int    `json:"import_percent"`
	LargeFilesCount *int    `json:"large_files_count,omitempty"`
	LargeFilesSize  *int    `json:"large_files_size,omitempty"`
	Message         *string `json:"message,omitempty"`
	ProjectChoices  *[]struct {
		HumanName   *string `json:"human_name,omitempty"`
		TfvcProject *string `json:"tfvc_project,omitempty"`
		Vcs         *string `json:"vcs,omitempty"`
	} `json:"project_choices,omitempty"`
	PushPercent   *int         `json:"push_percent"`
	RepositoryUrl string       `json:"repository_url"`
	Status        ImportStatus `json:"status"`
	StatusText    *string      `json:"status_text"`
	SvcRoot       *string      `json:"svc_root,omitempty"`
	SvnRoot       *string      `json:"svn_root,omitempty"`
	TfvcProject   *string      `json:"tfvc_project,omitempty"`
	Url           string       `json:"url"`
	UseLfs        *bool        `json:"use_lfs,omitempty"`
	Vcs           *string      `json:"vcs"`

	// The URL of the originating repository.
	VcsUrl string `json:"vcs_url"`
}

// ImportStatus defines model for Import.Status.
type ImportStatus string

// Installation
type Installation struct {
	AccessTokensUrl        string       `json:"access_tokens_url"`
	Account                *interface{} `json:"account"`
	AppId                  int          `json:"app_id"`
	AppSlug                string       `json:"app_slug"`
	ContactEmail           *string      `json:"contact_email"`
	CreatedAt              time.Time    `json:"created_at"`
	Events                 []string     `json:"events"`
	HasMultipleSingleFiles *bool        `json:"has_multiple_single_files,omitempty"`
	HtmlUrl                string       `json:"html_url"`

	// The ID of the installation.
	Id int `json:"id"`

	// The permissions granted to the user-to-server access token.
	Permissions     AppPermissions `json:"permissions"`
	RepositoriesUrl string         `json:"repositories_url"`

	// Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection InstallationRepositorySelection `json:"repository_selection"`
	SingleFileName      *string                         `json:"single_file_name"`
	SingleFilePaths     *[]string                       `json:"single_file_paths,omitempty"`
	SuspendedAt         *time.Time                      `json:"suspended_at"`

	// Simple User
	SuspendedBy *NullableSimpleUser `json:"suspended_by"`

	// The ID of the user or organization this token is being scoped to.
	TargetId   int       `json:"target_id"`
	TargetType string    `json:"target_type"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// Describe whether all repositories have been selected or there's a selection involved
type InstallationRepositorySelection string

// Authentication token for a GitHub App installed on a user or org.
type InstallationToken struct {
	ExpiresAt              string `json:"expires_at"`
	HasMultipleSingleFiles *bool  `json:"has_multiple_single_files,omitempty"`

	// The permissions granted to the user-to-server access token.
	Permissions         *AppPermissions                       `json:"permissions,omitempty"`
	Repositories        *[]Repository                         `json:"repositories,omitempty"`
	RepositorySelection *InstallationTokenRepositorySelection `json:"repository_selection,omitempty"`
	SingleFile          *string                               `json:"single_file,omitempty"`
	SingleFilePaths     *[]string                             `json:"single_file_paths,omitempty"`
	Token               string                                `json:"token"`
}

// InstallationTokenRepositorySelection defines model for InstallationToken.RepositorySelection.
type InstallationTokenRepositorySelection string

// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
type Integration struct {
	ClientId     *string   `json:"client_id,omitempty"`
	ClientSecret *string   `json:"client_secret,omitempty"`
	CreatedAt    time.Time `json:"created_at"`
	Description  *string   `json:"description"`

	// The list of events for the GitHub app
	Events      []string `json:"events"`
	ExternalUrl string   `json:"external_url"`
	HtmlUrl     string   `json:"html_url"`

	// Unique identifier of the GitHub app
	Id int `json:"id"`

	// The number of installations associated with the GitHub app
	InstallationsCount *int `json:"installations_count,omitempty"`

	// The name of the GitHub app
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// Simple User
	Owner *NullableSimpleUser `json:"owner"`
	Pem   *string             `json:"pem,omitempty"`

	// The set of permissions for the GitHub app
	Permissions Integration_Permissions `json:"permissions"`

	// The slug name of the GitHub app
	Slug          *string   `json:"slug,omitempty"`
	UpdatedAt     time.Time `json:"updated_at"`
	WebhookSecret *string   `json:"webhook_secret"`
}

// The set of permissions for the GitHub app
type Integration_Permissions struct {
	Checks               *string           `json:"checks,omitempty"`
	Contents             *string           `json:"contents,omitempty"`
	Deployments          *string           `json:"deployments,omitempty"`
	Issues               *string           `json:"issues,omitempty"`
	Metadata             *string           `json:"metadata,omitempty"`
	AdditionalProperties map[string]string `json:"-"`
}

// The duration of the interaction restriction. Default: `one_day`.
type InteractionExpiry string

// The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
type InteractionGroup string

// Limit interactions to a specific type of user for a specified duration
type InteractionLimit struct {
	// The duration of the interaction restriction. Default: `one_day`.
	Expiry *InteractionExpiry `json:"expiry,omitempty"`

	// The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
	Limit InteractionGroup `json:"limit"`
}

// Interaction limit settings.
type InteractionLimitResponse struct {
	ExpiresAt time.Time `json:"expires_at"`

	// The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
	Limit  InteractionGroup `json:"limit"`
	Origin string           `json:"origin"`
}

// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
type Issue struct {
	ActiveLockReason *string `json:"active_lock_reason"`

	// Simple User
	Assignee  *NullableSimpleUser `json:"assignee"`
	Assignees *[]SimpleUser       `json:"assignees"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// Contents of the issue
	Body     *string    `json:"body"`
	BodyHtml *string    `json:"body_html,omitempty"`
	BodyText *string    `json:"body_text,omitempty"`
	ClosedAt *time.Time `json:"closed_at"`

	// Simple User
	ClosedBy    *NullableSimpleUser `json:"closed_by"`
	Comments    int                 `json:"comments"`
	CommentsUrl string              `json:"comments_url"`
	CreatedAt   time.Time           `json:"created_at"`
	Draft       *bool               `json:"draft,omitempty"`
	EventsUrl   string              `json:"events_url"`
	HtmlUrl     string              `json:"html_url"`
	Id          int                 `json:"id"`

	// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
	Labels    []interface{} `json:"labels"`
	LabelsUrl string        `json:"labels_url"`
	Locked    bool          `json:"locked"`

	// A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone"`
	NodeId    string             `json:"node_id"`

	// Number uniquely identifying the issue within its repository
	Number int `json:"number"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	PullRequest           *struct {
		DiffUrl  *string    `json:"diff_url"`
		HtmlUrl  *string    `json:"html_url"`
		MergedAt *time.Time `json:"merged_at"`
		PatchUrl *string    `json:"patch_url"`
		Url      *string    `json:"url"`
	} `json:"pull_request,omitempty"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`

	// A git repository
	Repository    *Repository `json:"repository,omitempty"`
	RepositoryUrl string      `json:"repository_url"`

	// State of the issue; either 'open' or 'closed'
	State       string  `json:"state"`
	TimelineUrl *string `json:"timeline_url,omitempty"`

	// Title of the issue
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`

	// URL for the issue
	Url string `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// Comments provide a way for people to collaborate on an issue.
type IssueComment struct {
	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// Contents of the issue comment
	Body      *string   `json:"body,omitempty"`
	BodyHtml  *string   `json:"body_html,omitempty"`
	BodyText  *string   `json:"body_text,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	HtmlUrl   string    `json:"html_url"`

	// Unique identifier of the issue comment
	Id       int    `json:"id"`
	IssueUrl string `json:"issue_url"`
	NodeId   string `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Reactions             *ReactionRollup      `json:"reactions,omitempty"`
	UpdatedAt             time.Time            `json:"updated_at"`

	// URL for the issue comment
	Url string `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// Issue Event
type IssueEvent struct {
	// Simple User
	Actor *NullableSimpleUser `json:"actor"`

	// Simple User
	Assignee *NullableSimpleUser `json:"assignee"`

	// Simple User
	Assigner *NullableSimpleUser `json:"assigner"`

	// How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation         `json:"author_association,omitempty"`
	CommitId          *string                    `json:"commit_id"`
	CommitUrl         *string                    `json:"commit_url"`
	CreatedAt         time.Time                  `json:"created_at"`
	DismissedReview   *IssueEventDismissedReview `json:"dismissed_review,omitempty"`
	Event             string                     `json:"event"`
	Id                int                        `json:"id"`

	// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
	Issue *NullableIssue `json:"issue"`

	// Issue Event Label
	Label      *IssueEventLabel `json:"label,omitempty"`
	LockReason *string          `json:"lock_reason"`

	// Issue Event Milestone
	Milestone *IssueEventMilestone `json:"milestone,omitempty"`
	NodeId    string               `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`

	// Issue Event Project Card
	ProjectCard *IssueEventProjectCard `json:"project_card,omitempty"`

	// Issue Event Rename
	Rename *IssueEventRename `json:"rename,omitempty"`

	// Simple User
	RequestedReviewer *NullableSimpleUser `json:"requested_reviewer"`

	// Groups of organization members that gives permissions on specified repositories.
	RequestedTeam *Team `json:"requested_team,omitempty"`

	// Simple User
	ReviewRequester *NullableSimpleUser `json:"review_requester"`
	Url             string              `json:"url"`
}

// IssueEventDismissedReview defines model for issue-event-dismissed-review.
type IssueEventDismissedReview struct {
	DismissalCommitId *string `json:"dismissal_commit_id"`
	DismissalMessage  *string `json:"dismissal_message"`
	ReviewId          int     `json:"review_id"`
	State             string  `json:"state"`
}

// Issue Event for Issue
type IssueEventForIssue interface{}

// Issue Event Label
type IssueEventLabel struct {
	Color *string `json:"color"`
	Name  *string `json:"name"`
}

// Issue Event Milestone
type IssueEventMilestone struct {
	Title string `json:"title"`
}

// Issue Event Project Card
type IssueEventProjectCard struct {
	ColumnName         string  `json:"column_name"`
	Id                 int     `json:"id"`
	PreviousColumnName *string `json:"previous_column_name,omitempty"`
	ProjectId          int     `json:"project_id"`
	ProjectUrl         string  `json:"project_url"`
	Url                string  `json:"url"`
}

// Issue Event Rename
type IssueEventRename struct {
	From string `json:"from"`
	To   string `json:"to"`
}

// Issue Search Result Item
type IssueSearchResultItem struct {
	ActiveLockReason *string `json:"active_lock_reason"`

	// Simple User
	Assignee  *NullableSimpleUser `json:"assignee"`
	Assignees *[]SimpleUser       `json:"assignees"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`
	Body              *string           `json:"body,omitempty"`
	BodyHtml          *string           `json:"body_html,omitempty"`
	BodyText          *string           `json:"body_text,omitempty"`
	ClosedAt          *time.Time        `json:"closed_at"`
	Comments          int               `json:"comments"`
	CommentsUrl       string            `json:"comments_url"`
	CreatedAt         time.Time         `json:"created_at"`
	Draft             *bool             `json:"draft,omitempty"`
	EventsUrl         string            `json:"events_url"`
	HtmlUrl           string            `json:"html_url"`
	Id                int               `json:"id"`
	Labels            []struct {
		Color       *string `json:"color,omitempty"`
		Default     *bool   `json:"default,omitempty"`
		Description *string `json:"description"`
		Id          *int64  `json:"id,omitempty"`
		Name        *string `json:"name,omitempty"`
		NodeId      *string `json:"node_id,omitempty"`
		Url         *string `json:"url,omitempty"`
	} `json:"labels"`
	LabelsUrl string `json:"labels_url"`
	Locked    bool   `json:"locked"`

	// A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone"`
	NodeId    string             `json:"node_id"`
	Number    int                `json:"number"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	PullRequest           *struct {
		DiffUrl  *string    `json:"diff_url"`
		HtmlUrl  *string    `json:"html_url"`
		MergedAt *time.Time `json:"merged_at"`
		PatchUrl *string    `json:"patch_url"`
		Url      *string    `json:"url"`
	} `json:"pull_request,omitempty"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`

	// A git repository
	Repository    *Repository              `json:"repository,omitempty"`
	RepositoryUrl string                   `json:"repository_url"`
	Score         float32                  `json:"score"`
	State         string                   `json:"state"`
	TextMatches   *SearchResultTextMatches `json:"text_matches,omitempty"`
	TimelineUrl   *string                  `json:"timeline_url,omitempty"`
	Title         string                   `json:"title"`
	UpdatedAt     time.Time                `json:"updated_at"`
	Url           string                   `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// Information of a job execution in a workflow run
type Job struct {
	CheckRunUrl string `json:"check_run_url"`

	// The time that the job finished, in ISO 8601 format.
	CompletedAt *time.Time `json:"completed_at"`

	// The outcome of the job.
	Conclusion *string `json:"conclusion"`

	// The SHA of the commit that is being run.
	HeadSha string  `json:"head_sha"`
	HtmlUrl *string `json:"html_url"`

	// The id of the job.
	Id int `json:"id"`

	// Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
	Labels []string `json:"labels"`

	// The name of the job.
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
	RunAttempt *int `json:"run_attempt,omitempty"`

	// The id of the associated workflow run.
	RunId  int    `json:"run_id"`
	RunUrl string `json:"run_url"`

	// The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
	RunnerGroupId *int `json:"runner_group_id"`

	// The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
	RunnerGroupName *string `json:"runner_group_name"`

	// The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
	RunnerId *int `json:"runner_id"`

	// The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
	RunnerName *string `json:"runner_name"`

	// The time that the job started, in ISO 8601 format.
	StartedAt time.Time `json:"started_at"`

	// The phase of the lifecycle that the job is currently in.
	Status JobStatus `json:"status"`

	// Steps in this job.
	Steps *[]struct {
		// The time that the job finished, in ISO 8601 format.
		CompletedAt *time.Time `json:"completed_at"`

		// The outcome of the job.
		Conclusion *string `json:"conclusion"`

		// The name of the job.
		Name   string `json:"name"`
		Number int    `json:"number"`

		// The time that the step started, in ISO 8601 format.
		StartedAt *time.Time `json:"started_at"`

		// The phase of the lifecycle that the job is currently in.
		Status JobStepsStatus `json:"status"`
	} `json:"steps,omitempty"`
	Url string `json:"url"`
}

// The phase of the lifecycle that the job is currently in.
type JobStatus string

// The phase of the lifecycle that the job is currently in.
type JobStepsStatus string

// Key
type Key struct {
	CreatedAt time.Time `json:"created_at"`
	Id        int       `json:"id"`
	Key       string    `json:"key"`
	ReadOnly  bool      `json:"read_only"`
	Title     string    `json:"title"`
	Url       string    `json:"url"`
	Verified  bool      `json:"verified"`
}

// Key Simple
type KeySimple struct {
	Id  int    `json:"id"`
	Key string `json:"key"`
}

// Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
type Label struct {
	// 6-character hex code, without the leading #, identifying the color
	Color       string  `json:"color"`
	Default     bool    `json:"default"`
	Description *string `json:"description"`
	Id          int64   `json:"id"`

	// The name of the label.
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// URL for the label
	Url string `json:"url"`
}

// Label Search Result Item
type LabelSearchResultItem struct {
	Color       string                   `json:"color"`
	Default     bool                     `json:"default"`
	Description *string                  `json:"description"`
	Id          int                      `json:"id"`
	Name        string                   `json:"name"`
	NodeId      string                   `json:"node_id"`
	Score       float32                  `json:"score"`
	TextMatches *SearchResultTextMatches `json:"text_matches,omitempty"`
	Url         string                   `json:"url"`
}

// Labeled Issue Event
type LabeledIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	Label     struct {
		Color string `json:"color"`
		Name  string `json:"name"`
	} `json:"label"`
	NodeId string `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// Language
type Language struct {
	AdditionalProperties map[string]int `json:"-"`
}

// License
type License struct {
	Body           string   `json:"body"`
	Conditions     []string `json:"conditions"`
	Description    string   `json:"description"`
	Featured       bool     `json:"featured"`
	HtmlUrl        string   `json:"html_url"`
	Implementation string   `json:"implementation"`
	Key            string   `json:"key"`
	Limitations    []string `json:"limitations"`
	Name           string   `json:"name"`
	NodeId         string   `json:"node_id"`
	Permissions    []string `json:"permissions"`
	SpdxId         *string  `json:"spdx_id"`
	Url            *string  `json:"url"`
}

// License Content
type LicenseContent struct {
	Links struct {
		Git  *string `json:"git"`
		Html *string `json:"html"`
		Self string  `json:"self"`
	} `json:"_links"`
	Content     string  `json:"content"`
	DownloadUrl *string `json:"download_url"`
	Encoding    string  `json:"encoding"`
	GitUrl      *string `json:"git_url"`
	HtmlUrl     *string `json:"html_url"`

	// License Simple
	License *NullableLicenseSimple `json:"license"`
	Name    string                 `json:"name"`
	Path    string                 `json:"path"`
	Sha     string                 `json:"sha"`
	Size    int                    `json:"size"`
	Type    string                 `json:"type"`
	Url     string                 `json:"url"`
}

// License Simple
type LicenseSimple struct {
	HtmlUrl *string `json:"html_url,omitempty"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	NodeId  string  `json:"node_id"`
	SpdxId  *string `json:"spdx_id"`
	Url     *string `json:"url"`
}

// Hypermedia Link
type Link struct {
	Href string `json:"href"`
}

// Hypermedia Link with Type
type LinkWithType struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

// Locked Issue Event
type LockedIssueEvent struct {
	// Simple User
	Actor      SimpleUser `json:"actor"`
	CommitId   *string    `json:"commit_id"`
	CommitUrl  *string    `json:"commit_url"`
	CreatedAt  string     `json:"created_at"`
	Event      string     `json:"event"`
	Id         int        `json:"id"`
	LockReason *string    `json:"lock_reason"`
	NodeId     string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// MarketplaceAccount defines model for marketplace-account.
type MarketplaceAccount struct {
	Email                    *openapi_types.Email `json:"email"`
	Id                       int                  `json:"id"`
	Login                    string               `json:"login"`
	NodeId                   *string              `json:"node_id,omitempty"`
	OrganizationBillingEmail *openapi_types.Email `json:"organization_billing_email"`
	Type                     string               `json:"type"`
	Url                      string               `json:"url"`
}

// Marketplace Listing Plan
type MarketplaceListingPlan struct {
	AccountsUrl         string   `json:"accounts_url"`
	Bullets             []string `json:"bullets"`
	Description         string   `json:"description"`
	HasFreeTrial        bool     `json:"has_free_trial"`
	Id                  int      `json:"id"`
	MonthlyPriceInCents int      `json:"monthly_price_in_cents"`
	Name                string   `json:"name"`
	Number              int      `json:"number"`
	PriceModel          string   `json:"price_model"`
	State               string   `json:"state"`
	UnitName            *string  `json:"unit_name"`
	Url                 string   `json:"url"`
	YearlyPriceInCents  int      `json:"yearly_price_in_cents"`
}

// Marketplace Purchase
type MarketplacePurchase struct {
	Email                    *string `json:"email"`
	Id                       int     `json:"id"`
	Login                    string  `json:"login"`
	MarketplacePendingChange *struct {
		EffectiveDate *string `json:"effective_date,omitempty"`
		Id            *int    `json:"id,omitempty"`
		IsInstalled   *bool   `json:"is_installed,omitempty"`

		// Marketplace Listing Plan
		Plan      *MarketplaceListingPlan `json:"plan,omitempty"`
		UnitCount *int                    `json:"unit_count"`
	} `json:"marketplace_pending_change"`
	MarketplacePurchase struct {
		BillingCycle    *string `json:"billing_cycle,omitempty"`
		FreeTrialEndsOn *string `json:"free_trial_ends_on"`
		IsInstalled     *bool   `json:"is_installed,omitempty"`
		NextBillingDate *string `json:"next_billing_date"`
		OnFreeTrial     *bool   `json:"on_free_trial,omitempty"`

		// Marketplace Listing Plan
		Plan      *MarketplaceListingPlan `json:"plan,omitempty"`
		UnitCount *int                    `json:"unit_count"`
		UpdatedAt *string                 `json:"updated_at,omitempty"`
	} `json:"marketplace_purchase"`
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`
	Type                     string  `json:"type"`
	Url                      string  `json:"url"`
}

// Results of a successful merge upstream request
type MergedUpstream struct {
	BaseBranch *string                  `json:"base_branch,omitempty"`
	MergeType  *MergedUpstreamMergeType `json:"merge_type,omitempty"`
	Message    *string                  `json:"message,omitempty"`
}

// MergedUpstreamMergeType defines model for MergedUpstream.MergeType.
type MergedUpstreamMergeType string

// A migration.
type Migration struct {
	ArchiveUrl           *string        `json:"archive_url,omitempty"`
	CreatedAt            time.Time      `json:"created_at"`
	Exclude              *[]interface{} `json:"exclude,omitempty"`
	ExcludeAttachments   bool           `json:"exclude_attachments"`
	ExcludeGitData       bool           `json:"exclude_git_data"`
	ExcludeMetadata      bool           `json:"exclude_metadata"`
	ExcludeOwnerProjects bool           `json:"exclude_owner_projects"`
	ExcludeReleases      bool           `json:"exclude_releases"`
	Guid                 string         `json:"guid"`
	Id                   int            `json:"id"`
	LockRepositories     bool           `json:"lock_repositories"`
	NodeId               string         `json:"node_id"`

	// Simple User
	Owner        *NullableSimpleUser `json:"owner"`
	Repositories []Repository        `json:"repositories"`
	State        string              `json:"state"`
	UpdatedAt    time.Time           `json:"updated_at"`
	Url          string              `json:"url"`
}

// A collection of related issues and pull requests.
type Milestone struct {
	ClosedAt     *time.Time `json:"closed_at"`
	ClosedIssues int        `json:"closed_issues"`
	CreatedAt    time.Time  `json:"created_at"`

	// Simple User
	Creator     *NullableSimpleUser `json:"creator"`
	Description *string             `json:"description"`
	DueOn       *time.Time          `json:"due_on"`
	HtmlUrl     string              `json:"html_url"`
	Id          int                 `json:"id"`
	LabelsUrl   string              `json:"labels_url"`
	NodeId      string              `json:"node_id"`

	// The number of the milestone.
	Number     int `json:"number"`
	OpenIssues int `json:"open_issues"`

	// The state of the milestone.
	State MilestoneState `json:"state"`

	// The title of the milestone.
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// The state of the milestone.
type MilestoneState string

// Milestoned Issue Event
type MilestonedIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	Milestone struct {
		Title string `json:"title"`
	} `json:"milestone"`
	NodeId string `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// Minimal Repository
type MinimalRepository struct {
	AllowForking *bool   `json:"allow_forking,omitempty"`
	ArchiveUrl   string  `json:"archive_url"`
	Archived     *bool   `json:"archived,omitempty"`
	AssigneesUrl string  `json:"assignees_url"`
	BlobsUrl     string  `json:"blobs_url"`
	BranchesUrl  string  `json:"branches_url"`
	CloneUrl     *string `json:"clone_url,omitempty"`

	// Code Of Conduct
	CodeOfConduct       *CodeOfConduct `json:"code_of_conduct,omitempty"`
	CollaboratorsUrl    string         `json:"collaborators_url"`
	CommentsUrl         string         `json:"comments_url"`
	CommitsUrl          string         `json:"commits_url"`
	CompareUrl          string         `json:"compare_url"`
	ContentsUrl         string         `json:"contents_url"`
	ContributorsUrl     string         `json:"contributors_url"`
	CreatedAt           *time.Time     `json:"created_at"`
	DefaultBranch       *string        `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool          `json:"delete_branch_on_merge,omitempty"`
	DeploymentsUrl      string         `json:"deployments_url"`
	Description         *string        `json:"description"`
	Disabled            *bool          `json:"disabled,omitempty"`
	DownloadsUrl        string         `json:"downloads_url"`
	EventsUrl           string         `json:"events_url"`
	Fork                bool           `json:"fork"`
	Forks               *int           `json:"forks,omitempty"`
	ForksCount          *int           `json:"forks_count,omitempty"`
	ForksUrl            string         `json:"forks_url"`
	FullName            string         `json:"full_name"`
	GitCommitsUrl       string         `json:"git_commits_url"`
	GitRefsUrl          string         `json:"git_refs_url"`
	GitTagsUrl          string         `json:"git_tags_url"`
	GitUrl              *string        `json:"git_url,omitempty"`
	HasDownloads        *bool          `json:"has_downloads,omitempty"`
	HasIssues           *bool          `json:"has_issues,omitempty"`
	HasPages            *bool          `json:"has_pages,omitempty"`
	HasProjects         *bool          `json:"has_projects,omitempty"`
	HasWiki             *bool          `json:"has_wiki,omitempty"`
	Homepage            *string        `json:"homepage"`
	HooksUrl            string         `json:"hooks_url"`
	HtmlUrl             string         `json:"html_url"`
	Id                  int            `json:"id"`
	IsTemplate          *bool          `json:"is_template,omitempty"`
	IssueCommentUrl     string         `json:"issue_comment_url"`
	IssueEventsUrl      string         `json:"issue_events_url"`
	IssuesUrl           string         `json:"issues_url"`
	KeysUrl             string         `json:"keys_url"`
	LabelsUrl           string         `json:"labels_url"`
	Language            *string        `json:"language"`
	LanguagesUrl        string         `json:"languages_url"`
	License             *struct {
		Key    *string `json:"key,omitempty"`
		Name   *string `json:"name,omitempty"`
		NodeId *string `json:"node_id,omitempty"`
		SpdxId *string `json:"spdx_id,omitempty"`
		Url    *string `json:"url,omitempty"`
	} `json:"license"`
	MergesUrl        string  `json:"merges_url"`
	MilestonesUrl    string  `json:"milestones_url"`
	MirrorUrl        *string `json:"mirror_url"`
	Name             string  `json:"name"`
	NetworkCount     *int    `json:"network_count,omitempty"`
	NodeId           string  `json:"node_id"`
	NotificationsUrl string  `json:"notifications_url"`
	OpenIssues       *int    `json:"open_issues,omitempty"`
	OpenIssuesCount  *int    `json:"open_issues_count,omitempty"`

	// Simple User
	Owner       SimpleUser `json:"owner"`
	Permissions *struct {
		Admin    *bool `json:"admin,omitempty"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     *bool `json:"pull,omitempty"`
		Push     *bool `json:"push,omitempty"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`
	Private          bool       `json:"private"`
	PullsUrl         string     `json:"pulls_url"`
	PushedAt         *time.Time `json:"pushed_at"`
	ReleasesUrl      string     `json:"releases_url"`
	RoleName         *string    `json:"role_name,omitempty"`
	Size             *int       `json:"size,omitempty"`
	SshUrl           *string    `json:"ssh_url,omitempty"`
	StargazersCount  *int       `json:"stargazers_count,omitempty"`
	StargazersUrl    string     `json:"stargazers_url"`
	StatusesUrl      string     `json:"statuses_url"`
	SubscribersCount *int       `json:"subscribers_count,omitempty"`
	SubscribersUrl   string     `json:"subscribers_url"`
	SubscriptionUrl  string     `json:"subscription_url"`
	SvnUrl           *string    `json:"svn_url,omitempty"`
	TagsUrl          string     `json:"tags_url"`
	TeamsUrl         string     `json:"teams_url"`
	TempCloneToken   *string    `json:"temp_clone_token,omitempty"`

	// A git repository
	TemplateRepository *NullableRepository `json:"template_repository"`
	Topics             *[]string           `json:"topics,omitempty"`
	TreesUrl           string              `json:"trees_url"`
	UpdatedAt          *time.Time          `json:"updated_at"`
	Url                string              `json:"url"`
	Visibility         *string             `json:"visibility,omitempty"`
	Watchers           *int                `json:"watchers,omitempty"`
	WatchersCount      *int                `json:"watchers_count,omitempty"`
}

// Moved Column in Project Issue Event
type MovedColumnInProjectIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	ProjectCard           *struct {
		ColumnName         string  `json:"column_name"`
		Id                 int     `json:"id"`
		PreviousColumnName *string `json:"previous_column_name,omitempty"`
		ProjectId          int     `json:"project_id"`
		ProjectUrl         string  `json:"project_url"`
		Url                string  `json:"url"`
	} `json:"project_card,omitempty"`
	Url string `json:"url"`
}

// Code of Conduct Simple
type NullableCodeOfConductSimple struct {
	HtmlUrl *string `json:"html_url"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	Url     string  `json:"url"`
}

// A description of the machine powering a codespace.
type NullableCodespaceMachine struct {
	// How many cores are available to the codespace.
	Cpus int `json:"cpus"`

	// The display name of the machine includes cores, memory, and storage.
	DisplayName string `json:"display_name"`

	// How much memory is available to the codespace.
	MemoryInBytes int `json:"memory_in_bytes"`

	// The name of the machine.
	Name string `json:"name"`

	// The operating system of the machine.
	OperatingSystem string `json:"operating_system"`

	// Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value is the type of prebuild available, or "none" if none are available.
	PrebuildAvailability *NullableCodespaceMachinePrebuildAvailability `json:"prebuild_availability"`

	// How much storage is available to the codespace.
	StorageInBytes int `json:"storage_in_bytes"`
}

// Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value is the type of prebuild available, or "none" if none are available.
type NullableCodespaceMachinePrebuildAvailability string

// Collaborator
type NullableCollaborator struct {
	AvatarUrl        string  `json:"avatar_url"`
	Email            *string `json:"email"`
	EventsUrl        string  `json:"events_url"`
	FollowersUrl     string  `json:"followers_url"`
	FollowingUrl     string  `json:"following_url"`
	GistsUrl         string  `json:"gists_url"`
	GravatarId       *string `json:"gravatar_id"`
	HtmlUrl          string  `json:"html_url"`
	Id               int     `json:"id"`
	Login            string  `json:"login"`
	Name             *string `json:"name"`
	NodeId           string  `json:"node_id"`
	OrganizationsUrl string  `json:"organizations_url"`
	Permissions      *struct {
		Admin    bool  `json:"admin"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     bool  `json:"pull"`
		Push     bool  `json:"push"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`
	ReceivedEventsUrl string `json:"received_events_url"`
	ReposUrl          string `json:"repos_url"`
	RoleName          string `json:"role_name"`
	SiteAdmin         bool   `json:"site_admin"`
	StarredUrl        string `json:"starred_url"`
	SubscriptionsUrl  string `json:"subscriptions_url"`
	Type              string `json:"type"`
	Url               string `json:"url"`
}

// NullableCommunityHealthFile defines model for nullable-community-health-file.
type NullableCommunityHealthFile struct {
	HtmlUrl string `json:"html_url"`
	Url     string `json:"url"`
}

// Metaproperties for Git author/committer information.
type NullableGitUser struct {
	Date  *string `json:"date,omitempty"`
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
type NullableIntegration struct {
	ClientId     *string   `json:"client_id,omitempty"`
	ClientSecret *string   `json:"client_secret,omitempty"`
	CreatedAt    time.Time `json:"created_at"`
	Description  *string   `json:"description"`

	// The list of events for the GitHub app
	Events      []string `json:"events"`
	ExternalUrl string   `json:"external_url"`
	HtmlUrl     string   `json:"html_url"`

	// Unique identifier of the GitHub app
	Id int `json:"id"`

	// The number of installations associated with the GitHub app
	InstallationsCount *int `json:"installations_count,omitempty"`

	// The name of the GitHub app
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// Simple User
	Owner *NullableSimpleUser `json:"owner"`
	Pem   *string             `json:"pem,omitempty"`

	// The set of permissions for the GitHub app
	Permissions NullableIntegration_Permissions `json:"permissions"`

	// The slug name of the GitHub app
	Slug          *string   `json:"slug,omitempty"`
	UpdatedAt     time.Time `json:"updated_at"`
	WebhookSecret *string   `json:"webhook_secret"`
}

// The set of permissions for the GitHub app
type NullableIntegration_Permissions struct {
	Checks               *string           `json:"checks,omitempty"`
	Contents             *string           `json:"contents,omitempty"`
	Deployments          *string           `json:"deployments,omitempty"`
	Issues               *string           `json:"issues,omitempty"`
	Metadata             *string           `json:"metadata,omitempty"`
	AdditionalProperties map[string]string `json:"-"`
}

// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
type NullableIssue struct {
	ActiveLockReason *string `json:"active_lock_reason"`

	// Simple User
	Assignee  *NullableSimpleUser `json:"assignee"`
	Assignees *[]SimpleUser       `json:"assignees"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// Contents of the issue
	Body     *string    `json:"body"`
	BodyHtml *string    `json:"body_html,omitempty"`
	BodyText *string    `json:"body_text,omitempty"`
	ClosedAt *time.Time `json:"closed_at"`

	// Simple User
	ClosedBy    *NullableSimpleUser `json:"closed_by"`
	Comments    int                 `json:"comments"`
	CommentsUrl string              `json:"comments_url"`
	CreatedAt   time.Time           `json:"created_at"`
	Draft       *bool               `json:"draft,omitempty"`
	EventsUrl   string              `json:"events_url"`
	HtmlUrl     string              `json:"html_url"`
	Id          int                 `json:"id"`

	// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
	Labels    []interface{} `json:"labels"`
	LabelsUrl string        `json:"labels_url"`
	Locked    bool          `json:"locked"`

	// A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone"`
	NodeId    string             `json:"node_id"`

	// Number uniquely identifying the issue within its repository
	Number int `json:"number"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	PullRequest           *struct {
		DiffUrl  *string    `json:"diff_url"`
		HtmlUrl  *string    `json:"html_url"`
		MergedAt *time.Time `json:"merged_at"`
		PatchUrl *string    `json:"patch_url"`
		Url      *string    `json:"url"`
	} `json:"pull_request,omitempty"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`

	// A git repository
	Repository    *Repository `json:"repository,omitempty"`
	RepositoryUrl string      `json:"repository_url"`

	// State of the issue; either 'open' or 'closed'
	State       string  `json:"state"`
	TimelineUrl *string `json:"timeline_url,omitempty"`

	// Title of the issue
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`

	// URL for the issue
	Url string `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// License Simple
type NullableLicenseSimple struct {
	HtmlUrl *string `json:"html_url,omitempty"`
	Key     string  `json:"key"`
	Name    string  `json:"name"`
	NodeId  string  `json:"node_id"`
	SpdxId  *string `json:"spdx_id"`
	Url     *string `json:"url"`
}

// A collection of related issues and pull requests.
type NullableMilestone struct {
	ClosedAt     *time.Time `json:"closed_at"`
	ClosedIssues int        `json:"closed_issues"`
	CreatedAt    time.Time  `json:"created_at"`

	// Simple User
	Creator     *NullableSimpleUser `json:"creator"`
	Description *string             `json:"description"`
	DueOn       *time.Time          `json:"due_on"`
	HtmlUrl     string              `json:"html_url"`
	Id          int                 `json:"id"`
	LabelsUrl   string              `json:"labels_url"`
	NodeId      string              `json:"node_id"`

	// The number of the milestone.
	Number     int `json:"number"`
	OpenIssues int `json:"open_issues"`

	// The state of the milestone.
	State NullableMilestoneState `json:"state"`

	// The title of the milestone.
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// The state of the milestone.
type NullableMilestoneState string

// Minimal Repository
type NullableMinimalRepository struct {
	AllowForking *bool   `json:"allow_forking,omitempty"`
	ArchiveUrl   string  `json:"archive_url"`
	Archived     *bool   `json:"archived,omitempty"`
	AssigneesUrl string  `json:"assignees_url"`
	BlobsUrl     string  `json:"blobs_url"`
	BranchesUrl  string  `json:"branches_url"`
	CloneUrl     *string `json:"clone_url,omitempty"`

	// Code Of Conduct
	CodeOfConduct       *CodeOfConduct `json:"code_of_conduct,omitempty"`
	CollaboratorsUrl    string         `json:"collaborators_url"`
	CommentsUrl         string         `json:"comments_url"`
	CommitsUrl          string         `json:"commits_url"`
	CompareUrl          string         `json:"compare_url"`
	ContentsUrl         string         `json:"contents_url"`
	ContributorsUrl     string         `json:"contributors_url"`
	CreatedAt           *time.Time     `json:"created_at"`
	DefaultBranch       *string        `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool          `json:"delete_branch_on_merge,omitempty"`
	DeploymentsUrl      string         `json:"deployments_url"`
	Description         *string        `json:"description"`
	Disabled            *bool          `json:"disabled,omitempty"`
	DownloadsUrl        string         `json:"downloads_url"`
	EventsUrl           string         `json:"events_url"`
	Fork                bool           `json:"fork"`
	Forks               *int           `json:"forks,omitempty"`
	ForksCount          *int           `json:"forks_count,omitempty"`
	ForksUrl            string         `json:"forks_url"`
	FullName            string         `json:"full_name"`
	GitCommitsUrl       string         `json:"git_commits_url"`
	GitRefsUrl          string         `json:"git_refs_url"`
	GitTagsUrl          string         `json:"git_tags_url"`
	GitUrl              *string        `json:"git_url,omitempty"`
	HasDownloads        *bool          `json:"has_downloads,omitempty"`
	HasIssues           *bool          `json:"has_issues,omitempty"`
	HasPages            *bool          `json:"has_pages,omitempty"`
	HasProjects         *bool          `json:"has_projects,omitempty"`
	HasWiki             *bool          `json:"has_wiki,omitempty"`
	Homepage            *string        `json:"homepage"`
	HooksUrl            string         `json:"hooks_url"`
	HtmlUrl             string         `json:"html_url"`
	Id                  int            `json:"id"`
	IsTemplate          *bool          `json:"is_template,omitempty"`
	IssueCommentUrl     string         `json:"issue_comment_url"`
	IssueEventsUrl      string         `json:"issue_events_url"`
	IssuesUrl           string         `json:"issues_url"`
	KeysUrl             string         `json:"keys_url"`
	LabelsUrl           string         `json:"labels_url"`
	Language            *string        `json:"language"`
	LanguagesUrl        string         `json:"languages_url"`
	License             *struct {
		Key    *string `json:"key,omitempty"`
		Name   *string `json:"name,omitempty"`
		NodeId *string `json:"node_id,omitempty"`
		SpdxId *string `json:"spdx_id,omitempty"`
		Url    *string `json:"url,omitempty"`
	} `json:"license"`
	MergesUrl        string  `json:"merges_url"`
	MilestonesUrl    string  `json:"milestones_url"`
	MirrorUrl        *string `json:"mirror_url"`
	Name             string  `json:"name"`
	NetworkCount     *int    `json:"network_count,omitempty"`
	NodeId           string  `json:"node_id"`
	NotificationsUrl string  `json:"notifications_url"`
	OpenIssues       *int    `json:"open_issues,omitempty"`
	OpenIssuesCount  *int    `json:"open_issues_count,omitempty"`

	// Simple User
	Owner       SimpleUser `json:"owner"`
	Permissions *struct {
		Admin    *bool `json:"admin,omitempty"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     *bool `json:"pull,omitempty"`
		Push     *bool `json:"push,omitempty"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`
	Private          bool       `json:"private"`
	PullsUrl         string     `json:"pulls_url"`
	PushedAt         *time.Time `json:"pushed_at"`
	ReleasesUrl      string     `json:"releases_url"`
	RoleName         *string    `json:"role_name,omitempty"`
	Size             *int       `json:"size,omitempty"`
	SshUrl           *string    `json:"ssh_url,omitempty"`
	StargazersCount  *int       `json:"stargazers_count,omitempty"`
	StargazersUrl    string     `json:"stargazers_url"`
	StatusesUrl      string     `json:"statuses_url"`
	SubscribersCount *int       `json:"subscribers_count,omitempty"`
	SubscribersUrl   string     `json:"subscribers_url"`
	SubscriptionUrl  string     `json:"subscription_url"`
	SvnUrl           *string    `json:"svn_url,omitempty"`
	TagsUrl          string     `json:"tags_url"`
	TeamsUrl         string     `json:"teams_url"`
	TempCloneToken   *string    `json:"temp_clone_token,omitempty"`

	// A git repository
	TemplateRepository *NullableRepository `json:"template_repository"`
	Topics             *[]string           `json:"topics,omitempty"`
	TreesUrl           string              `json:"trees_url"`
	UpdatedAt          *time.Time          `json:"updated_at"`
	Url                string              `json:"url"`
	Visibility         *string             `json:"visibility,omitempty"`
	Watchers           *int                `json:"watchers,omitempty"`
	WatchersCount      *int                `json:"watchers_count,omitempty"`
}

// A git repository
type NullableRepository struct {
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow forking this repo
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool  `json:"allow_squash_merge,omitempty"`
	ArchiveUrl       string `json:"archive_url"`

	// Whether the repository is archived.
	Archived         bool       `json:"archived"`
	AssigneesUrl     string     `json:"assignees_url"`
	BlobsUrl         string     `json:"blobs_url"`
	BranchesUrl      string     `json:"branches_url"`
	CloneUrl         string     `json:"clone_url"`
	CollaboratorsUrl string     `json:"collaborators_url"`
	CommentsUrl      string     `json:"comments_url"`
	CommitsUrl       string     `json:"commits_url"`
	CompareUrl       string     `json:"compare_url"`
	ContentsUrl      string     `json:"contents_url"`
	ContributorsUrl  string     `json:"contributors_url"`
	CreatedAt        *time.Time `json:"created_at"`

	// The default branch of the repository.
	DefaultBranch string `json:"default_branch"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool   `json:"delete_branch_on_merge,omitempty"`
	DeploymentsUrl      string  `json:"deployments_url"`
	Description         *string `json:"description"`

	// Returns whether or not this repository disabled.
	Disabled      bool   `json:"disabled"`
	DownloadsUrl  string `json:"downloads_url"`
	EventsUrl     string `json:"events_url"`
	Fork          bool   `json:"fork"`
	Forks         int    `json:"forks"`
	ForksCount    int    `json:"forks_count"`
	ForksUrl      string `json:"forks_url"`
	FullName      string `json:"full_name"`
	GitCommitsUrl string `json:"git_commits_url"`
	GitRefsUrl    string `json:"git_refs_url"`
	GitTagsUrl    string `json:"git_tags_url"`
	GitUrl        string `json:"git_url"`

	// Whether downloads are enabled.
	HasDownloads bool `json:"has_downloads"`

	// Whether issues are enabled.
	HasIssues bool `json:"has_issues"`
	HasPages  bool `json:"has_pages"`

	// Whether projects are enabled.
	HasProjects bool `json:"has_projects"`

	// Whether the wiki is enabled.
	HasWiki  bool    `json:"has_wiki"`
	Homepage *string `json:"homepage"`
	HooksUrl string  `json:"hooks_url"`
	HtmlUrl  string  `json:"html_url"`

	// Unique identifier of the repository
	Id int `json:"id"`

	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate      *bool   `json:"is_template,omitempty"`
	IssueCommentUrl string  `json:"issue_comment_url"`
	IssueEventsUrl  string  `json:"issue_events_url"`
	IssuesUrl       string  `json:"issues_url"`
	KeysUrl         string  `json:"keys_url"`
	LabelsUrl       string  `json:"labels_url"`
	Language        *string `json:"language"`
	LanguagesUrl    string  `json:"languages_url"`

	// License Simple
	License       *NullableLicenseSimple `json:"license"`
	MasterBranch  *string                `json:"master_branch,omitempty"`
	MergesUrl     string                 `json:"merges_url"`
	MilestonesUrl string                 `json:"milestones_url"`
	MirrorUrl     *string                `json:"mirror_url"`

	// The name of the repository.
	Name             string `json:"name"`
	NetworkCount     *int   `json:"network_count,omitempty"`
	NodeId           string `json:"node_id"`
	NotificationsUrl string `json:"notifications_url"`
	OpenIssues       int    `json:"open_issues"`
	OpenIssuesCount  int    `json:"open_issues_count"`

	// Simple User
	Organization *NullableSimpleUser `json:"organization"`

	// Simple User
	Owner       SimpleUser `json:"owner"`
	Permissions *struct {
		Admin    bool  `json:"admin"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     bool  `json:"pull"`
		Push     bool  `json:"push"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`

	// Whether the repository is private or public.
	Private            bool       `json:"private"`
	PullsUrl           string     `json:"pulls_url"`
	PushedAt           *time.Time `json:"pushed_at"`
	ReleasesUrl        string     `json:"releases_url"`
	Size               int        `json:"size"`
	SshUrl             string     `json:"ssh_url"`
	StargazersCount    int        `json:"stargazers_count"`
	StargazersUrl      string     `json:"stargazers_url"`
	StarredAt          *string    `json:"starred_at,omitempty"`
	StatusesUrl        string     `json:"statuses_url"`
	SubscribersCount   *int       `json:"subscribers_count,omitempty"`
	SubscribersUrl     string     `json:"subscribers_url"`
	SubscriptionUrl    string     `json:"subscription_url"`
	SvnUrl             string     `json:"svn_url"`
	TagsUrl            string     `json:"tags_url"`
	TeamsUrl           string     `json:"teams_url"`
	TempCloneToken     *string    `json:"temp_clone_token,omitempty"`
	TemplateRepository *struct {
		AllowAutoMerge      *bool   `json:"allow_auto_merge,omitempty"`
		AllowMergeCommit    *bool   `json:"allow_merge_commit,omitempty"`
		AllowRebaseMerge    *bool   `json:"allow_rebase_merge,omitempty"`
		AllowSquashMerge    *bool   `json:"allow_squash_merge,omitempty"`
		AllowUpdateBranch   *bool   `json:"allow_update_branch,omitempty"`
		ArchiveUrl          *string `json:"archive_url,omitempty"`
		Archived            *bool   `json:"archived,omitempty"`
		AssigneesUrl        *string `json:"assignees_url,omitempty"`
		BlobsUrl            *string `json:"blobs_url,omitempty"`
		BranchesUrl         *string `json:"branches_url,omitempty"`
		CloneUrl            *string `json:"clone_url,omitempty"`
		CollaboratorsUrl    *string `json:"collaborators_url,omitempty"`
		CommentsUrl         *string `json:"comments_url,omitempty"`
		CommitsUrl          *string `json:"commits_url,omitempty"`
		CompareUrl          *string `json:"compare_url,omitempty"`
		ContentsUrl         *string `json:"contents_url,omitempty"`
		ContributorsUrl     *string `json:"contributors_url,omitempty"`
		CreatedAt           *string `json:"created_at,omitempty"`
		DefaultBranch       *string `json:"default_branch,omitempty"`
		DeleteBranchOnMerge *bool   `json:"delete_branch_on_merge,omitempty"`
		DeploymentsUrl      *string `json:"deployments_url,omitempty"`
		Description         *string `json:"description,omitempty"`
		Disabled            *bool   `json:"disabled,omitempty"`
		DownloadsUrl        *string `json:"downloads_url,omitempty"`
		EventsUrl           *string `json:"events_url,omitempty"`
		Fork                *bool   `json:"fork,omitempty"`
		ForksCount          *int    `json:"forks_count,omitempty"`
		ForksUrl            *string `json:"forks_url,omitempty"`
		FullName            *string `json:"full_name,omitempty"`
		GitCommitsUrl       *string `json:"git_commits_url,omitempty"`
		GitRefsUrl          *string `json:"git_refs_url,omitempty"`
		GitTagsUrl          *string `json:"git_tags_url,omitempty"`
		GitUrl              *string `json:"git_url,omitempty"`
		HasDownloads        *bool   `json:"has_downloads,omitempty"`
		HasIssues           *bool   `json:"has_issues,omitempty"`
		HasPages            *bool   `json:"has_pages,omitempty"`
		HasProjects         *bool   `json:"has_projects,omitempty"`
		HasWiki             *bool   `json:"has_wiki,omitempty"`
		Homepage            *string `json:"homepage,omitempty"`
		HooksUrl            *string `json:"hooks_url,omitempty"`
		HtmlUrl             *string `json:"html_url,omitempty"`
		Id                  *int    `json:"id,omitempty"`
		IsTemplate          *bool   `json:"is_template,omitempty"`
		IssueCommentUrl     *string `json:"issue_comment_url,omitempty"`
		IssueEventsUrl      *string `json:"issue_events_url,omitempty"`
		IssuesUrl           *string `json:"issues_url,omitempty"`
		KeysUrl             *string `json:"keys_url,omitempty"`
		LabelsUrl           *string `json:"labels_url,omitempty"`
		Language            *string `json:"language,omitempty"`
		LanguagesUrl        *string `json:"languages_url,omitempty"`
		MergesUrl           *string `json:"merges_url,omitempty"`
		MilestonesUrl       *string `json:"milestones_url,omitempty"`
		MirrorUrl           *string `json:"mirror_url,omitempty"`
		Name                *string `json:"name,omitempty"`
		NetworkCount        *int    `json:"network_count,omitempty"`
		NodeId              *string `json:"node_id,omitempty"`
		NotificationsUrl    *string `json:"notifications_url,omitempty"`
		OpenIssuesCount     *int    `json:"open_issues_count,omitempty"`
		Owner               *struct {
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			EventsUrl         *string `json:"events_url,omitempty"`
			FollowersUrl      *string `json:"followers_url,omitempty"`
			FollowingUrl      *string `json:"following_url,omitempty"`
			GistsUrl          *string `json:"gists_url,omitempty"`
			GravatarId        *string `json:"gravatar_id,omitempty"`
			HtmlUrl           *string `json:"html_url,omitempty"`
			Id                *int    `json:"id,omitempty"`
			Login             *string `json:"login,omitempty"`
			NodeId            *string `json:"node_id,omitempty"`
			OrganizationsUrl  *string `json:"organizations_url,omitempty"`
			ReceivedEventsUrl *string `json:"received_events_url,omitempty"`
			ReposUrl          *string `json:"repos_url,omitempty"`
			SiteAdmin         *bool   `json:"site_admin,omitempty"`
			StarredUrl        *string `json:"starred_url,omitempty"`
			SubscriptionsUrl  *string `json:"subscriptions_url,omitempty"`
			Type              *string `json:"type,omitempty"`
			Url               *string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions *struct {
			Admin    *bool `json:"admin,omitempty"`
			Maintain *bool `json:"maintain,omitempty"`
			Pull     *bool `json:"pull,omitempty"`
			Push     *bool `json:"push,omitempty"`
			Triage   *bool `json:"triage,omitempty"`
		} `json:"permissions,omitempty"`
		Private          *bool     `json:"private,omitempty"`
		PullsUrl         *string   `json:"pulls_url,omitempty"`
		PushedAt         *string   `json:"pushed_at,omitempty"`
		ReleasesUrl      *string   `json:"releases_url,omitempty"`
		Size             *int      `json:"size,omitempty"`
		SshUrl           *string   `json:"ssh_url,omitempty"`
		StargazersCount  *int      `json:"stargazers_count,omitempty"`
		StargazersUrl    *string   `json:"stargazers_url,omitempty"`
		StatusesUrl      *string   `json:"statuses_url,omitempty"`
		SubscribersCount *int      `json:"subscribers_count,omitempty"`
		SubscribersUrl   *string   `json:"subscribers_url,omitempty"`
		SubscriptionUrl  *string   `json:"subscription_url,omitempty"`
		SvnUrl           *string   `json:"svn_url,omitempty"`
		TagsUrl          *string   `json:"tags_url,omitempty"`
		TeamsUrl         *string   `json:"teams_url,omitempty"`
		TempCloneToken   *string   `json:"temp_clone_token,omitempty"`
		Topics           *[]string `json:"topics,omitempty"`
		TreesUrl         *string   `json:"trees_url,omitempty"`
		UpdatedAt        *string   `json:"updated_at,omitempty"`
		Url              *string   `json:"url,omitempty"`
		Visibility       *string   `json:"visibility,omitempty"`
		WatchersCount    *int      `json:"watchers_count,omitempty"`
	} `json:"template_repository"`
	Topics    *[]string  `json:"topics,omitempty"`
	TreesUrl  string     `json:"trees_url"`
	UpdatedAt *time.Time `json:"updated_at"`
	Url       string     `json:"url"`

	// The repository visibility: public, private, or internal.
	Visibility    *string `json:"visibility,omitempty"`
	Watchers      int     `json:"watchers"`
	WatchersCount int     `json:"watchers_count"`
}

// NullableScopedInstallation defines model for nullable-scoped-installation.
type NullableScopedInstallation struct {
	// Simple User
	Account                SimpleUser `json:"account"`
	HasMultipleSingleFiles *bool      `json:"has_multiple_single_files,omitempty"`

	// The permissions granted to the user-to-server access token.
	Permissions     AppPermissions `json:"permissions"`
	RepositoriesUrl string         `json:"repositories_url"`

	// Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection NullableScopedInstallationRepositorySelection `json:"repository_selection"`
	SingleFileName      *string                                       `json:"single_file_name"`
	SingleFilePaths     *[]string                                     `json:"single_file_paths,omitempty"`
}

// Describe whether all repositories have been selected or there's a selection involved
type NullableScopedInstallationRepositorySelection string

// Simple Commit
type NullableSimpleCommit struct {
	Author *struct {
		Email string `json:"email"`
		Name  string `json:"name"`
	} `json:"author"`
	Committer *struct {
		Email string `json:"email"`
		Name  string `json:"name"`
	} `json:"committer"`
	Id        string    `json:"id"`
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
	TreeId    string    `json:"tree_id"`
}

// Simple User
type NullableSimpleUser struct {
	AvatarUrl         string  `json:"avatar_url"`
	Email             *string `json:"email"`
	EventsUrl         string  `json:"events_url"`
	FollowersUrl      string  `json:"followers_url"`
	FollowingUrl      string  `json:"following_url"`
	GistsUrl          string  `json:"gists_url"`
	GravatarId        *string `json:"gravatar_id"`
	HtmlUrl           string  `json:"html_url"`
	Id                int     `json:"id"`
	Login             string  `json:"login"`
	Name              *string `json:"name"`
	NodeId            string  `json:"node_id"`
	OrganizationsUrl  string  `json:"organizations_url"`
	ReceivedEventsUrl string  `json:"received_events_url"`
	ReposUrl          string  `json:"repos_url"`
	SiteAdmin         bool    `json:"site_admin"`
	StarredAt         *string `json:"starred_at,omitempty"`
	StarredUrl        string  `json:"starred_url"`
	SubscriptionsUrl  string  `json:"subscriptions_url"`
	Type              string  `json:"type"`
	Url               string  `json:"url"`
}

// Groups of organization members that gives permissions on specified repositories.
type NullableTeamSimple struct {
	// Description of the team
	Description *string `json:"description"`
	HtmlUrl     string  `json:"html_url"`

	// Unique identifier of the team
	Id int `json:"id"`

	// Distinguished Name (DN) that team maps to within LDAP environment
	LdapDn     *string `json:"ldap_dn,omitempty"`
	MembersUrl string  `json:"members_url"`

	// Name of the team
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// Permission that the team will have for its repositories
	Permission string `json:"permission"`

	// The level of privacy this team should have
	Privacy         *string `json:"privacy,omitempty"`
	RepositoriesUrl string  `json:"repositories_url"`
	Slug            string  `json:"slug"`

	// URL for the team
	Url string `json:"url"`
}

// Org Hook
type OrgHook struct {
	Active bool `json:"active"`
	Config struct {
		ContentType *string `json:"content_type,omitempty"`
		InsecureSsl *string `json:"insecure_ssl,omitempty"`
		Secret      *string `json:"secret,omitempty"`
		Url         *string `json:"url,omitempty"`
	} `json:"config"`
	CreatedAt     time.Time `json:"created_at"`
	DeliveriesUrl *string   `json:"deliveries_url,omitempty"`
	Events        []string  `json:"events"`
	Id            int       `json:"id"`
	Name          string    `json:"name"`
	PingUrl       string    `json:"ping_url"`
	Type          string    `json:"type"`
	UpdatedAt     time.Time `json:"updated_at"`
	Url           string    `json:"url"`
}

// Org Membership
type OrgMembership struct {
	// Organization Simple
	Organization    OrganizationSimple `json:"organization"`
	OrganizationUrl string             `json:"organization_url"`
	Permissions     *struct {
		CanCreateRepository bool `json:"can_create_repository"`
	} `json:"permissions,omitempty"`

	// The user's membership type in the organization.
	Role OrgMembershipRole `json:"role"`

	// The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
	State OrgMembershipState `json:"state"`
	Url   string             `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// The user's membership type in the organization.
type OrgMembershipRole string

// The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
type OrgMembershipState string

// Secrets for GitHub Actions for an organization.
type OrganizationActionsSecret struct {
	CreatedAt time.Time `json:"created_at"`

	// The name of the secret.
	Name                    string    `json:"name"`
	SelectedRepositoriesUrl *string   `json:"selected_repositories_url,omitempty"`
	UpdatedAt               time.Time `json:"updated_at"`

	// Visibility of a secret
	Visibility OrganizationActionsSecretVisibility `json:"visibility"`
}

// Visibility of a secret
type OrganizationActionsSecretVisibility string

// Custom repository roles created by organization administrators
type OrganizationCustomRepositoryRole struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// Secrets for GitHub Dependabot for an organization.
type OrganizationDependabotSecret struct {
	CreatedAt time.Time `json:"created_at"`

	// The name of the secret.
	Name                    string    `json:"name"`
	SelectedRepositoriesUrl *string   `json:"selected_repositories_url,omitempty"`
	UpdatedAt               time.Time `json:"updated_at"`

	// Visibility of a secret
	Visibility OrganizationDependabotSecretVisibility `json:"visibility"`
}

// Visibility of a secret
type OrganizationDependabotSecretVisibility string

// Organization Full
type OrganizationFull struct {
	AvatarUrl                            string               `json:"avatar_url"`
	BillingEmail                         *openapi_types.Email `json:"billing_email"`
	Blog                                 *string              `json:"blog,omitempty"`
	Collaborators                        *int                 `json:"collaborators"`
	Company                              *string              `json:"company,omitempty"`
	CreatedAt                            time.Time            `json:"created_at"`
	DefaultRepositoryPermission          *string              `json:"default_repository_permission"`
	Description                          *string              `json:"description"`
	DiskUsage                            *int                 `json:"disk_usage"`
	Email                                *openapi_types.Email `json:"email,omitempty"`
	EventsUrl                            string               `json:"events_url"`
	Followers                            int                  `json:"followers"`
	Following                            int                  `json:"following"`
	HasOrganizationProjects              bool                 `json:"has_organization_projects"`
	HasRepositoryProjects                bool                 `json:"has_repository_projects"`
	HooksUrl                             string               `json:"hooks_url"`
	HtmlUrl                              string               `json:"html_url"`
	Id                                   int                  `json:"id"`
	IsVerified                           *bool                `json:"is_verified,omitempty"`
	IssuesUrl                            string               `json:"issues_url"`
	Location                             *string              `json:"location,omitempty"`
	Login                                string               `json:"login"`
	MembersAllowedRepositoryCreationType *string              `json:"members_allowed_repository_creation_type,omitempty"`
	MembersCanCreateInternalRepositories *bool                `json:"members_can_create_internal_repositories,omitempty"`
	MembersCanCreatePages                *bool                `json:"members_can_create_pages,omitempty"`
	MembersCanCreatePrivatePages         *bool                `json:"members_can_create_private_pages,omitempty"`
	MembersCanCreatePrivateRepositories  *bool                `json:"members_can_create_private_repositories,omitempty"`
	MembersCanCreatePublicPages          *bool                `json:"members_can_create_public_pages,omitempty"`
	MembersCanCreatePublicRepositories   *bool                `json:"members_can_create_public_repositories,omitempty"`
	MembersCanCreateRepositories         *bool                `json:"members_can_create_repositories"`
	MembersCanForkPrivateRepositories    *bool                `json:"members_can_fork_private_repositories"`
	MembersUrl                           string               `json:"members_url"`
	Name                                 *string              `json:"name,omitempty"`
	NodeId                               string               `json:"node_id"`
	OwnedPrivateRepos                    *int                 `json:"owned_private_repos,omitempty"`
	Plan                                 *struct {
		FilledSeats  *int   `json:"filled_seats,omitempty"`
		Name         string `json:"name"`
		PrivateRepos int    `json:"private_repos"`
		Seats        *int   `json:"seats,omitempty"`
		Space        int    `json:"space"`
	} `json:"plan,omitempty"`
	PrivateGists                *int      `json:"private_gists"`
	PublicGists                 int       `json:"public_gists"`
	PublicMembersUrl            string    `json:"public_members_url"`
	PublicRepos                 int       `json:"public_repos"`
	ReposUrl                    string    `json:"repos_url"`
	TotalPrivateRepos           *int      `json:"total_private_repos,omitempty"`
	TwitterUsername             *string   `json:"twitter_username"`
	TwoFactorRequirementEnabled *bool     `json:"two_factor_requirement_enabled"`
	Type                        string    `json:"type"`
	UpdatedAt                   time.Time `json:"updated_at"`
	Url                         string    `json:"url"`
}

// Organization Invitation
type OrganizationInvitation struct {
	CreatedAt          string  `json:"created_at"`
	Email              *string `json:"email"`
	FailedAt           *string `json:"failed_at"`
	FailedReason       *string `json:"failed_reason"`
	Id                 int     `json:"id"`
	InvitationTeamsUrl string  `json:"invitation_teams_url"`

	// Simple User
	Inviter   SimpleUser `json:"inviter"`
	Login     *string    `json:"login"`
	NodeId    string     `json:"node_id"`
	Role      string     `json:"role"`
	TeamCount int        `json:"team_count"`
}

// OrganizationSecretScanningAlert defines model for organization-secret-scanning-alert.
type OrganizationSecretScanningAlert struct {
	// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	CreatedAt *AlertCreatedAt `json:"created_at,omitempty"`

	// The GitHub URL of the alert resource.
	HtmlUrl *AlertHtmlUrl `json:"html_url,omitempty"`

	// The REST API URL of the code locations for this alert.
	LocationsUrl *string `json:"locations_url,omitempty"`

	// The security alert number.
	Number *AlertNumber `json:"number,omitempty"`

	// Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// **Required when the `state` is `resolved`.** The reason for resolving the alert.
	Resolution *SecretScanningAlertResolution `json:"resolution"`

	// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	ResolvedAt *time.Time `json:"resolved_at"`

	// Simple User
	ResolvedBy *NullableSimpleUser `json:"resolved_by"`

	// The secret that was detected.
	Secret *string `json:"secret,omitempty"`

	// The type of secret that secret scanning detected.
	SecretType *string `json:"secret_type,omitempty"`

	// User-friendly name for the detected secret, matching the `secret_type`.
	// For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
	SecretTypeDisplayName *string `json:"secret_type_display_name,omitempty"`

	// Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
	State *SecretScanningAlertState `json:"state,omitempty"`

	// The REST API URL of the alert resource.
	Url *AlertUrl `json:"url,omitempty"`
}

// Organization Simple
type OrganizationSimple struct {
	AvatarUrl        string  `json:"avatar_url"`
	Description      *string `json:"description"`
	EventsUrl        string  `json:"events_url"`
	HooksUrl         string  `json:"hooks_url"`
	Id               int     `json:"id"`
	IssuesUrl        string  `json:"issues_url"`
	Login            string  `json:"login"`
	MembersUrl       string  `json:"members_url"`
	NodeId           string  `json:"node_id"`
	PublicMembersUrl string  `json:"public_members_url"`
	ReposUrl         string  `json:"repos_url"`
	Url              string  `json:"url"`
}

// A software package
type Package struct {
	CreatedAt time.Time `json:"created_at"`
	HtmlUrl   string    `json:"html_url"`

	// Unique identifier of the package.
	Id int `json:"id"`

	// The name of the package.
	Name string `json:"name"`

	// Simple User
	Owner       *NullableSimpleUser `json:"owner"`
	PackageType PackagePackageType  `json:"package_type"`

	// Minimal Repository
	Repository *NullableMinimalRepository `json:"repository"`
	UpdatedAt  time.Time                  `json:"updated_at"`
	Url        string                     `json:"url"`

	// The number of versions of the package.
	VersionCount int               `json:"version_count"`
	Visibility   PackageVisibility `json:"visibility"`
}

// PackagePackageType defines model for Package.PackageType.
type PackagePackageType string

// PackageVisibility defines model for Package.Visibility.
type PackageVisibility string

// A version of a software package
type PackageVersion struct {
	CreatedAt   time.Time  `json:"created_at"`
	DeletedAt   *time.Time `json:"deleted_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	HtmlUrl     *string    `json:"html_url,omitempty"`

	// Unique identifier of the package version.
	Id       int     `json:"id"`
	License  *string `json:"license,omitempty"`
	Metadata *struct {
		Container *struct {
			Tags []string `json:"tags"`
		} `json:"container,omitempty"`
		Docker *struct {
			Tag *[]string `json:"tag,omitempty"`
		} `json:"docker,omitempty"`
		PackageType PackageVersionMetadataPackageType `json:"package_type"`
	} `json:"metadata,omitempty"`

	// The name of the package version.
	Name           string    `json:"name"`
	PackageHtmlUrl string    `json:"package_html_url"`
	UpdatedAt      time.Time `json:"updated_at"`
	Url            string    `json:"url"`
}

// PackageVersionMetadataPackageType defines model for PackageVersion.Metadata.PackageType.
type PackageVersionMetadataPackageType string

// PackagesBillingUsage defines model for packages-billing-usage.
type PackagesBillingUsage struct {
	// Free storage space (GB) for GitHub Packages.
	IncludedGigabytesBandwidth int `json:"included_gigabytes_bandwidth"`

	// Sum of the free and paid storage space (GB) for GitHuub Packages.
	TotalGigabytesBandwidthUsed int `json:"total_gigabytes_bandwidth_used"`

	// Total paid storage space (GB) for GitHuub Packages.
	TotalPaidGigabytesBandwidthUsed int `json:"total_paid_gigabytes_bandwidth_used"`
}

// The configuration for GitHub Pages for a repository.
type Page struct {
	// The process in which the Page will be built.
	BuildType *PageBuildType `json:"build_type"`

	// The Pages site's custom domain
	Cname *string `json:"cname"`

	// Whether the Page has a custom 404 page.
	Custom404 bool `json:"custom_404"`

	// The web address the Page can be accessed from.
	HtmlUrl          *string                `json:"html_url,omitempty"`
	HttpsCertificate *PagesHttpsCertificate `json:"https_certificate,omitempty"`

	// Whether https is enabled on the domain
	HttpsEnforced *bool `json:"https_enforced,omitempty"`

	// The timestamp when a pending domain becomes unverified.
	PendingDomainUnverifiedAt *time.Time `json:"pending_domain_unverified_at"`

	// The state if the domain is verified
	ProtectedDomainState *PageProtectedDomainState `json:"protected_domain_state"`

	// Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
	Public bool             `json:"public"`
	Source *PagesSourceHash `json:"source,omitempty"`

	// The status of the most recent build of the Page.
	Status *PageStatus `json:"status"`

	// The API address for accessing this Page resource.
	Url string `json:"url"`
}

// The process in which the Page will be built.
type PageBuildType string

// The state if the domain is verified
type PageProtectedDomainState string

// The status of the most recent build of the Page.
type PageStatus string

// Page Build
type PageBuild struct {
	Commit    string    `json:"commit"`
	CreatedAt time.Time `json:"created_at"`
	Duration  int       `json:"duration"`
	Error     struct {
		Message *string `json:"message"`
	} `json:"error"`

	// Simple User
	Pusher    *NullableSimpleUser `json:"pusher"`
	Status    string              `json:"status"`
	UpdatedAt time.Time           `json:"updated_at"`
	Url       string              `json:"url"`
}

// Page Build Status
type PageBuildStatus struct {
	Status string `json:"status"`
	Url    string `json:"url"`
}

// Pages Health Check Status
type PagesHealthCheck struct {
	AltDomain *struct {
		CaaError                      *string `json:"caa_error"`
		DnsResolves                   *bool   `json:"dns_resolves,omitempty"`
		EnforcesHttps                 *bool   `json:"enforces_https,omitempty"`
		HasCnameRecord                *bool   `json:"has_cname_record"`
		HasMxRecordsPresent           *bool   `json:"has_mx_records_present"`
		Host                          *string `json:"host,omitempty"`
		HttpsError                    *string `json:"https_error"`
		IsARecord                     *bool   `json:"is_a_record"`
		IsApexDomain                  *bool   `json:"is_apex_domain,omitempty"`
		IsCloudflareIp                *bool   `json:"is_cloudflare_ip"`
		IsCnameToFastly               *bool   `json:"is_cname_to_fastly"`
		IsCnameToGithubUserDomain     *bool   `json:"is_cname_to_github_user_domain"`
		IsCnameToPagesDotGithubDotCom *bool   `json:"is_cname_to_pages_dot_github_dot_com"`
		IsFastlyIp                    *bool   `json:"is_fastly_ip"`
		IsHttpsEligible               *bool   `json:"is_https_eligible"`
		IsNonGithubPagesIpPresent     *bool   `json:"is_non_github_pages_ip_present"`
		IsOldIpAddress                *bool   `json:"is_old_ip_address"`
		IsPagesDomain                 *bool   `json:"is_pages_domain,omitempty"`
		IsPointedToGithubPagesIp      *bool   `json:"is_pointed_to_github_pages_ip"`
		IsProxied                     *bool   `json:"is_proxied"`
		IsServedByPages               *bool   `json:"is_served_by_pages"`
		IsValid                       *bool   `json:"is_valid,omitempty"`
		IsValidDomain                 *bool   `json:"is_valid_domain,omitempty"`
		Nameservers                   *string `json:"nameservers,omitempty"`
		Reason                        *string `json:"reason"`
		RespondsToHttps               *bool   `json:"responds_to_https,omitempty"`
		ShouldBeARecord               *bool   `json:"should_be_a_record"`
		Uri                           *string `json:"uri,omitempty"`
	} `json:"alt_domain"`
	Domain *struct {
		CaaError                      *string `json:"caa_error"`
		DnsResolves                   *bool   `json:"dns_resolves,omitempty"`
		EnforcesHttps                 *bool   `json:"enforces_https,omitempty"`
		HasCnameRecord                *bool   `json:"has_cname_record"`
		HasMxRecordsPresent           *bool   `json:"has_mx_records_present"`
		Host                          *string `json:"host,omitempty"`
		HttpsError                    *string `json:"https_error"`
		IsARecord                     *bool   `json:"is_a_record"`
		IsApexDomain                  *bool   `json:"is_apex_domain,omitempty"`
		IsCloudflareIp                *bool   `json:"is_cloudflare_ip"`
		IsCnameToFastly               *bool   `json:"is_cname_to_fastly"`
		IsCnameToGithubUserDomain     *bool   `json:"is_cname_to_github_user_domain"`
		IsCnameToPagesDotGithubDotCom *bool   `json:"is_cname_to_pages_dot_github_dot_com"`
		IsFastlyIp                    *bool   `json:"is_fastly_ip"`
		IsHttpsEligible               *bool   `json:"is_https_eligible"`
		IsNonGithubPagesIpPresent     *bool   `json:"is_non_github_pages_ip_present"`
		IsOldIpAddress                *bool   `json:"is_old_ip_address"`
		IsPagesDomain                 *bool   `json:"is_pages_domain,omitempty"`
		IsPointedToGithubPagesIp      *bool   `json:"is_pointed_to_github_pages_ip"`
		IsProxied                     *bool   `json:"is_proxied"`
		IsServedByPages               *bool   `json:"is_served_by_pages"`
		IsValid                       *bool   `json:"is_valid,omitempty"`
		IsValidDomain                 *bool   `json:"is_valid_domain,omitempty"`
		Nameservers                   *string `json:"nameservers,omitempty"`
		Reason                        *string `json:"reason"`
		RespondsToHttps               *bool   `json:"responds_to_https,omitempty"`
		ShouldBeARecord               *bool   `json:"should_be_a_record"`
		Uri                           *string `json:"uri,omitempty"`
	} `json:"domain,omitempty"`
}

// PagesHttpsCertificate defines model for pages-https-certificate.
type PagesHttpsCertificate struct {
	Description string `json:"description"`

	// Array of the domain set and its alternate name (if it is configured)
	Domains   []string                   `json:"domains"`
	ExpiresAt *openapi_types.Date        `json:"expires_at,omitempty"`
	State     PagesHttpsCertificateState `json:"state"`
}

// PagesHttpsCertificateState defines model for PagesHttpsCertificate.State.
type PagesHttpsCertificateState string

// PagesSourceHash defines model for pages-source-hash.
type PagesSourceHash struct {
	Branch string `json:"branch"`
	Path   string `json:"path"`
}

// ParticipationStats defines model for participation-stats.
type ParticipationStats struct {
	All   []int `json:"all"`
	Owner []int `json:"owner"`
}

// Details of a deployment that is waiting for protection rules to pass
type PendingDeployment struct {
	// Whether the currently authenticated user can approve the deployment
	CurrentUserCanApprove bool `json:"current_user_can_approve"`
	Environment           struct {
		HtmlUrl *string `json:"html_url,omitempty"`

		// The id of the environment.
		Id *int `json:"id,omitempty"`

		// The name of the environment.
		Name   *string `json:"name,omitempty"`
		NodeId *string `json:"node_id,omitempty"`
		Url    *string `json:"url,omitempty"`
	} `json:"environment"`

	// The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
	Reviewers []struct {
		Reviewer *interface{} `json:"reviewer,omitempty"`

		// The type of reviewer.
		Type *DeploymentReviewerType `json:"type,omitempty"`
	} `json:"reviewers"`

	// The set duration of the wait timer
	WaitTimer int `json:"wait_timer"`

	// The time that the wait timer began.
	WaitTimerStartedAt *time.Time `json:"wait_timer_started_at"`
}

// Porter Author
type PorterAuthor struct {
	Email      string `json:"email"`
	Id         int    `json:"id"`
	ImportUrl  string `json:"import_url"`
	Name       string `json:"name"`
	RemoteId   string `json:"remote_id"`
	RemoteName string `json:"remote_name"`
	Url        string `json:"url"`
}

// Porter Large File
type PorterLargeFile struct {
	Oid     string `json:"oid"`
	Path    string `json:"path"`
	RefName string `json:"ref_name"`
	Size    int    `json:"size"`
}

// Private User
type PrivateUser struct {
	AvatarUrl         string               `json:"avatar_url"`
	Bio               *string              `json:"bio"`
	Blog              *string              `json:"blog"`
	BusinessPlus      *bool                `json:"business_plus,omitempty"`
	Collaborators     int                  `json:"collaborators"`
	Company           *string              `json:"company"`
	CreatedAt         time.Time            `json:"created_at"`
	DiskUsage         int                  `json:"disk_usage"`
	Email             *openapi_types.Email `json:"email"`
	EventsUrl         string               `json:"events_url"`
	Followers         int                  `json:"followers"`
	FollowersUrl      string               `json:"followers_url"`
	Following         int                  `json:"following"`
	FollowingUrl      string               `json:"following_url"`
	GistsUrl          string               `json:"gists_url"`
	GravatarId        *string              `json:"gravatar_id"`
	Hireable          *bool                `json:"hireable"`
	HtmlUrl           string               `json:"html_url"`
	Id                int                  `json:"id"`
	LdapDn            *string              `json:"ldap_dn,omitempty"`
	Location          *string              `json:"location"`
	Login             string               `json:"login"`
	Name              *string              `json:"name"`
	NodeId            string               `json:"node_id"`
	OrganizationsUrl  string               `json:"organizations_url"`
	OwnedPrivateRepos int                  `json:"owned_private_repos"`
	Plan              *struct {
		Collaborators int    `json:"collaborators"`
		Name          string `json:"name"`
		PrivateRepos  int    `json:"private_repos"`
		Space         int    `json:"space"`
	} `json:"plan,omitempty"`
	PrivateGists            int        `json:"private_gists"`
	PublicGists             int        `json:"public_gists"`
	PublicRepos             int        `json:"public_repos"`
	ReceivedEventsUrl       string     `json:"received_events_url"`
	ReposUrl                string     `json:"repos_url"`
	SiteAdmin               bool       `json:"site_admin"`
	StarredUrl              string     `json:"starred_url"`
	SubscriptionsUrl        string     `json:"subscriptions_url"`
	SuspendedAt             *time.Time `json:"suspended_at"`
	TotalPrivateRepos       int        `json:"total_private_repos"`
	TwitterUsername         *string    `json:"twitter_username"`
	TwoFactorAuthentication bool       `json:"two_factor_authentication"`
	Type                    string     `json:"type"`
	UpdatedAt               time.Time  `json:"updated_at"`
	Url                     string     `json:"url"`
}

// Projects are a way to organize columns and cards of work.
type Project struct {
	// Body of the project
	Body       *string   `json:"body"`
	ColumnsUrl string    `json:"columns_url"`
	CreatedAt  time.Time `json:"created_at"`

	// Simple User
	Creator *NullableSimpleUser `json:"creator"`
	HtmlUrl string              `json:"html_url"`
	Id      int                 `json:"id"`

	// Name of the project
	Name   string `json:"name"`
	NodeId string `json:"node_id"`
	Number int    `json:"number"`

	// The baseline permission that all organization members have on this project. Only present if owner is an organization.
	OrganizationPermission *ProjectOrganizationPermission `json:"organization_permission,omitempty"`
	OwnerUrl               string                         `json:"owner_url"`

	// Whether or not this project can be seen by everyone. Only present if owner is an organization.
	Private *bool `json:"private,omitempty"`

	// State of the project; either 'open' or 'closed'
	State     string    `json:"state"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// The baseline permission that all organization members have on this project. Only present if owner is an organization.
type ProjectOrganizationPermission string

// Project cards represent a scope of work.
type ProjectCard struct {
	// Whether or not the card is archived
	Archived   *bool     `json:"archived,omitempty"`
	ColumnName *string   `json:"column_name,omitempty"`
	ColumnUrl  string    `json:"column_url"`
	ContentUrl *string   `json:"content_url,omitempty"`
	CreatedAt  time.Time `json:"created_at"`

	// Simple User
	Creator *NullableSimpleUser `json:"creator"`

	// The project card's ID
	Id         int       `json:"id"`
	NodeId     string    `json:"node_id"`
	Note       *string   `json:"note"`
	ProjectId  *string   `json:"project_id,omitempty"`
	ProjectUrl string    `json:"project_url"`
	UpdatedAt  time.Time `json:"updated_at"`
	Url        string    `json:"url"`
}

// Project Collaborator Permission
type ProjectCollaboratorPermission struct {
	Permission string `json:"permission"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// Project columns contain cards of work.
type ProjectColumn struct {
	CardsUrl  string    `json:"cards_url"`
	CreatedAt time.Time `json:"created_at"`

	// The unique identifier of the project column
	Id int `json:"id"`

	// Name of the project column
	Name       string    `json:"name"`
	NodeId     string    `json:"node_id"`
	ProjectUrl string    `json:"project_url"`
	UpdatedAt  time.Time `json:"updated_at"`
	Url        string    `json:"url"`
}

// Branch protections protect branches
type ProtectedBranch struct {
	AllowDeletions *struct {
		Enabled bool `json:"enabled"`
	} `json:"allow_deletions,omitempty"`
	AllowForcePushes *struct {
		Enabled bool `json:"enabled"`
	} `json:"allow_force_pushes,omitempty"`
	BlockCreations *struct {
		Enabled bool `json:"enabled"`
	} `json:"block_creations,omitempty"`
	EnforceAdmins *struct {
		Enabled bool   `json:"enabled"`
		Url     string `json:"url"`
	} `json:"enforce_admins,omitempty"`
	RequiredConversationResolution *struct {
		Enabled *bool `json:"enabled,omitempty"`
	} `json:"required_conversation_resolution,omitempty"`
	RequiredLinearHistory *struct {
		Enabled bool `json:"enabled"`
	} `json:"required_linear_history,omitempty"`
	RequiredPullRequestReviews *struct {
		BypassPullRequestAllowances *struct {
			Teams []Team       `json:"teams"`
			Users []SimpleUser `json:"users"`
		} `json:"bypass_pull_request_allowances,omitempty"`
		DismissStaleReviews   *bool `json:"dismiss_stale_reviews,omitempty"`
		DismissalRestrictions *struct {
			Teams    []Team       `json:"teams"`
			TeamsUrl string       `json:"teams_url"`
			Url      string       `json:"url"`
			Users    []SimpleUser `json:"users"`
			UsersUrl string       `json:"users_url"`
		} `json:"dismissal_restrictions,omitempty"`
		RequireCodeOwnerReviews      *bool  `json:"require_code_owner_reviews,omitempty"`
		RequiredApprovingReviewCount *int   `json:"required_approving_review_count,omitempty"`
		Url                          string `json:"url"`
	} `json:"required_pull_request_reviews,omitempty"`
	RequiredSignatures *struct {
		Enabled bool   `json:"enabled"`
		Url     string `json:"url"`
	} `json:"required_signatures,omitempty"`

	// Status Check Policy
	RequiredStatusChecks *StatusCheckPolicy `json:"required_status_checks,omitempty"`

	// Branch Restriction Policy
	Restrictions *BranchRestrictionPolicy `json:"restrictions,omitempty"`
	Url          string                   `json:"url"`
}

// Protected Branch Admin Enforced
type ProtectedBranchAdminEnforced struct {
	Enabled bool   `json:"enabled"`
	Url     string `json:"url"`
}

// Protected Branch Pull Request Review
type ProtectedBranchPullRequestReview struct {
	// Allow specific users or teams to bypass pull request requirements.
	BypassPullRequestAllowances *struct {
		// The list of teams allowed to bypass pull request requirements.
		Teams *[]Team `json:"teams,omitempty"`

		// The list of users allowed to bypass pull request requirements.
		Users *[]SimpleUser `json:"users,omitempty"`
	} `json:"bypass_pull_request_allowances,omitempty"`
	DismissStaleReviews   bool `json:"dismiss_stale_reviews"`
	DismissalRestrictions *struct {
		// The list of teams with review dismissal access.
		Teams    *[]Team `json:"teams,omitempty"`
		TeamsUrl *string `json:"teams_url,omitempty"`
		Url      *string `json:"url,omitempty"`

		// The list of users with review dismissal access.
		Users    *[]SimpleUser `json:"users,omitempty"`
		UsersUrl *string       `json:"users_url,omitempty"`
	} `json:"dismissal_restrictions,omitempty"`
	RequireCodeOwnerReviews      bool    `json:"require_code_owner_reviews"`
	RequiredApprovingReviewCount *int    `json:"required_approving_review_count,omitempty"`
	Url                          *string `json:"url,omitempty"`
}

// Protected Branch Required Status Check
type ProtectedBranchRequiredStatusCheck struct {
	Checks []struct {
		AppId   *int   `json:"app_id"`
		Context string `json:"context"`
	} `json:"checks"`
	Contexts         []string `json:"contexts"`
	ContextsUrl      *string  `json:"contexts_url,omitempty"`
	EnforcementLevel *string  `json:"enforcement_level,omitempty"`
	Strict           *bool    `json:"strict,omitempty"`
	Url              *string  `json:"url,omitempty"`
}

// Public User
type PublicUser struct {
	AvatarUrl         string               `json:"avatar_url"`
	Bio               *string              `json:"bio"`
	Blog              *string              `json:"blog"`
	Collaborators     *int                 `json:"collaborators,omitempty"`
	Company           *string              `json:"company"`
	CreatedAt         time.Time            `json:"created_at"`
	DiskUsage         *int                 `json:"disk_usage,omitempty"`
	Email             *openapi_types.Email `json:"email"`
	EventsUrl         string               `json:"events_url"`
	Followers         int                  `json:"followers"`
	FollowersUrl      string               `json:"followers_url"`
	Following         int                  `json:"following"`
	FollowingUrl      string               `json:"following_url"`
	GistsUrl          string               `json:"gists_url"`
	GravatarId        *string              `json:"gravatar_id"`
	Hireable          *bool                `json:"hireable"`
	HtmlUrl           string               `json:"html_url"`
	Id                int                  `json:"id"`
	Location          *string              `json:"location"`
	Login             string               `json:"login"`
	Name              *string              `json:"name"`
	NodeId            string               `json:"node_id"`
	OrganizationsUrl  string               `json:"organizations_url"`
	OwnedPrivateRepos *int                 `json:"owned_private_repos,omitempty"`
	Plan              *struct {
		Collaborators int    `json:"collaborators"`
		Name          string `json:"name"`
		PrivateRepos  int    `json:"private_repos"`
		Space         int    `json:"space"`
	} `json:"plan,omitempty"`
	PrivateGists      *int       `json:"private_gists,omitempty"`
	PublicGists       int        `json:"public_gists"`
	PublicRepos       int        `json:"public_repos"`
	ReceivedEventsUrl string     `json:"received_events_url"`
	ReposUrl          string     `json:"repos_url"`
	SiteAdmin         bool       `json:"site_admin"`
	StarredUrl        string     `json:"starred_url"`
	SubscriptionsUrl  string     `json:"subscriptions_url"`
	SuspendedAt       *time.Time `json:"suspended_at"`
	TotalPrivateRepos *int       `json:"total_private_repos,omitempty"`
	TwitterUsername   *string    `json:"twitter_username"`
	Type              string     `json:"type"`
	UpdatedAt         time.Time  `json:"updated_at"`
	Url               string     `json:"url"`
}

// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
type PullRequest struct {
	Links struct {
		// Hypermedia Link
		Comments Link `json:"comments"`

		// Hypermedia Link
		Commits Link `json:"commits"`

		// Hypermedia Link
		Html Link `json:"html"`

		// Hypermedia Link
		Issue Link `json:"issue"`

		// Hypermedia Link
		ReviewComment Link `json:"review_comment"`

		// Hypermedia Link
		ReviewComments Link `json:"review_comments"`

		// Hypermedia Link
		Self Link `json:"self"`

		// Hypermedia Link
		Statuses Link `json:"statuses"`
	} `json:"_links"`
	ActiveLockReason *string `json:"active_lock_reason"`
	Additions        int     `json:"additions"`

	// Simple User
	Assignee  *NullableSimpleUser `json:"assignee"`
	Assignees *[]SimpleUser       `json:"assignees"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// The status of auto merging a pull request.
	AutoMerge *AutoMerge `json:"auto_merge"`
	Base      struct {
		Label string `json:"label"`
		Ref   string `json:"ref"`
		Repo  struct {
			AllowForking     *bool     `json:"allow_forking,omitempty"`
			AllowMergeCommit *bool     `json:"allow_merge_commit,omitempty"`
			AllowRebaseMerge *bool     `json:"allow_rebase_merge,omitempty"`
			AllowSquashMerge *bool     `json:"allow_squash_merge,omitempty"`
			ArchiveUrl       string    `json:"archive_url"`
			Archived         bool      `json:"archived"`
			AssigneesUrl     string    `json:"assignees_url"`
			BlobsUrl         string    `json:"blobs_url"`
			BranchesUrl      string    `json:"branches_url"`
			CloneUrl         string    `json:"clone_url"`
			CollaboratorsUrl string    `json:"collaborators_url"`
			CommentsUrl      string    `json:"comments_url"`
			CommitsUrl       string    `json:"commits_url"`
			CompareUrl       string    `json:"compare_url"`
			ContentsUrl      string    `json:"contents_url"`
			ContributorsUrl  string    `json:"contributors_url"`
			CreatedAt        time.Time `json:"created_at"`
			DefaultBranch    string    `json:"default_branch"`
			DeploymentsUrl   string    `json:"deployments_url"`
			Description      *string   `json:"description"`
			Disabled         bool      `json:"disabled"`
			DownloadsUrl     string    `json:"downloads_url"`
			EventsUrl        string    `json:"events_url"`
			Fork             bool      `json:"fork"`
			Forks            int       `json:"forks"`
			ForksCount       int       `json:"forks_count"`
			ForksUrl         string    `json:"forks_url"`
			FullName         string    `json:"full_name"`
			GitCommitsUrl    string    `json:"git_commits_url"`
			GitRefsUrl       string    `json:"git_refs_url"`
			GitTagsUrl       string    `json:"git_tags_url"`
			GitUrl           string    `json:"git_url"`
			HasDownloads     bool      `json:"has_downloads"`
			HasIssues        bool      `json:"has_issues"`
			HasPages         bool      `json:"has_pages"`
			HasProjects      bool      `json:"has_projects"`
			HasWiki          bool      `json:"has_wiki"`
			Homepage         *string   `json:"homepage"`
			HooksUrl         string    `json:"hooks_url"`
			HtmlUrl          string    `json:"html_url"`
			Id               int       `json:"id"`
			IsTemplate       *bool     `json:"is_template,omitempty"`
			IssueCommentUrl  string    `json:"issue_comment_url"`
			IssueEventsUrl   string    `json:"issue_events_url"`
			IssuesUrl        string    `json:"issues_url"`
			KeysUrl          string    `json:"keys_url"`
			LabelsUrl        string    `json:"labels_url"`
			Language         *string   `json:"language"`
			LanguagesUrl     string    `json:"languages_url"`

			// License Simple
			License          *NullableLicenseSimple `json:"license"`
			MasterBranch     *string                `json:"master_branch,omitempty"`
			MergesUrl        string                 `json:"merges_url"`
			MilestonesUrl    string                 `json:"milestones_url"`
			MirrorUrl        *string                `json:"mirror_url"`
			Name             string                 `json:"name"`
			NodeId           string                 `json:"node_id"`
			NotificationsUrl string                 `json:"notifications_url"`
			OpenIssues       int                    `json:"open_issues"`
			OpenIssuesCount  int                    `json:"open_issues_count"`
			Owner            struct {
				AvatarUrl         string  `json:"avatar_url"`
				EventsUrl         string  `json:"events_url"`
				FollowersUrl      string  `json:"followers_url"`
				FollowingUrl      string  `json:"following_url"`
				GistsUrl          string  `json:"gists_url"`
				GravatarId        *string `json:"gravatar_id"`
				HtmlUrl           string  `json:"html_url"`
				Id                int     `json:"id"`
				Login             string  `json:"login"`
				NodeId            string  `json:"node_id"`
				OrganizationsUrl  string  `json:"organizations_url"`
				ReceivedEventsUrl string  `json:"received_events_url"`
				ReposUrl          string  `json:"repos_url"`
				SiteAdmin         bool    `json:"site_admin"`
				StarredUrl        string  `json:"starred_url"`
				SubscriptionsUrl  string  `json:"subscriptions_url"`
				Type              string  `json:"type"`
				Url               string  `json:"url"`
			} `json:"owner"`
			Permissions *struct {
				Admin    bool  `json:"admin"`
				Maintain *bool `json:"maintain,omitempty"`
				Pull     bool  `json:"pull"`
				Push     bool  `json:"push"`
				Triage   *bool `json:"triage,omitempty"`
			} `json:"permissions,omitempty"`
			Private         bool      `json:"private"`
			PullsUrl        string    `json:"pulls_url"`
			PushedAt        time.Time `json:"pushed_at"`
			ReleasesUrl     string    `json:"releases_url"`
			Size            int       `json:"size"`
			SshUrl          string    `json:"ssh_url"`
			StargazersCount int       `json:"stargazers_count"`
			StargazersUrl   string    `json:"stargazers_url"`
			StatusesUrl     string    `json:"statuses_url"`
			SubscribersUrl  string    `json:"subscribers_url"`
			SubscriptionUrl string    `json:"subscription_url"`
			SvnUrl          string    `json:"svn_url"`
			TagsUrl         string    `json:"tags_url"`
			TeamsUrl        string    `json:"teams_url"`
			TempCloneToken  *string   `json:"temp_clone_token,omitempty"`
			Topics          *[]string `json:"topics,omitempty"`
			TreesUrl        string    `json:"trees_url"`
			UpdatedAt       time.Time `json:"updated_at"`
			Url             string    `json:"url"`

			// The repository visibility: public, private, or internal.
			Visibility    *string `json:"visibility,omitempty"`
			Watchers      int     `json:"watchers"`
			WatchersCount int     `json:"watchers_count"`
		} `json:"repo"`
		Sha  string `json:"sha"`
		User struct {
			AvatarUrl         string  `json:"avatar_url"`
			EventsUrl         string  `json:"events_url"`
			FollowersUrl      string  `json:"followers_url"`
			FollowingUrl      string  `json:"following_url"`
			GistsUrl          string  `json:"gists_url"`
			GravatarId        *string `json:"gravatar_id"`
			HtmlUrl           string  `json:"html_url"`
			Id                int     `json:"id"`
			Login             string  `json:"login"`
			NodeId            string  `json:"node_id"`
			OrganizationsUrl  string  `json:"organizations_url"`
			ReceivedEventsUrl string  `json:"received_events_url"`
			ReposUrl          string  `json:"repos_url"`
			SiteAdmin         bool    `json:"site_admin"`
			StarredUrl        string  `json:"starred_url"`
			SubscriptionsUrl  string  `json:"subscriptions_url"`
			Type              string  `json:"type"`
			Url               string  `json:"url"`
		} `json:"user"`
	} `json:"base"`
	Body         *string    `json:"body"`
	ChangedFiles int        `json:"changed_files"`
	ClosedAt     *time.Time `json:"closed_at"`
	Comments     int        `json:"comments"`
	CommentsUrl  string     `json:"comments_url"`
	Commits      int        `json:"commits"`
	CommitsUrl   string     `json:"commits_url"`
	CreatedAt    time.Time  `json:"created_at"`
	Deletions    int        `json:"deletions"`
	DiffUrl      string     `json:"diff_url"`

	// Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`
	Head  struct {
		Label string `json:"label"`
		Ref   string `json:"ref"`
		Repo  *struct {
			AllowForking     *bool     `json:"allow_forking,omitempty"`
			AllowMergeCommit *bool     `json:"allow_merge_commit,omitempty"`
			AllowRebaseMerge *bool     `json:"allow_rebase_merge,omitempty"`
			AllowSquashMerge *bool     `json:"allow_squash_merge,omitempty"`
			ArchiveUrl       string    `json:"archive_url"`
			Archived         bool      `json:"archived"`
			AssigneesUrl     string    `json:"assignees_url"`
			BlobsUrl         string    `json:"blobs_url"`
			BranchesUrl      string    `json:"branches_url"`
			CloneUrl         string    `json:"clone_url"`
			CollaboratorsUrl string    `json:"collaborators_url"`
			CommentsUrl      string    `json:"comments_url"`
			CommitsUrl       string    `json:"commits_url"`
			CompareUrl       string    `json:"compare_url"`
			ContentsUrl      string    `json:"contents_url"`
			ContributorsUrl  string    `json:"contributors_url"`
			CreatedAt        time.Time `json:"created_at"`
			DefaultBranch    string    `json:"default_branch"`
			DeploymentsUrl   string    `json:"deployments_url"`
			Description      *string   `json:"description"`
			Disabled         bool      `json:"disabled"`
			DownloadsUrl     string    `json:"downloads_url"`
			EventsUrl        string    `json:"events_url"`
			Fork             bool      `json:"fork"`
			Forks            int       `json:"forks"`
			ForksCount       int       `json:"forks_count"`
			ForksUrl         string    `json:"forks_url"`
			FullName         string    `json:"full_name"`
			GitCommitsUrl    string    `json:"git_commits_url"`
			GitRefsUrl       string    `json:"git_refs_url"`
			GitTagsUrl       string    `json:"git_tags_url"`
			GitUrl           string    `json:"git_url"`
			HasDownloads     bool      `json:"has_downloads"`
			HasIssues        bool      `json:"has_issues"`
			HasPages         bool      `json:"has_pages"`
			HasProjects      bool      `json:"has_projects"`
			HasWiki          bool      `json:"has_wiki"`
			Homepage         *string   `json:"homepage"`
			HooksUrl         string    `json:"hooks_url"`
			HtmlUrl          string    `json:"html_url"`
			Id               int       `json:"id"`
			IsTemplate       *bool     `json:"is_template,omitempty"`
			IssueCommentUrl  string    `json:"issue_comment_url"`
			IssueEventsUrl   string    `json:"issue_events_url"`
			IssuesUrl        string    `json:"issues_url"`
			KeysUrl          string    `json:"keys_url"`
			LabelsUrl        string    `json:"labels_url"`
			Language         *string   `json:"language"`
			LanguagesUrl     string    `json:"languages_url"`
			License          *struct {
				Key    string  `json:"key"`
				Name   string  `json:"name"`
				NodeId string  `json:"node_id"`
				SpdxId *string `json:"spdx_id"`
				Url    *string `json:"url"`
			} `json:"license"`
			MasterBranch     *string `json:"master_branch,omitempty"`
			MergesUrl        string  `json:"merges_url"`
			MilestonesUrl    string  `json:"milestones_url"`
			MirrorUrl        *string `json:"mirror_url"`
			Name             string  `json:"name"`
			NodeId           string  `json:"node_id"`
			NotificationsUrl string  `json:"notifications_url"`
			OpenIssues       int     `json:"open_issues"`
			OpenIssuesCount  int     `json:"open_issues_count"`
			Owner            struct {
				AvatarUrl         string  `json:"avatar_url"`
				EventsUrl         string  `json:"events_url"`
				FollowersUrl      string  `json:"followers_url"`
				FollowingUrl      string  `json:"following_url"`
				GistsUrl          string  `json:"gists_url"`
				GravatarId        *string `json:"gravatar_id"`
				HtmlUrl           string  `json:"html_url"`
				Id                int     `json:"id"`
				Login             string  `json:"login"`
				NodeId            string  `json:"node_id"`
				OrganizationsUrl  string  `json:"organizations_url"`
				ReceivedEventsUrl string  `json:"received_events_url"`
				ReposUrl          string  `json:"repos_url"`
				SiteAdmin         bool    `json:"site_admin"`
				StarredUrl        string  `json:"starred_url"`
				SubscriptionsUrl  string  `json:"subscriptions_url"`
				Type              string  `json:"type"`
				Url               string  `json:"url"`
			} `json:"owner"`
			Permissions *struct {
				Admin    bool  `json:"admin"`
				Maintain *bool `json:"maintain,omitempty"`
				Pull     bool  `json:"pull"`
				Push     bool  `json:"push"`
				Triage   *bool `json:"triage,omitempty"`
			} `json:"permissions,omitempty"`
			Private         bool      `json:"private"`
			PullsUrl        string    `json:"pulls_url"`
			PushedAt        time.Time `json:"pushed_at"`
			ReleasesUrl     string    `json:"releases_url"`
			Size            int       `json:"size"`
			SshUrl          string    `json:"ssh_url"`
			StargazersCount int       `json:"stargazers_count"`
			StargazersUrl   string    `json:"stargazers_url"`
			StatusesUrl     string    `json:"statuses_url"`
			SubscribersUrl  string    `json:"subscribers_url"`
			SubscriptionUrl string    `json:"subscription_url"`
			SvnUrl          string    `json:"svn_url"`
			TagsUrl         string    `json:"tags_url"`
			TeamsUrl        string    `json:"teams_url"`
			TempCloneToken  *string   `json:"temp_clone_token,omitempty"`
			Topics          *[]string `json:"topics,omitempty"`
			TreesUrl        string    `json:"trees_url"`
			UpdatedAt       time.Time `json:"updated_at"`
			Url             string    `json:"url"`

			// The repository visibility: public, private, or internal.
			Visibility    *string `json:"visibility,omitempty"`
			Watchers      int     `json:"watchers"`
			WatchersCount int     `json:"watchers_count"`
		} `json:"repo"`
		Sha  string `json:"sha"`
		User struct {
			AvatarUrl         string  `json:"avatar_url"`
			EventsUrl         string  `json:"events_url"`
			FollowersUrl      string  `json:"followers_url"`
			FollowingUrl      string  `json:"following_url"`
			GistsUrl          string  `json:"gists_url"`
			GravatarId        *string `json:"gravatar_id"`
			HtmlUrl           string  `json:"html_url"`
			Id                int     `json:"id"`
			Login             string  `json:"login"`
			NodeId            string  `json:"node_id"`
			OrganizationsUrl  string  `json:"organizations_url"`
			ReceivedEventsUrl string  `json:"received_events_url"`
			ReposUrl          string  `json:"repos_url"`
			SiteAdmin         bool    `json:"site_admin"`
			StarredUrl        string  `json:"starred_url"`
			SubscriptionsUrl  string  `json:"subscriptions_url"`
			Type              string  `json:"type"`
			Url               string  `json:"url"`
		} `json:"user"`
	} `json:"head"`
	HtmlUrl  string `json:"html_url"`
	Id       int    `json:"id"`
	IssueUrl string `json:"issue_url"`
	Labels   []struct {
		Color       string  `json:"color"`
		Default     bool    `json:"default"`
		Description *string `json:"description"`
		Id          int64   `json:"id"`
		Name        string  `json:"name"`
		NodeId      string  `json:"node_id"`
		Url         string  `json:"url"`
	} `json:"labels"`
	Locked bool `json:"locked"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify bool       `json:"maintainer_can_modify"`
	MergeCommitSha      *string    `json:"merge_commit_sha"`
	Mergeable           *bool      `json:"mergeable"`
	MergeableState      string     `json:"mergeable_state"`
	Merged              bool       `json:"merged"`
	MergedAt            *time.Time `json:"merged_at"`

	// Simple User
	MergedBy *NullableSimpleUser `json:"merged_by"`

	// A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone"`
	NodeId    string             `json:"node_id"`

	// Number uniquely identifying the pull request within its repository.
	Number             int           `json:"number"`
	PatchUrl           string        `json:"patch_url"`
	Rebaseable         *bool         `json:"rebaseable"`
	RequestedReviewers *[]SimpleUser `json:"requested_reviewers"`
	RequestedTeams     *[]TeamSimple `json:"requested_teams"`
	ReviewCommentUrl   string        `json:"review_comment_url"`
	ReviewComments     int           `json:"review_comments"`
	ReviewCommentsUrl  string        `json:"review_comments_url"`

	// State of this Pull Request. Either `open` or `closed`.
	State       PullRequestState `json:"state"`
	StatusesUrl string           `json:"statuses_url"`

	// The title of the pull request.
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// State of this Pull Request. Either `open` or `closed`.
type PullRequestState string

// Pull Request Merge Result
type PullRequestMergeResult struct {
	Merged  bool   `json:"merged"`
	Message string `json:"message"`
	Sha     string `json:"sha"`
}

// PullRequestMinimal defines model for pull-request-minimal.
type PullRequestMinimal struct {
	Base struct {
		Ref  string `json:"ref"`
		Repo struct {
			Id   int    `json:"id"`
			Name string `json:"name"`
			Url  string `json:"url"`
		} `json:"repo"`
		Sha string `json:"sha"`
	} `json:"base"`
	Head struct {
		Ref  string `json:"ref"`
		Repo struct {
			Id   int    `json:"id"`
			Name string `json:"name"`
			Url  string `json:"url"`
		} `json:"repo"`
		Sha string `json:"sha"`
	} `json:"head"`
	Id     int    `json:"id"`
	Number int    `json:"number"`
	Url    string `json:"url"`
}

// Pull Request Reviews are reviews on pull requests.
type PullRequestReview struct {
	Links struct {
		Html struct {
			Href string `json:"href"`
		} `json:"html"`
		PullRequest struct {
			Href string `json:"href"`
		} `json:"pull_request"`
	} `json:"_links"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// The text of the review.
	Body     string  `json:"body"`
	BodyHtml *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// A commit SHA for the review.
	CommitId string `json:"commit_id"`
	HtmlUrl  string `json:"html_url"`

	// Unique identifier of the review
	Id             int        `json:"id"`
	NodeId         string     `json:"node_id"`
	PullRequestUrl string     `json:"pull_request_url"`
	State          string     `json:"state"`
	SubmittedAt    *time.Time `json:"submitted_at,omitempty"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
type PullRequestReviewComment struct {
	Links struct {
		Html struct {
			Href string `json:"href"`
		} `json:"html"`
		PullRequest struct {
			Href string `json:"href"`
		} `json:"pull_request"`
		Self struct {
			Href string `json:"href"`
		} `json:"self"`
	} `json:"_links"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// The text of the comment.
	Body     string  `json:"body"`
	BodyHtml *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// The SHA of the commit to which the comment applies.
	CommitId  string    `json:"commit_id"`
	CreatedAt time.Time `json:"created_at"`

	// The diff of the line that the comment refers to.
	DiffHunk string `json:"diff_hunk"`

	// HTML URL for the pull request review comment.
	HtmlUrl string `json:"html_url"`

	// The ID of the pull request review comment.
	Id int `json:"id"`

	// The comment ID to reply to.
	InReplyToId *int `json:"in_reply_to_id,omitempty"`

	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int `json:"line,omitempty"`

	// The node ID of the pull request review comment.
	NodeId string `json:"node_id"`

	// The SHA of the original commit to which the comment applies.
	OriginalCommitId string `json:"original_commit_id"`

	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int `json:"original_line,omitempty"`

	// The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
	OriginalPosition int `json:"original_position"`

	// The first line of the range for a multi-line comment.
	OriginalStartLine *int `json:"original_start_line"`

	// The relative path of the file to which the comment applies.
	Path string `json:"path"`

	// The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
	Position int `json:"position"`

	// The ID of the pull request review to which the comment belongs.
	PullRequestReviewId *int `json:"pull_request_review_id"`

	// URL for the pull request that the review comment belongs to.
	PullRequestUrl string          `json:"pull_request_url"`
	Reactions      *ReactionRollup `json:"reactions,omitempty"`

	// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
	Side *PullRequestReviewCommentSide `json:"side,omitempty"`

	// The first line of the range for a multi-line comment.
	StartLine *int `json:"start_line"`

	// The side of the first line of the range for a multi-line comment.
	StartSide *PullRequestReviewCommentStartSide `json:"start_side"`
	UpdatedAt time.Time                          `json:"updated_at"`

	// URL for the pull request review comment
	Url string `json:"url"`

	// Simple User
	User SimpleUser `json:"user"`
}

// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
type PullRequestReviewCommentSide string

// The side of the first line of the range for a multi-line comment.
type PullRequestReviewCommentStartSide string

// Pull Request Review Request
type PullRequestReviewRequest struct {
	Teams []Team       `json:"teams"`
	Users []SimpleUser `json:"users"`
}

// Pull Request Simple
type PullRequestSimple struct {
	Links struct {
		// Hypermedia Link
		Comments Link `json:"comments"`

		// Hypermedia Link
		Commits Link `json:"commits"`

		// Hypermedia Link
		Html Link `json:"html"`

		// Hypermedia Link
		Issue Link `json:"issue"`

		// Hypermedia Link
		ReviewComment Link `json:"review_comment"`

		// Hypermedia Link
		ReviewComments Link `json:"review_comments"`

		// Hypermedia Link
		Self Link `json:"self"`

		// Hypermedia Link
		Statuses Link `json:"statuses"`
	} `json:"_links"`
	ActiveLockReason *string `json:"active_lock_reason"`

	// Simple User
	Assignee  *NullableSimpleUser `json:"assignee"`
	Assignees *[]SimpleUser       `json:"assignees"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// The status of auto merging a pull request.
	AutoMerge *AutoMerge `json:"auto_merge"`
	Base      struct {
		Label string `json:"label"`
		Ref   string `json:"ref"`

		// A git repository
		Repo Repository `json:"repo"`
		Sha  string     `json:"sha"`

		// Simple User
		User *NullableSimpleUser `json:"user"`
	} `json:"base"`
	Body        *string    `json:"body"`
	ClosedAt    *time.Time `json:"closed_at"`
	CommentsUrl string     `json:"comments_url"`
	CommitsUrl  string     `json:"commits_url"`
	CreatedAt   time.Time  `json:"created_at"`
	DiffUrl     string     `json:"diff_url"`

	// Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`
	Head  struct {
		Label string `json:"label"`
		Ref   string `json:"ref"`

		// A git repository
		Repo Repository `json:"repo"`
		Sha  string     `json:"sha"`

		// Simple User
		User *NullableSimpleUser `json:"user"`
	} `json:"head"`
	HtmlUrl  string `json:"html_url"`
	Id       int    `json:"id"`
	IssueUrl string `json:"issue_url"`
	Labels   []struct {
		Color       string `json:"color"`
		Default     bool   `json:"default"`
		Description string `json:"description"`
		Id          int64  `json:"id"`
		Name        string `json:"name"`
		NodeId      string `json:"node_id"`
		Url         string `json:"url"`
	} `json:"labels"`
	Locked         bool       `json:"locked"`
	MergeCommitSha *string    `json:"merge_commit_sha"`
	MergedAt       *time.Time `json:"merged_at"`

	// A collection of related issues and pull requests.
	Milestone          *NullableMilestone `json:"milestone"`
	NodeId             string             `json:"node_id"`
	Number             int                `json:"number"`
	PatchUrl           string             `json:"patch_url"`
	RequestedReviewers *[]SimpleUser      `json:"requested_reviewers"`
	RequestedTeams     *[]Team            `json:"requested_teams"`
	ReviewCommentUrl   string             `json:"review_comment_url"`
	ReviewCommentsUrl  string             `json:"review_comments_url"`
	State              string             `json:"state"`
	StatusesUrl        string             `json:"statuses_url"`
	Title              string             `json:"title"`
	UpdatedAt          time.Time          `json:"updated_at"`
	Url                string             `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// RateLimit defines model for rate-limit.
type RateLimit struct {
	Limit     int `json:"limit"`
	Remaining int `json:"remaining"`
	Reset     int `json:"reset"`
	Used      int `json:"used"`
}

// Rate Limit Overview
type RateLimitOverview struct {
	Rate      RateLimit `json:"rate"`
	Resources struct {
		ActionsRunnerRegistration *RateLimit `json:"actions_runner_registration,omitempty"`
		CodeScanningUpload        *RateLimit `json:"code_scanning_upload,omitempty"`
		Core                      RateLimit  `json:"core"`
		Graphql                   *RateLimit `json:"graphql,omitempty"`
		IntegrationManifest       *RateLimit `json:"integration_manifest,omitempty"`
		Scim                      *RateLimit `json:"scim,omitempty"`
		Search                    RateLimit  `json:"search"`
		SourceImport              *RateLimit `json:"source_import,omitempty"`
	} `json:"resources"`
}

// Reactions to conversations provide a way to help people express their feelings more simply and effectively.
type Reaction struct {
	// The reaction to use
	Content   ReactionContent `json:"content"`
	CreatedAt time.Time       `json:"created_at"`
	Id        int             `json:"id"`
	NodeId    string          `json:"node_id"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// The reaction to use
type ReactionContent string

// ReactionRollup defines model for reaction-rollup.
type ReactionRollup struct {
	Plus1      int    `json:"+1"`
	Minus1     int    `json:"-1"`
	Confused   int    `json:"confused"`
	Eyes       int    `json:"eyes"`
	Heart      int    `json:"heart"`
	Hooray     int    `json:"hooray"`
	Laugh      int    `json:"laugh"`
	Rocket     int    `json:"rocket"`
	TotalCount int    `json:"total_count"`
	Url        string `json:"url"`
}

// A workflow referenced/reused by the initial caller workflow
type ReferencedWorkflow struct {
	Path string  `json:"path"`
	Ref  *string `json:"ref,omitempty"`
	Sha  string  `json:"sha"`
}

// Referrer Traffic
type ReferrerTraffic struct {
	Count    int    `json:"count"`
	Referrer string `json:"referrer"`
	Uniques  int    `json:"uniques"`
}

// A release.
type Release struct {
	Assets    []ReleaseAsset `json:"assets"`
	AssetsUrl string         `json:"assets_url"`

	// Simple User
	Author    SimpleUser `json:"author"`
	Body      *string    `json:"body"`
	BodyHtml  *string    `json:"body_html,omitempty"`
	BodyText  *string    `json:"body_text,omitempty"`
	CreatedAt time.Time  `json:"created_at"`

	// The URL of the release discussion.
	DiscussionUrl *string `json:"discussion_url,omitempty"`

	// true to create a draft (unpublished) release, false to create a published one.
	Draft         bool    `json:"draft"`
	HtmlUrl       string  `json:"html_url"`
	Id            int     `json:"id"`
	MentionsCount *int    `json:"mentions_count,omitempty"`
	Name          *string `json:"name"`
	NodeId        string  `json:"node_id"`

	// Whether to identify the release as a prerelease or a full release.
	Prerelease  bool            `json:"prerelease"`
	PublishedAt *time.Time      `json:"published_at"`
	Reactions   *ReactionRollup `json:"reactions,omitempty"`

	// The name of the tag.
	TagName    string  `json:"tag_name"`
	TarballUrl *string `json:"tarball_url"`

	// Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish string  `json:"target_commitish"`
	UploadUrl       string  `json:"upload_url"`
	Url             string  `json:"url"`
	ZipballUrl      *string `json:"zipball_url"`
}

// Data related to a release.
type ReleaseAsset struct {
	BrowserDownloadUrl string    `json:"browser_download_url"`
	ContentType        string    `json:"content_type"`
	CreatedAt          time.Time `json:"created_at"`
	DownloadCount      int       `json:"download_count"`
	Id                 int       `json:"id"`
	Label              *string   `json:"label"`

	// The file name of the asset.
	Name   string `json:"name"`
	NodeId string `json:"node_id"`
	Size   int    `json:"size"`

	// State of the release asset.
	State     ReleaseAssetState `json:"state"`
	UpdatedAt time.Time         `json:"updated_at"`

	// Simple User
	Uploader *NullableSimpleUser `json:"uploader"`
	Url      string              `json:"url"`
}

// State of the release asset.
type ReleaseAssetState string

// Generated name and body describing a release
type ReleaseNotesContent struct {
	// The generated body describing the contents of the release supporting markdown formatting
	Body string `json:"body"`

	// The generated name of the release
	Name string `json:"name"`
}

// Removed from Project Issue Event
type RemovedFromProjectIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	ProjectCard           *struct {
		ColumnName         string  `json:"column_name"`
		Id                 int     `json:"id"`
		PreviousColumnName *string `json:"previous_column_name,omitempty"`
		ProjectId          int     `json:"project_id"`
		ProjectUrl         string  `json:"project_url"`
		Url                string  `json:"url"`
	} `json:"project_card,omitempty"`
	Url string `json:"url"`
}

// Renamed Issue Event
type RenamedIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Rename                struct {
		From string `json:"from"`
		To   string `json:"to"`
	} `json:"rename"`
	Url string `json:"url"`
}

// Set repository secrets for GitHub Codespaces.
type RepoCodespacesSecret struct {
	CreatedAt time.Time `json:"created_at"`

	// The name of the secret.
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Repo Search Result Item
type RepoSearchResultItem struct {
	AllowAutoMerge      *bool     `json:"allow_auto_merge,omitempty"`
	AllowForking        *bool     `json:"allow_forking,omitempty"`
	AllowMergeCommit    *bool     `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge    *bool     `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge    *bool     `json:"allow_squash_merge,omitempty"`
	ArchiveUrl          string    `json:"archive_url"`
	Archived            bool      `json:"archived"`
	AssigneesUrl        string    `json:"assignees_url"`
	BlobsUrl            string    `json:"blobs_url"`
	BranchesUrl         string    `json:"branches_url"`
	CloneUrl            string    `json:"clone_url"`
	CollaboratorsUrl    string    `json:"collaborators_url"`
	CommentsUrl         string    `json:"comments_url"`
	CommitsUrl          string    `json:"commits_url"`
	CompareUrl          string    `json:"compare_url"`
	ContentsUrl         string    `json:"contents_url"`
	ContributorsUrl     string    `json:"contributors_url"`
	CreatedAt           time.Time `json:"created_at"`
	DefaultBranch       string    `json:"default_branch"`
	DeleteBranchOnMerge *bool     `json:"delete_branch_on_merge,omitempty"`
	DeploymentsUrl      string    `json:"deployments_url"`
	Description         *string   `json:"description"`

	// Returns whether or not this repository disabled.
	Disabled        bool    `json:"disabled"`
	DownloadsUrl    string  `json:"downloads_url"`
	EventsUrl       string  `json:"events_url"`
	Fork            bool    `json:"fork"`
	Forks           int     `json:"forks"`
	ForksCount      int     `json:"forks_count"`
	ForksUrl        string  `json:"forks_url"`
	FullName        string  `json:"full_name"`
	GitCommitsUrl   string  `json:"git_commits_url"`
	GitRefsUrl      string  `json:"git_refs_url"`
	GitTagsUrl      string  `json:"git_tags_url"`
	GitUrl          string  `json:"git_url"`
	HasDownloads    bool    `json:"has_downloads"`
	HasIssues       bool    `json:"has_issues"`
	HasPages        bool    `json:"has_pages"`
	HasProjects     bool    `json:"has_projects"`
	HasWiki         bool    `json:"has_wiki"`
	Homepage        *string `json:"homepage"`
	HooksUrl        string  `json:"hooks_url"`
	HtmlUrl         string  `json:"html_url"`
	Id              int     `json:"id"`
	IsTemplate      *bool   `json:"is_template,omitempty"`
	IssueCommentUrl string  `json:"issue_comment_url"`
	IssueEventsUrl  string  `json:"issue_events_url"`
	IssuesUrl       string  `json:"issues_url"`
	KeysUrl         string  `json:"keys_url"`
	LabelsUrl       string  `json:"labels_url"`
	Language        *string `json:"language"`
	LanguagesUrl    string  `json:"languages_url"`

	// License Simple
	License          *NullableLicenseSimple `json:"license"`
	MasterBranch     *string                `json:"master_branch,omitempty"`
	MergesUrl        string                 `json:"merges_url"`
	MilestonesUrl    string                 `json:"milestones_url"`
	MirrorUrl        *string                `json:"mirror_url"`
	Name             string                 `json:"name"`
	NodeId           string                 `json:"node_id"`
	NotificationsUrl string                 `json:"notifications_url"`
	OpenIssues       int                    `json:"open_issues"`
	OpenIssuesCount  int                    `json:"open_issues_count"`

	// Simple User
	Owner       *NullableSimpleUser `json:"owner"`
	Permissions *struct {
		Admin    bool  `json:"admin"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     bool  `json:"pull"`
		Push     bool  `json:"push"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`
	Private         bool                     `json:"private"`
	PullsUrl        string                   `json:"pulls_url"`
	PushedAt        time.Time                `json:"pushed_at"`
	ReleasesUrl     string                   `json:"releases_url"`
	Score           float32                  `json:"score"`
	Size            int                      `json:"size"`
	SshUrl          string                   `json:"ssh_url"`
	StargazersCount int                      `json:"stargazers_count"`
	StargazersUrl   string                   `json:"stargazers_url"`
	StatusesUrl     string                   `json:"statuses_url"`
	SubscribersUrl  string                   `json:"subscribers_url"`
	SubscriptionUrl string                   `json:"subscription_url"`
	SvnUrl          string                   `json:"svn_url"`
	TagsUrl         string                   `json:"tags_url"`
	TeamsUrl        string                   `json:"teams_url"`
	TempCloneToken  *string                  `json:"temp_clone_token,omitempty"`
	TextMatches     *SearchResultTextMatches `json:"text_matches,omitempty"`
	Topics          *[]string                `json:"topics,omitempty"`
	TreesUrl        string                   `json:"trees_url"`
	UpdatedAt       time.Time                `json:"updated_at"`
	Url             string                   `json:"url"`

	// The repository visibility: public, private, or internal.
	Visibility    *string `json:"visibility,omitempty"`
	Watchers      int     `json:"watchers"`
	WatchersCount int     `json:"watchers_count"`
}

// A git repository
type Repository struct {
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow forking this repo
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool  `json:"allow_squash_merge,omitempty"`
	ArchiveUrl       string `json:"archive_url"`

	// Whether the repository is archived.
	Archived         bool       `json:"archived"`
	AssigneesUrl     string     `json:"assignees_url"`
	BlobsUrl         string     `json:"blobs_url"`
	BranchesUrl      string     `json:"branches_url"`
	CloneUrl         string     `json:"clone_url"`
	CollaboratorsUrl string     `json:"collaborators_url"`
	CommentsUrl      string     `json:"comments_url"`
	CommitsUrl       string     `json:"commits_url"`
	CompareUrl       string     `json:"compare_url"`
	ContentsUrl      string     `json:"contents_url"`
	ContributorsUrl  string     `json:"contributors_url"`
	CreatedAt        *time.Time `json:"created_at"`

	// The default branch of the repository.
	DefaultBranch string `json:"default_branch"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool   `json:"delete_branch_on_merge,omitempty"`
	DeploymentsUrl      string  `json:"deployments_url"`
	Description         *string `json:"description"`

	// Returns whether or not this repository disabled.
	Disabled      bool   `json:"disabled"`
	DownloadsUrl  string `json:"downloads_url"`
	EventsUrl     string `json:"events_url"`
	Fork          bool   `json:"fork"`
	Forks         int    `json:"forks"`
	ForksCount    int    `json:"forks_count"`
	ForksUrl      string `json:"forks_url"`
	FullName      string `json:"full_name"`
	GitCommitsUrl string `json:"git_commits_url"`
	GitRefsUrl    string `json:"git_refs_url"`
	GitTagsUrl    string `json:"git_tags_url"`
	GitUrl        string `json:"git_url"`

	// Whether downloads are enabled.
	HasDownloads bool `json:"has_downloads"`

	// Whether issues are enabled.
	HasIssues bool `json:"has_issues"`
	HasPages  bool `json:"has_pages"`

	// Whether projects are enabled.
	HasProjects bool `json:"has_projects"`

	// Whether the wiki is enabled.
	HasWiki  bool    `json:"has_wiki"`
	Homepage *string `json:"homepage"`
	HooksUrl string  `json:"hooks_url"`
	HtmlUrl  string  `json:"html_url"`

	// Unique identifier of the repository
	Id int `json:"id"`

	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate      *bool   `json:"is_template,omitempty"`
	IssueCommentUrl string  `json:"issue_comment_url"`
	IssueEventsUrl  string  `json:"issue_events_url"`
	IssuesUrl       string  `json:"issues_url"`
	KeysUrl         string  `json:"keys_url"`
	LabelsUrl       string  `json:"labels_url"`
	Language        *string `json:"language"`
	LanguagesUrl    string  `json:"languages_url"`

	// License Simple
	License       *NullableLicenseSimple `json:"license"`
	MasterBranch  *string                `json:"master_branch,omitempty"`
	MergesUrl     string                 `json:"merges_url"`
	MilestonesUrl string                 `json:"milestones_url"`
	MirrorUrl     *string                `json:"mirror_url"`

	// The name of the repository.
	Name             string `json:"name"`
	NetworkCount     *int   `json:"network_count,omitempty"`
	NodeId           string `json:"node_id"`
	NotificationsUrl string `json:"notifications_url"`
	OpenIssues       int    `json:"open_issues"`
	OpenIssuesCount  int    `json:"open_issues_count"`

	// Simple User
	Organization *NullableSimpleUser `json:"organization"`

	// Simple User
	Owner       SimpleUser `json:"owner"`
	Permissions *struct {
		Admin    bool  `json:"admin"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     bool  `json:"pull"`
		Push     bool  `json:"push"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`

	// Whether the repository is private or public.
	Private            bool       `json:"private"`
	PullsUrl           string     `json:"pulls_url"`
	PushedAt           *time.Time `json:"pushed_at"`
	ReleasesUrl        string     `json:"releases_url"`
	Size               int        `json:"size"`
	SshUrl             string     `json:"ssh_url"`
	StargazersCount    int        `json:"stargazers_count"`
	StargazersUrl      string     `json:"stargazers_url"`
	StarredAt          *string    `json:"starred_at,omitempty"`
	StatusesUrl        string     `json:"statuses_url"`
	SubscribersCount   *int       `json:"subscribers_count,omitempty"`
	SubscribersUrl     string     `json:"subscribers_url"`
	SubscriptionUrl    string     `json:"subscription_url"`
	SvnUrl             string     `json:"svn_url"`
	TagsUrl            string     `json:"tags_url"`
	TeamsUrl           string     `json:"teams_url"`
	TempCloneToken     *string    `json:"temp_clone_token,omitempty"`
	TemplateRepository *struct {
		AllowAutoMerge      *bool   `json:"allow_auto_merge,omitempty"`
		AllowMergeCommit    *bool   `json:"allow_merge_commit,omitempty"`
		AllowRebaseMerge    *bool   `json:"allow_rebase_merge,omitempty"`
		AllowSquashMerge    *bool   `json:"allow_squash_merge,omitempty"`
		AllowUpdateBranch   *bool   `json:"allow_update_branch,omitempty"`
		ArchiveUrl          *string `json:"archive_url,omitempty"`
		Archived            *bool   `json:"archived,omitempty"`
		AssigneesUrl        *string `json:"assignees_url,omitempty"`
		BlobsUrl            *string `json:"blobs_url,omitempty"`
		BranchesUrl         *string `json:"branches_url,omitempty"`
		CloneUrl            *string `json:"clone_url,omitempty"`
		CollaboratorsUrl    *string `json:"collaborators_url,omitempty"`
		CommentsUrl         *string `json:"comments_url,omitempty"`
		CommitsUrl          *string `json:"commits_url,omitempty"`
		CompareUrl          *string `json:"compare_url,omitempty"`
		ContentsUrl         *string `json:"contents_url,omitempty"`
		ContributorsUrl     *string `json:"contributors_url,omitempty"`
		CreatedAt           *string `json:"created_at,omitempty"`
		DefaultBranch       *string `json:"default_branch,omitempty"`
		DeleteBranchOnMerge *bool   `json:"delete_branch_on_merge,omitempty"`
		DeploymentsUrl      *string `json:"deployments_url,omitempty"`
		Description         *string `json:"description,omitempty"`
		Disabled            *bool   `json:"disabled,omitempty"`
		DownloadsUrl        *string `json:"downloads_url,omitempty"`
		EventsUrl           *string `json:"events_url,omitempty"`
		Fork                *bool   `json:"fork,omitempty"`
		ForksCount          *int    `json:"forks_count,omitempty"`
		ForksUrl            *string `json:"forks_url,omitempty"`
		FullName            *string `json:"full_name,omitempty"`
		GitCommitsUrl       *string `json:"git_commits_url,omitempty"`
		GitRefsUrl          *string `json:"git_refs_url,omitempty"`
		GitTagsUrl          *string `json:"git_tags_url,omitempty"`
		GitUrl              *string `json:"git_url,omitempty"`
		HasDownloads        *bool   `json:"has_downloads,omitempty"`
		HasIssues           *bool   `json:"has_issues,omitempty"`
		HasPages            *bool   `json:"has_pages,omitempty"`
		HasProjects         *bool   `json:"has_projects,omitempty"`
		HasWiki             *bool   `json:"has_wiki,omitempty"`
		Homepage            *string `json:"homepage,omitempty"`
		HooksUrl            *string `json:"hooks_url,omitempty"`
		HtmlUrl             *string `json:"html_url,omitempty"`
		Id                  *int    `json:"id,omitempty"`
		IsTemplate          *bool   `json:"is_template,omitempty"`
		IssueCommentUrl     *string `json:"issue_comment_url,omitempty"`
		IssueEventsUrl      *string `json:"issue_events_url,omitempty"`
		IssuesUrl           *string `json:"issues_url,omitempty"`
		KeysUrl             *string `json:"keys_url,omitempty"`
		LabelsUrl           *string `json:"labels_url,omitempty"`
		Language            *string `json:"language,omitempty"`
		LanguagesUrl        *string `json:"languages_url,omitempty"`
		MergesUrl           *string `json:"merges_url,omitempty"`
		MilestonesUrl       *string `json:"milestones_url,omitempty"`
		MirrorUrl           *string `json:"mirror_url,omitempty"`
		Name                *string `json:"name,omitempty"`
		NetworkCount        *int    `json:"network_count,omitempty"`
		NodeId              *string `json:"node_id,omitempty"`
		NotificationsUrl    *string `json:"notifications_url,omitempty"`
		OpenIssuesCount     *int    `json:"open_issues_count,omitempty"`
		Owner               *struct {
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			EventsUrl         *string `json:"events_url,omitempty"`
			FollowersUrl      *string `json:"followers_url,omitempty"`
			FollowingUrl      *string `json:"following_url,omitempty"`
			GistsUrl          *string `json:"gists_url,omitempty"`
			GravatarId        *string `json:"gravatar_id,omitempty"`
			HtmlUrl           *string `json:"html_url,omitempty"`
			Id                *int    `json:"id,omitempty"`
			Login             *string `json:"login,omitempty"`
			NodeId            *string `json:"node_id,omitempty"`
			OrganizationsUrl  *string `json:"organizations_url,omitempty"`
			ReceivedEventsUrl *string `json:"received_events_url,omitempty"`
			ReposUrl          *string `json:"repos_url,omitempty"`
			SiteAdmin         *bool   `json:"site_admin,omitempty"`
			StarredUrl        *string `json:"starred_url,omitempty"`
			SubscriptionsUrl  *string `json:"subscriptions_url,omitempty"`
			Type              *string `json:"type,omitempty"`
			Url               *string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions *struct {
			Admin    *bool `json:"admin,omitempty"`
			Maintain *bool `json:"maintain,omitempty"`
			Pull     *bool `json:"pull,omitempty"`
			Push     *bool `json:"push,omitempty"`
			Triage   *bool `json:"triage,omitempty"`
		} `json:"permissions,omitempty"`
		Private          *bool     `json:"private,omitempty"`
		PullsUrl         *string   `json:"pulls_url,omitempty"`
		PushedAt         *string   `json:"pushed_at,omitempty"`
		ReleasesUrl      *string   `json:"releases_url,omitempty"`
		Size             *int      `json:"size,omitempty"`
		SshUrl           *string   `json:"ssh_url,omitempty"`
		StargazersCount  *int      `json:"stargazers_count,omitempty"`
		StargazersUrl    *string   `json:"stargazers_url,omitempty"`
		StatusesUrl      *string   `json:"statuses_url,omitempty"`
		SubscribersCount *int      `json:"subscribers_count,omitempty"`
		SubscribersUrl   *string   `json:"subscribers_url,omitempty"`
		SubscriptionUrl  *string   `json:"subscription_url,omitempty"`
		SvnUrl           *string   `json:"svn_url,omitempty"`
		TagsUrl          *string   `json:"tags_url,omitempty"`
		TeamsUrl         *string   `json:"teams_url,omitempty"`
		TempCloneToken   *string   `json:"temp_clone_token,omitempty"`
		Topics           *[]string `json:"topics,omitempty"`
		TreesUrl         *string   `json:"trees_url,omitempty"`
		UpdatedAt        *string   `json:"updated_at,omitempty"`
		Url              *string   `json:"url,omitempty"`
		Visibility       *string   `json:"visibility,omitempty"`
		WatchersCount    *int      `json:"watchers_count,omitempty"`
	} `json:"template_repository"`
	Topics    *[]string  `json:"topics,omitempty"`
	TreesUrl  string     `json:"trees_url"`
	UpdatedAt *time.Time `json:"updated_at"`
	Url       string     `json:"url"`

	// The repository visibility: public, private, or internal.
	Visibility    *string `json:"visibility,omitempty"`
	Watchers      int     `json:"watchers"`
	WatchersCount int     `json:"watchers_count"`
}

// Repository Collaborator Permission
type RepositoryCollaboratorPermission struct {
	Permission string `json:"permission"`
	RoleName   string `json:"role_name"`

	// Collaborator
	User *NullableCollaborator `json:"user"`
}

// Repository invitations let you manage who you collaborate with.
type RepositoryInvitation struct {
	CreatedAt time.Time `json:"created_at"`

	// Whether or not the invitation has expired
	Expired *bool  `json:"expired,omitempty"`
	HtmlUrl string `json:"html_url"`

	// Unique identifier of the repository invitation.
	Id int `json:"id"`

	// Simple User
	Invitee *NullableSimpleUser `json:"invitee"`

	// Simple User
	Inviter *NullableSimpleUser `json:"inviter"`
	NodeId  string              `json:"node_id"`

	// The permission associated with the invitation.
	Permissions RepositoryInvitationPermissions `json:"permissions"`

	// Minimal Repository
	Repository MinimalRepository `json:"repository"`

	// URL for the repository invitation
	Url string `json:"url"`
}

// The permission associated with the invitation.
type RepositoryInvitationPermissions string

// Repository invitations let you manage who you collaborate with.
type RepositorySubscription struct {
	CreatedAt time.Time `json:"created_at"`

	// Determines if all notifications should be blocked from this repository.
	Ignored       bool    `json:"ignored"`
	Reason        *string `json:"reason"`
	RepositoryUrl string  `json:"repository_url"`

	// Determines if notifications should be received from this repository.
	Subscribed bool   `json:"subscribed"`
	Url        string `json:"url"`
}

// Legacy Review Comment
type ReviewComment struct {
	Links struct {
		// Hypermedia Link
		Html Link `json:"html"`

		// Hypermedia Link
		PullRequest Link `json:"pull_request"`

		// Hypermedia Link
		Self Link `json:"self"`
	} `json:"_links"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`
	Body              string            `json:"body"`
	BodyHtml          *string           `json:"body_html,omitempty"`
	BodyText          *string           `json:"body_text,omitempty"`
	CommitId          string            `json:"commit_id"`
	CreatedAt         time.Time         `json:"created_at"`
	DiffHunk          string            `json:"diff_hunk"`
	HtmlUrl           string            `json:"html_url"`
	Id                int               `json:"id"`
	InReplyToId       *int              `json:"in_reply_to_id,omitempty"`

	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line             *int   `json:"line,omitempty"`
	NodeId           string `json:"node_id"`
	OriginalCommitId string `json:"original_commit_id"`

	// The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine     *int `json:"original_line,omitempty"`
	OriginalPosition int  `json:"original_position"`

	// The original first line of the range for a multi-line comment.
	OriginalStartLine   *int            `json:"original_start_line"`
	Path                string          `json:"path"`
	Position            *int            `json:"position"`
	PullRequestReviewId *int            `json:"pull_request_review_id"`
	PullRequestUrl      string          `json:"pull_request_url"`
	Reactions           *ReactionRollup `json:"reactions,omitempty"`

	// The side of the first line of the range for a multi-line comment.
	Side *ReviewCommentSide `json:"side,omitempty"`

	// The first line of the range for a multi-line comment.
	StartLine *int `json:"start_line"`

	// The side of the first line of the range for a multi-line comment.
	StartSide *ReviewCommentStartSide `json:"start_side"`
	UpdatedAt time.Time               `json:"updated_at"`
	Url       string                  `json:"url"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// The side of the first line of the range for a multi-line comment.
type ReviewCommentSide string

// The side of the first line of the range for a multi-line comment.
type ReviewCommentStartSide string

// Review Dismissed Issue Event
type ReviewDismissedIssueEvent struct {
	// Simple User
	Actor           SimpleUser `json:"actor"`
	CommitId        *string    `json:"commit_id"`
	CommitUrl       *string    `json:"commit_url"`
	CreatedAt       string     `json:"created_at"`
	DismissedReview struct {
		DismissalCommitId *string `json:"dismissal_commit_id,omitempty"`
		DismissalMessage  *string `json:"dismissal_message"`
		ReviewId          int     `json:"review_id"`
		State             string  `json:"state"`
	} `json:"dismissed_review"`
	Event  string `json:"event"`
	Id     int    `json:"id"`
	NodeId string `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// Review Request Removed Issue Event
type ReviewRequestRemovedIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`

	// Simple User
	RequestedReviewer *SimpleUser `json:"requested_reviewer,omitempty"`

	// Groups of organization members that gives permissions on specified repositories.
	RequestedTeam *Team `json:"requested_team,omitempty"`

	// Simple User
	ReviewRequester SimpleUser `json:"review_requester"`
	Url             string     `json:"url"`
}

// Review Requested Issue Event
type ReviewRequestedIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`

	// Simple User
	RequestedReviewer *SimpleUser `json:"requested_reviewer,omitempty"`

	// Groups of organization members that gives permissions on specified repositories.
	RequestedTeam *Team `json:"requested_team,omitempty"`

	// Simple User
	ReviewRequester SimpleUser `json:"review_requester"`
	Url             string     `json:"url"`
}

// A self hosted runner
type Runner struct {
	Busy bool `json:"busy"`

	// The id of the runner.
	Id     int           `json:"id"`
	Labels []RunnerLabel `json:"labels"`

	// The name of the runner.
	Name string `json:"name"`

	// The Operating System of the runner.
	Os string `json:"os"`

	// The status of the runner.
	Status string `json:"status"`
}

// Runner Application
type RunnerApplication struct {
	Architecture   string  `json:"architecture"`
	DownloadUrl    string  `json:"download_url"`
	Filename       string  `json:"filename"`
	Os             string  `json:"os"`
	Sha256Checksum *string `json:"sha256_checksum,omitempty"`

	// A short lived bearer token used to download the runner, if needed.
	TempDownloadToken *string `json:"temp_download_token,omitempty"`
}

// RunnerGroupsEnterprise defines model for runner-groups-enterprise.
type RunnerGroupsEnterprise struct {
	AllowsPublicRepositories bool    `json:"allows_public_repositories"`
	Default                  bool    `json:"default"`
	Id                       float32 `json:"id"`
	Name                     string  `json:"name"`

	// If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
	RestrictedToWorkflows    *bool   `json:"restricted_to_workflows,omitempty"`
	RunnersUrl               string  `json:"runners_url"`
	SelectedOrganizationsUrl *string `json:"selected_organizations_url,omitempty"`

	// List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
	SelectedWorkflows *[]string `json:"selected_workflows,omitempty"`
	Visibility        string    `json:"visibility"`

	// If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
	WorkflowRestrictionsReadOnly *bool `json:"workflow_restrictions_read_only,omitempty"`
}

// RunnerGroupsOrg defines model for runner-groups-org.
type RunnerGroupsOrg struct {
	AllowsPublicRepositories          bool    `json:"allows_public_repositories"`
	Default                           bool    `json:"default"`
	Id                                float32 `json:"id"`
	Inherited                         bool    `json:"inherited"`
	InheritedAllowsPublicRepositories *bool   `json:"inherited_allows_public_repositories,omitempty"`
	Name                              string  `json:"name"`

	// If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
	RestrictedToWorkflows *bool  `json:"restricted_to_workflows,omitempty"`
	RunnersUrl            string `json:"runners_url"`

	// Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
	SelectedRepositoriesUrl *string `json:"selected_repositories_url,omitempty"`

	// List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
	SelectedWorkflows *[]string `json:"selected_workflows,omitempty"`
	Visibility        string    `json:"visibility"`

	// If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.
	WorkflowRestrictionsReadOnly *bool `json:"workflow_restrictions_read_only,omitempty"`
}

// A label for a self hosted runner
type RunnerLabel struct {
	// Unique identifier of the label.
	Id *int `json:"id,omitempty"`

	// Name of the label.
	Name string `json:"name"`

	// The type of label. Read-only labels are applied automatically when the runner is configured.
	Type *RunnerLabelType `json:"type,omitempty"`
}

// The type of label. Read-only labels are applied automatically when the runner is configured.
type RunnerLabelType string

// ScimEnterpriseGroup defines model for scim-enterprise-group.
type ScimEnterpriseGroup struct {
	DisplayName *string `json:"displayName,omitempty"`
	ExternalId  *string `json:"externalId"`
	Id          string  `json:"id"`
	Members     *[]struct {
		Ref     *string `json:"$ref,omitempty"`
		Display *string `json:"display,omitempty"`
		Value   *string `json:"value,omitempty"`
	} `json:"members,omitempty"`
	Meta *struct {
		Created      *string `json:"created,omitempty"`
		LastModified *string `json:"lastModified,omitempty"`
		Location     *string `json:"location,omitempty"`
		ResourceType *string `json:"resourceType,omitempty"`
	} `json:"meta,omitempty"`
	Schemas []string `json:"schemas"`
}

// ScimEnterpriseUser defines model for scim-enterprise-user.
type ScimEnterpriseUser struct {
	Active *bool `json:"active,omitempty"`
	Emails *[]struct {
		Primary *bool   `json:"primary,omitempty"`
		Type    *string `json:"type,omitempty"`
		Value   *string `json:"value,omitempty"`
	} `json:"emails,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	Groups     *[]struct {
		Value *string `json:"value,omitempty"`
	} `json:"groups,omitempty"`
	Id   string `json:"id"`
	Meta *struct {
		Created      *string `json:"created,omitempty"`
		LastModified *string `json:"lastModified,omitempty"`
		Location     *string `json:"location,omitempty"`
		ResourceType *string `json:"resourceType,omitempty"`
	} `json:"meta,omitempty"`
	Name *struct {
		FamilyName *string `json:"familyName,omitempty"`
		GivenName  *string `json:"givenName,omitempty"`
	} `json:"name,omitempty"`
	Schemas  []string `json:"schemas"`
	UserName *string  `json:"userName,omitempty"`
}

// Scim Error
type ScimError struct {
	Detail           *string   `json:"detail"`
	DocumentationUrl *string   `json:"documentation_url"`
	Message          *string   `json:"message"`
	Schemas          *[]string `json:"schemas,omitempty"`
	ScimType         *string   `json:"scimType"`
	Status           *int      `json:"status,omitempty"`
}

// ScimGroupListEnterprise defines model for scim-group-list-enterprise.
type ScimGroupListEnterprise struct {
	Resources []struct {
		DisplayName *string `json:"displayName,omitempty"`
		ExternalId  *string `json:"externalId"`
		Id          string  `json:"id"`
		Members     *[]struct {
			Ref     *string `json:"$ref,omitempty"`
			Display *string `json:"display,omitempty"`
			Value   *string `json:"value,omitempty"`
		} `json:"members,omitempty"`
		Meta *struct {
			Created      *string `json:"created,omitempty"`
			LastModified *string `json:"lastModified,omitempty"`
			Location     *string `json:"location,omitempty"`
			ResourceType *string `json:"resourceType,omitempty"`
		} `json:"meta,omitempty"`
		Schemas []string `json:"schemas"`
	} `json:"Resources"`
	ItemsPerPage float32  `json:"itemsPerPage"`
	Schemas      []string `json:"schemas"`
	StartIndex   float32  `json:"startIndex"`
	TotalResults float32  `json:"totalResults"`
}

// SCIM /Users provisioning endpoints
type ScimUser struct {
	// The active status of the User.
	Active bool `json:"active"`

	// The name of the user, suitable for display to end-users
	DisplayName *string `json:"displayName"`

	// user emails
	Emails []struct {
		Primary *bool  `json:"primary,omitempty"`
		Value   string `json:"value"`
	} `json:"emails"`

	// The ID of the User.
	ExternalId *string `json:"externalId"`

	// associated groups
	Groups *[]struct {
		Display *string `json:"display,omitempty"`
		Value   *string `json:"value,omitempty"`
	} `json:"groups,omitempty"`

	// Unique identifier of an external identity
	Id   string `json:"id"`
	Meta struct {
		Created      *time.Time `json:"created,omitempty"`
		LastModified *time.Time `json:"lastModified,omitempty"`
		Location     *string    `json:"location,omitempty"`
		ResourceType *string    `json:"resourceType,omitempty"`
	} `json:"meta"`
	Name struct {
		FamilyName *string `json:"familyName"`
		Formatted  *string `json:"formatted"`
		GivenName  *string `json:"givenName"`
	} `json:"name"`

	// Set of operations to be performed
	Operations *[]struct {
		Op    ScimUserOperationsOp `json:"op"`
		Path  *string              `json:"path,omitempty"`
		Value *interface{}         `json:"value,omitempty"`
	} `json:"operations,omitempty"`

	// The ID of the organization.
	OrganizationId *int `json:"organization_id,omitempty"`

	// SCIM schema used.
	Schemas []string `json:"schemas"`

	// Configured by the admin. Could be an email, login, or username
	UserName *string `json:"userName"`
}

// ScimUserOperationsOp defines model for ScimUser.Operations.Op.
type ScimUserOperationsOp string

// SCIM User List
type ScimUserList struct {
	Resources    []ScimUser `json:"Resources"`
	ItemsPerPage int        `json:"itemsPerPage"`

	// SCIM schema used.
	Schemas      []string `json:"schemas"`
	StartIndex   int      `json:"startIndex"`
	TotalResults int      `json:"totalResults"`
}

// ScimUserListEnterprise defines model for scim-user-list-enterprise.
type ScimUserListEnterprise struct {
	Resources []struct {
		Active *bool `json:"active,omitempty"`
		Emails *[]struct {
			Primary *bool   `json:"primary,omitempty"`
			Type    *string `json:"type,omitempty"`
			Value   *string `json:"value,omitempty"`
		} `json:"emails,omitempty"`
		ExternalId *string `json:"externalId,omitempty"`
		Groups     *[]struct {
			Value *string `json:"value,omitempty"`
		} `json:"groups,omitempty"`
		Id   string `json:"id"`
		Meta *struct {
			Created      *string `json:"created,omitempty"`
			LastModified *string `json:"lastModified,omitempty"`
			Location     *string `json:"location,omitempty"`
			ResourceType *string `json:"resourceType,omitempty"`
		} `json:"meta,omitempty"`
		Name *struct {
			FamilyName *string `json:"familyName,omitempty"`
			GivenName  *string `json:"givenName,omitempty"`
		} `json:"name,omitempty"`
		Schemas  []string `json:"schemas"`
		UserName *string  `json:"userName,omitempty"`
	} `json:"Resources"`
	ItemsPerPage float32  `json:"itemsPerPage"`
	Schemas      []string `json:"schemas"`
	StartIndex   float32  `json:"startIndex"`
	TotalResults float32  `json:"totalResults"`
}

// SearchResultTextMatches defines model for search-result-text-matches.
type SearchResultTextMatches []struct {
	Fragment *string `json:"fragment,omitempty"`
	Matches  *[]struct {
		Indices *[]int  `json:"indices,omitempty"`
		Text    *string `json:"text,omitempty"`
	} `json:"matches,omitempty"`
	ObjectType *string `json:"object_type"`
	ObjectUrl  *string `json:"object_url,omitempty"`
	Property   *string `json:"property,omitempty"`
}

// SecretScanningAlert defines model for secret-scanning-alert.
type SecretScanningAlert struct {
	// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	CreatedAt *AlertCreatedAt `json:"created_at,omitempty"`

	// The GitHub URL of the alert resource.
	HtmlUrl *AlertHtmlUrl `json:"html_url,omitempty"`

	// The REST API URL of the code locations for this alert.
	LocationsUrl *string `json:"locations_url,omitempty"`

	// The security alert number.
	Number *AlertNumber `json:"number,omitempty"`

	// **Required when the `state` is `resolved`.** The reason for resolving the alert.
	Resolution *SecretScanningAlertResolution `json:"resolution"`

	// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	ResolvedAt *time.Time `json:"resolved_at"`

	// Simple User
	ResolvedBy *NullableSimpleUser `json:"resolved_by"`

	// The secret that was detected.
	Secret *string `json:"secret,omitempty"`

	// The type of secret that secret scanning detected.
	SecretType *string `json:"secret_type,omitempty"`

	// User-friendly name for the detected secret, matching the `secret_type`.
	// For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
	SecretTypeDisplayName *string `json:"secret_type_display_name,omitempty"`

	// Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
	State *SecretScanningAlertState `json:"state,omitempty"`

	// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
	UpdatedAt *AlertUpdatedAt `json:"updated_at,omitempty"`

	// The REST API URL of the alert resource.
	Url *AlertUrl `json:"url,omitempty"`
}

// **Required when the `state` is `resolved`.** The reason for resolving the alert.
type SecretScanningAlertResolution string

// Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
type SecretScanningAlertState string

// SecretScanningLocation defines model for secret-scanning-location.
type SecretScanningLocation struct {
	Details interface{} `json:"details"`

	// The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
	Type SecretScanningLocationType `json:"type"`
}

// The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
type SecretScanningLocationType string

// Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
type SecretScanningLocationCommit struct {
	// SHA-1 hash ID of the associated blob
	BlobSha string `json:"blob_sha"`

	// The API URL to get the associated blob resource
	BlobUrl string `json:"blob_url"`

	// SHA-1 hash ID of the associated commit
	CommitSha string `json:"commit_sha"`

	// The API URL to get the associated commit resource
	CommitUrl string `json:"commit_url"`

	// The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
	EndColumn float32 `json:"end_column"`

	// Line number at which the secret ends in the file
	EndLine float32 `json:"end_line"`

	// The file path in the repository
	Path string `json:"path"`

	// The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
	StartColumn float32 `json:"start_column"`

	// Line number at which the secret starts in the file
	StartLine float32 `json:"start_line"`
}

// SelectedActions defines model for selected-actions.
type SelectedActions struct {
	// Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
	GithubOwnedAllowed *bool `json:"github_owned_allowed,omitempty"`

	// Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
	PatternsAllowed *[]string `json:"patterns_allowed,omitempty"`

	// Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
	VerifiedAllowed *bool `json:"verified_allowed,omitempty"`
}

// The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
type SelectedActionsUrl string

// Response of S4 Proxy endpoint that provides GHES statistics
type ServerStatistics struct {
	CollectionDate *string `json:"collection_date,omitempty"`
	DormantUsers   *struct {
		DormancyThreshold *string `json:"dormancy_threshold,omitempty"`
		TotalDormantUsers *int    `json:"total_dormant_users,omitempty"`
	} `json:"dormant_users,omitempty"`
	GheStats *struct {
		Comments *struct {
			TotalCommitComments      *int `json:"total_commit_comments,omitempty"`
			TotalGistComments        *int `json:"total_gist_comments,omitempty"`
			TotalIssueComments       *int `json:"total_issue_comments,omitempty"`
			TotalPullRequestComments *int `json:"total_pull_request_comments,omitempty"`
		} `json:"comments,omitempty"`
		Gists *struct {
			PrivateGists *int `json:"private_gists,omitempty"`
			PublicGists  *int `json:"public_gists,omitempty"`
			TotalGists   *int `json:"total_gists,omitempty"`
		} `json:"gists,omitempty"`
		Hooks *struct {
			ActiveHooks   *int `json:"active_hooks,omitempty"`
			InactiveHooks *int `json:"inactive_hooks,omitempty"`
			TotalHooks    *int `json:"total_hooks,omitempty"`
		} `json:"hooks,omitempty"`
		Issues *struct {
			ClosedIssues *int `json:"closed_issues,omitempty"`
			OpenIssues   *int `json:"open_issues,omitempty"`
			TotalIssues  *int `json:"total_issues,omitempty"`
		} `json:"issues,omitempty"`
		Milestones *struct {
			ClosedMilestones *int `json:"closed_milestones,omitempty"`
			OpenMilestones   *int `json:"open_milestones,omitempty"`
			TotalMilestones  *int `json:"total_milestones,omitempty"`
		} `json:"milestones,omitempty"`
		Orgs *struct {
			DisabledOrgs     *int `json:"disabled_orgs,omitempty"`
			TotalOrgs        *int `json:"total_orgs,omitempty"`
			TotalTeamMembers *int `json:"total_team_members,omitempty"`
			TotalTeams       *int `json:"total_teams,omitempty"`
		} `json:"orgs,omitempty"`
		Pages *struct {
			TotalPages *int `json:"total_pages,omitempty"`
		} `json:"pages,omitempty"`
		Pulls *struct {
			MergeablePulls   *int `json:"mergeable_pulls,omitempty"`
			MergedPulls      *int `json:"merged_pulls,omitempty"`
			TotalPulls       *int `json:"total_pulls,omitempty"`
			UnmergeablePulls *int `json:"unmergeable_pulls,omitempty"`
		} `json:"pulls,omitempty"`
		Repos *struct {
			ForkRepos   *int `json:"fork_repos,omitempty"`
			OrgRepos    *int `json:"org_repos,omitempty"`
			RootRepos   *int `json:"root_repos,omitempty"`
			TotalPushes *int `json:"total_pushes,omitempty"`
			TotalRepos  *int `json:"total_repos,omitempty"`
			TotalWikis  *int `json:"total_wikis,omitempty"`
		} `json:"repos,omitempty"`
		Users *struct {
			AdminUsers     *int `json:"admin_users,omitempty"`
			SuspendedUsers *int `json:"suspended_users,omitempty"`
			TotalUsers     *int `json:"total_users,omitempty"`
		} `json:"users,omitempty"`
	} `json:"ghe_stats,omitempty"`
	GhesVersion   *string `json:"ghes_version,omitempty"`
	GithubConnect *struct {
		FeaturesEnabled *[]string `json:"features_enabled,omitempty"`
	} `json:"github_connect,omitempty"`
	HostName      *string `json:"host_name,omitempty"`
	SchemaVersion *string `json:"schema_version,omitempty"`
	ServerId      *string `json:"server_id,omitempty"`
}

// Short Blob
type ShortBlob struct {
	Sha string `json:"sha"`
	Url string `json:"url"`
}

// Short Branch
type ShortBranch struct {
	Commit struct {
		Sha string `json:"sha"`
		Url string `json:"url"`
	} `json:"commit"`
	Name      string `json:"name"`
	Protected bool   `json:"protected"`

	// Branch Protection
	Protection    *BranchProtection `json:"protection,omitempty"`
	ProtectionUrl *string           `json:"protection_url,omitempty"`
}

// Simple Commit
type SimpleCommit struct {
	Author *struct {
		Email string `json:"email"`
		Name  string `json:"name"`
	} `json:"author"`
	Committer *struct {
		Email string `json:"email"`
		Name  string `json:"name"`
	} `json:"committer"`
	Id        string    `json:"id"`
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
	TreeId    string    `json:"tree_id"`
}

// SimpleCommitStatus defines model for simple-commit-status.
type SimpleCommitStatus struct {
	AvatarUrl   *string   `json:"avatar_url"`
	Context     string    `json:"context"`
	CreatedAt   time.Time `json:"created_at"`
	Description *string   `json:"description"`
	Id          int       `json:"id"`
	NodeId      string    `json:"node_id"`
	Required    *bool     `json:"required"`
	State       string    `json:"state"`
	TargetUrl   string    `json:"target_url"`
	UpdatedAt   time.Time `json:"updated_at"`
	Url         string    `json:"url"`
}

// Simple User
type SimpleUser struct {
	AvatarUrl         string  `json:"avatar_url"`
	Email             *string `json:"email"`
	EventsUrl         string  `json:"events_url"`
	FollowersUrl      string  `json:"followers_url"`
	FollowingUrl      string  `json:"following_url"`
	GistsUrl          string  `json:"gists_url"`
	GravatarId        *string `json:"gravatar_id"`
	HtmlUrl           string  `json:"html_url"`
	Id                int     `json:"id"`
	Login             string  `json:"login"`
	Name              *string `json:"name"`
	NodeId            string  `json:"node_id"`
	OrganizationsUrl  string  `json:"organizations_url"`
	ReceivedEventsUrl string  `json:"received_events_url"`
	ReposUrl          string  `json:"repos_url"`
	SiteAdmin         bool    `json:"site_admin"`
	StarredAt         *string `json:"starred_at,omitempty"`
	StarredUrl        string  `json:"starred_url"`
	SubscriptionsUrl  string  `json:"subscriptions_url"`
	Type              string  `json:"type"`
	Url               string  `json:"url"`
}

// Stargazer
type Stargazer struct {
	StarredAt time.Time `json:"starred_at"`

	// Simple User
	User *NullableSimpleUser `json:"user"`
}

// Starred Repository
type StarredRepository struct {
	// A git repository
	Repo      Repository `json:"repo"`
	StarredAt time.Time  `json:"starred_at"`
}

// State Change Issue Event
type StateChangeIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// The status of a commit.
type Status struct {
	AvatarUrl *string `json:"avatar_url"`
	Context   string  `json:"context"`
	CreatedAt string  `json:"created_at"`

	// Simple User
	Creator     *NullableSimpleUser `json:"creator"`
	Description string              `json:"description"`
	Id          int                 `json:"id"`
	NodeId      string              `json:"node_id"`
	State       string              `json:"state"`
	TargetUrl   string              `json:"target_url"`
	UpdatedAt   string              `json:"updated_at"`
	Url         string              `json:"url"`
}

// Status Check Policy
type StatusCheckPolicy struct {
	Checks []struct {
		AppId   *int   `json:"app_id"`
		Context string `json:"context"`
	} `json:"checks"`
	Contexts    []string `json:"contexts"`
	ContextsUrl string   `json:"contexts_url"`
	Strict      bool     `json:"strict"`
	Url         string   `json:"url"`
}

// Tag
type Tag struct {
	Commit struct {
		Sha string `json:"sha"`
		Url string `json:"url"`
	} `json:"commit"`
	Name       string `json:"name"`
	NodeId     string `json:"node_id"`
	TarballUrl string `json:"tarball_url"`
	ZipballUrl string `json:"zipball_url"`
}

// Tag protection
type TagProtection struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Enabled   *bool   `json:"enabled,omitempty"`
	Id        *int    `json:"id,omitempty"`
	Pattern   string  `json:"pattern"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// Groups of organization members that gives permissions on specified repositories.
type Team struct {
	Description *string `json:"description"`
	HtmlUrl     string  `json:"html_url"`
	Id          int     `json:"id"`
	MembersUrl  string  `json:"members_url"`
	Name        string  `json:"name"`
	NodeId      string  `json:"node_id"`

	// Groups of organization members that gives permissions on specified repositories.
	Parent      *NullableTeamSimple `json:"parent"`
	Permission  string              `json:"permission"`
	Permissions *struct {
		Admin    bool `json:"admin"`
		Maintain bool `json:"maintain"`
		Pull     bool `json:"pull"`
		Push     bool `json:"push"`
		Triage   bool `json:"triage"`
	} `json:"permissions,omitempty"`
	Privacy         *string `json:"privacy,omitempty"`
	RepositoriesUrl string  `json:"repositories_url"`
	Slug            string  `json:"slug"`
	Url             string  `json:"url"`
}

// A team discussion is a persistent record of a free-form conversation within a team.
type TeamDiscussion struct {
	// Simple User
	Author *NullableSimpleUser `json:"author"`

	// The main text of the discussion.
	Body     string `json:"body"`
	BodyHtml string `json:"body_html"`

	// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
	BodyVersion   string     `json:"body_version"`
	CommentsCount int        `json:"comments_count"`
	CommentsUrl   string     `json:"comments_url"`
	CreatedAt     time.Time  `json:"created_at"`
	HtmlUrl       string     `json:"html_url"`
	LastEditedAt  *time.Time `json:"last_edited_at"`
	NodeId        string     `json:"node_id"`

	// The unique sequence number of a team discussion.
	Number int `json:"number"`

	// Whether or not this discussion should be pinned for easy retrieval.
	Pinned bool `json:"pinned"`

	// Whether or not this discussion should be restricted to team members and organization administrators.
	Private   bool            `json:"private"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`
	TeamUrl   string          `json:"team_url"`

	// The title of the discussion.
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`
	Url       string    `json:"url"`
}

// A reply to a discussion within a team.
type TeamDiscussionComment struct {
	// Simple User
	Author *NullableSimpleUser `json:"author"`

	// The main text of the comment.
	Body     string `json:"body"`
	BodyHtml string `json:"body_html"`

	// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
	BodyVersion   string     `json:"body_version"`
	CreatedAt     time.Time  `json:"created_at"`
	DiscussionUrl string     `json:"discussion_url"`
	HtmlUrl       string     `json:"html_url"`
	LastEditedAt  *time.Time `json:"last_edited_at"`
	NodeId        string     `json:"node_id"`

	// The unique sequence number of a team discussion comment.
	Number    int             `json:"number"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`
	UpdatedAt time.Time       `json:"updated_at"`
	Url       string          `json:"url"`
}

// Groups of organization members that gives permissions on specified repositories.
type TeamFull struct {
	CreatedAt   time.Time `json:"created_at"`
	Description *string   `json:"description"`
	HtmlUrl     string    `json:"html_url"`

	// Unique identifier of the team
	Id int `json:"id"`

	// Distinguished Name (DN) that team maps to within LDAP environment
	LdapDn       *string `json:"ldap_dn,omitempty"`
	MembersCount int     `json:"members_count"`
	MembersUrl   string  `json:"members_url"`

	// Name of the team
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// Organization Full
	Organization OrganizationFull `json:"organization"`

	// Groups of organization members that gives permissions on specified repositories.
	Parent *NullableTeamSimple `json:"parent"`

	// Permission that the team will have for its repositories
	Permission string `json:"permission"`

	// The level of privacy this team should have
	Privacy         *TeamFullPrivacy `json:"privacy,omitempty"`
	ReposCount      int              `json:"repos_count"`
	RepositoriesUrl string           `json:"repositories_url"`
	Slug            string           `json:"slug"`
	UpdatedAt       time.Time        `json:"updated_at"`

	// URL for the team
	Url string `json:"url"`
}

// The level of privacy this team should have
type TeamFullPrivacy string

// Team Membership
type TeamMembership struct {
	// The role of the user in the team.
	Role TeamMembershipRole `json:"role"`

	// The state of the user's membership in the team.
	State TeamMembershipState `json:"state"`
	Url   string              `json:"url"`
}

// The role of the user in the team.
type TeamMembershipRole string

// The state of the user's membership in the team.
type TeamMembershipState string

// A team's access to a project.
type TeamProject struct {
	Body       *string `json:"body"`
	ColumnsUrl string  `json:"columns_url"`
	CreatedAt  string  `json:"created_at"`

	// Simple User
	Creator SimpleUser `json:"creator"`
	HtmlUrl string     `json:"html_url"`
	Id      int        `json:"id"`
	Name    string     `json:"name"`
	NodeId  string     `json:"node_id"`
	Number  int        `json:"number"`

	// The organization permission for this project. Only present when owner is an organization.
	OrganizationPermission *string `json:"organization_permission,omitempty"`
	OwnerUrl               string  `json:"owner_url"`
	Permissions            struct {
		Admin bool `json:"admin"`
		Read  bool `json:"read"`
		Write bool `json:"write"`
	} `json:"permissions"`

	// Whether the project is private or not. Only present when owner is an organization.
	Private   *bool  `json:"private,omitempty"`
	State     string `json:"state"`
	UpdatedAt string `json:"updated_at"`
	Url       string `json:"url"`
}

// A team's access to a repository.
type TeamRepository struct {
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow forking this repo
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool  `json:"allow_squash_merge,omitempty"`
	ArchiveUrl       string `json:"archive_url"`

	// Whether the repository is archived.
	Archived         bool       `json:"archived"`
	AssigneesUrl     string     `json:"assignees_url"`
	BlobsUrl         string     `json:"blobs_url"`
	BranchesUrl      string     `json:"branches_url"`
	CloneUrl         string     `json:"clone_url"`
	CollaboratorsUrl string     `json:"collaborators_url"`
	CommentsUrl      string     `json:"comments_url"`
	CommitsUrl       string     `json:"commits_url"`
	CompareUrl       string     `json:"compare_url"`
	ContentsUrl      string     `json:"contents_url"`
	ContributorsUrl  string     `json:"contributors_url"`
	CreatedAt        *time.Time `json:"created_at"`

	// The default branch of the repository.
	DefaultBranch string `json:"default_branch"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool   `json:"delete_branch_on_merge,omitempty"`
	DeploymentsUrl      string  `json:"deployments_url"`
	Description         *string `json:"description"`

	// Returns whether or not this repository disabled.
	Disabled      bool   `json:"disabled"`
	DownloadsUrl  string `json:"downloads_url"`
	EventsUrl     string `json:"events_url"`
	Fork          bool   `json:"fork"`
	Forks         int    `json:"forks"`
	ForksCount    int    `json:"forks_count"`
	ForksUrl      string `json:"forks_url"`
	FullName      string `json:"full_name"`
	GitCommitsUrl string `json:"git_commits_url"`
	GitRefsUrl    string `json:"git_refs_url"`
	GitTagsUrl    string `json:"git_tags_url"`
	GitUrl        string `json:"git_url"`

	// Whether downloads are enabled.
	HasDownloads bool `json:"has_downloads"`

	// Whether issues are enabled.
	HasIssues bool `json:"has_issues"`
	HasPages  bool `json:"has_pages"`

	// Whether projects are enabled.
	HasProjects bool `json:"has_projects"`

	// Whether the wiki is enabled.
	HasWiki  bool    `json:"has_wiki"`
	Homepage *string `json:"homepage"`
	HooksUrl string  `json:"hooks_url"`
	HtmlUrl  string  `json:"html_url"`

	// Unique identifier of the repository
	Id int `json:"id"`

	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate      *bool   `json:"is_template,omitempty"`
	IssueCommentUrl string  `json:"issue_comment_url"`
	IssueEventsUrl  string  `json:"issue_events_url"`
	IssuesUrl       string  `json:"issues_url"`
	KeysUrl         string  `json:"keys_url"`
	LabelsUrl       string  `json:"labels_url"`
	Language        *string `json:"language"`
	LanguagesUrl    string  `json:"languages_url"`

	// License Simple
	License       *NullableLicenseSimple `json:"license"`
	MasterBranch  *string                `json:"master_branch,omitempty"`
	MergesUrl     string                 `json:"merges_url"`
	MilestonesUrl string                 `json:"milestones_url"`
	MirrorUrl     *string                `json:"mirror_url"`

	// The name of the repository.
	Name             string `json:"name"`
	NetworkCount     *int   `json:"network_count,omitempty"`
	NodeId           string `json:"node_id"`
	NotificationsUrl string `json:"notifications_url"`
	OpenIssues       int    `json:"open_issues"`
	OpenIssuesCount  int    `json:"open_issues_count"`

	// Simple User
	Owner       *NullableSimpleUser `json:"owner"`
	Permissions *struct {
		Admin    bool  `json:"admin"`
		Maintain *bool `json:"maintain,omitempty"`
		Pull     bool  `json:"pull"`
		Push     bool  `json:"push"`
		Triage   *bool `json:"triage,omitempty"`
	} `json:"permissions,omitempty"`

	// Whether the repository is private or public.
	Private          bool       `json:"private"`
	PullsUrl         string     `json:"pulls_url"`
	PushedAt         *time.Time `json:"pushed_at"`
	ReleasesUrl      string     `json:"releases_url"`
	RoleName         *string    `json:"role_name,omitempty"`
	Size             int        `json:"size"`
	SshUrl           string     `json:"ssh_url"`
	StargazersCount  int        `json:"stargazers_count"`
	StargazersUrl    string     `json:"stargazers_url"`
	StatusesUrl      string     `json:"statuses_url"`
	SubscribersCount *int       `json:"subscribers_count,omitempty"`
	SubscribersUrl   string     `json:"subscribers_url"`
	SubscriptionUrl  string     `json:"subscription_url"`
	SvnUrl           string     `json:"svn_url"`
	TagsUrl          string     `json:"tags_url"`
	TeamsUrl         string     `json:"teams_url"`
	TempCloneToken   *string    `json:"temp_clone_token,omitempty"`

	// A git repository
	TemplateRepository *NullableRepository `json:"template_repository"`
	Topics             *[]string           `json:"topics,omitempty"`
	TreesUrl           string              `json:"trees_url"`
	UpdatedAt          *time.Time          `json:"updated_at"`
	Url                string              `json:"url"`

	// The repository visibility: public, private, or internal.
	Visibility    *string `json:"visibility,omitempty"`
	Watchers      int     `json:"watchers"`
	WatchersCount int     `json:"watchers_count"`
}

// Groups of organization members that gives permissions on specified repositories.
type TeamSimple struct {
	// Description of the team
	Description *string `json:"description"`
	HtmlUrl     string  `json:"html_url"`

	// Unique identifier of the team
	Id int `json:"id"`

	// Distinguished Name (DN) that team maps to within LDAP environment
	LdapDn     *string `json:"ldap_dn,omitempty"`
	MembersUrl string  `json:"members_url"`

	// Name of the team
	Name   string `json:"name"`
	NodeId string `json:"node_id"`

	// Permission that the team will have for its repositories
	Permission string `json:"permission"`

	// The level of privacy this team should have
	Privacy         *string `json:"privacy,omitempty"`
	RepositoriesUrl string  `json:"repositories_url"`
	Slug            string  `json:"slug"`

	// URL for the team
	Url string `json:"url"`
}

// Thread
type Thread struct {
	Id         string  `json:"id"`
	LastReadAt *string `json:"last_read_at"`
	Reason     string  `json:"reason"`

	// Minimal Repository
	Repository MinimalRepository `json:"repository"`
	Subject    struct {
		LatestCommentUrl string `json:"latest_comment_url"`
		Title            string `json:"title"`
		Type             string `json:"type"`
		Url              string `json:"url"`
	} `json:"subject"`
	SubscriptionUrl string `json:"subscription_url"`
	Unread          bool   `json:"unread"`
	UpdatedAt       string `json:"updated_at"`
	Url             string `json:"url"`
}

// Thread Subscription
type ThreadSubscription struct {
	CreatedAt     *time.Time `json:"created_at"`
	Ignored       bool       `json:"ignored"`
	Reason        *string    `json:"reason"`
	RepositoryUrl *string    `json:"repository_url,omitempty"`
	Subscribed    bool       `json:"subscribed"`
	ThreadUrl     *string    `json:"thread_url,omitempty"`
	Url           string     `json:"url"`
}

// Timeline Assigned Issue Event
type TimelineAssignedIssueEvent struct {
	// Simple User
	Actor SimpleUser `json:"actor"`

	// Simple User
	Assignee  SimpleUser `json:"assignee"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// Timeline Comment Event
type TimelineCommentEvent struct {
	// Simple User
	Actor SimpleUser `json:"actor"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// Contents of the issue comment
	Body      *string   `json:"body,omitempty"`
	BodyHtml  *string   `json:"body_html,omitempty"`
	BodyText  *string   `json:"body_text,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	Event     string    `json:"event"`
	HtmlUrl   string    `json:"html_url"`

	// Unique identifier of the issue comment
	Id       int    `json:"id"`
	IssueUrl string `json:"issue_url"`
	NodeId   string `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Reactions             *ReactionRollup      `json:"reactions,omitempty"`
	UpdatedAt             time.Time            `json:"updated_at"`

	// URL for the issue comment
	Url string `json:"url"`

	// Simple User
	User SimpleUser `json:"user"`
}

// Timeline Commit Commented Event
type TimelineCommitCommentedEvent struct {
	Comments *[]CommitComment `json:"comments,omitempty"`
	CommitId *string          `json:"commit_id,omitempty"`
	Event    *string          `json:"event,omitempty"`
	NodeId   *string          `json:"node_id,omitempty"`
}

// Timeline Committed Event
type TimelineCommittedEvent struct {
	// Identifying information for the git-user
	Author struct {
		// Timestamp of the commit
		Date time.Time `json:"date"`

		// Git email address of the user
		Email string `json:"email"`

		// Name of the git user
		Name string `json:"name"`
	} `json:"author"`

	// Identifying information for the git-user
	Committer struct {
		// Timestamp of the commit
		Date time.Time `json:"date"`

		// Git email address of the user
		Email string `json:"email"`

		// Name of the git user
		Name string `json:"name"`
	} `json:"committer"`
	Event   *string `json:"event,omitempty"`
	HtmlUrl string  `json:"html_url"`

	// Message describing the purpose of the commit
	Message string `json:"message"`
	NodeId  string `json:"node_id"`
	Parents []struct {
		HtmlUrl string `json:"html_url"`

		// SHA for the commit
		Sha string `json:"sha"`
		Url string `json:"url"`
	} `json:"parents"`

	// SHA for the commit
	Sha  string `json:"sha"`
	Tree struct {
		// SHA for the commit
		Sha string `json:"sha"`
		Url string `json:"url"`
	} `json:"tree"`
	Url          string `json:"url"`
	Verification struct {
		Payload   *string `json:"payload"`
		Reason    string  `json:"reason"`
		Signature *string `json:"signature"`
		Verified  bool    `json:"verified"`
	} `json:"verification"`
}

// Timeline Cross Referenced Event
type TimelineCrossReferencedEvent struct {
	// Simple User
	Actor     *SimpleUser `json:"actor,omitempty"`
	CreatedAt time.Time   `json:"created_at"`
	Event     string      `json:"event"`
	Source    struct {
		// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
		Issue *Issue  `json:"issue,omitempty"`
		Type  *string `json:"type,omitempty"`
	} `json:"source"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Timeline Event
type TimelineIssueEvents interface{}

// Timeline Line Commented Event
type TimelineLineCommentedEvent struct {
	Comments *[]PullRequestReviewComment `json:"comments,omitempty"`
	Event    *string                     `json:"event,omitempty"`
	NodeId   *string                     `json:"node_id,omitempty"`
}

// Timeline Reviewed Event
type TimelineReviewedEvent struct {
	Links struct {
		Html struct {
			Href string `json:"href"`
		} `json:"html"`
		PullRequest struct {
			Href string `json:"href"`
		} `json:"pull_request"`
	} `json:"_links"`

	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociation `json:"author_association"`

	// The text of the review.
	Body     *string `json:"body"`
	BodyHtml *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// A commit SHA for the review.
	CommitId string `json:"commit_id"`
	Event    string `json:"event"`
	HtmlUrl  string `json:"html_url"`

	// Unique identifier of the review
	Id             int        `json:"id"`
	NodeId         string     `json:"node_id"`
	PullRequestUrl string     `json:"pull_request_url"`
	State          string     `json:"state"`
	SubmittedAt    *time.Time `json:"submitted_at,omitempty"`

	// Simple User
	User SimpleUser `json:"user"`
}

// Timeline Unassigned Issue Event
type TimelineUnassignedIssueEvent struct {
	// Simple User
	Actor SimpleUser `json:"actor"`

	// Simple User
	Assignee  SimpleUser `json:"assignee"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// A topic aggregates entities that are related to a subject.
type Topic struct {
	Names []string `json:"names"`
}

// Topic Search Result Item
type TopicSearchResultItem struct {
	Aliases *[]struct {
		TopicRelation *struct {
			Id           *int    `json:"id,omitempty"`
			Name         *string `json:"name,omitempty"`
			RelationType *string `json:"relation_type,omitempty"`
			TopicId      *int    `json:"topic_id,omitempty"`
		} `json:"topic_relation,omitempty"`
	} `json:"aliases"`
	CreatedAt   time.Time `json:"created_at"`
	CreatedBy   *string   `json:"created_by"`
	Curated     bool      `json:"curated"`
	Description *string   `json:"description"`
	DisplayName *string   `json:"display_name"`
	Featured    bool      `json:"featured"`
	LogoUrl     *string   `json:"logo_url"`
	Name        string    `json:"name"`
	Related     *[]struct {
		TopicRelation *struct {
			Id           *int    `json:"id,omitempty"`
			Name         *string `json:"name,omitempty"`
			RelationType *string `json:"relation_type,omitempty"`
			TopicId      *int    `json:"topic_id,omitempty"`
		} `json:"topic_relation,omitempty"`
	} `json:"related"`
	Released         *string                  `json:"released"`
	RepositoryCount  *int                     `json:"repository_count"`
	Score            float32                  `json:"score"`
	ShortDescription *string                  `json:"short_description"`
	TextMatches      *SearchResultTextMatches `json:"text_matches,omitempty"`
	UpdatedAt        time.Time                `json:"updated_at"`
}

// Traffic defines model for traffic.
type Traffic struct {
	Count     int       `json:"count"`
	Timestamp time.Time `json:"timestamp"`
	Uniques   int       `json:"uniques"`
}

// Unassigned Issue Event
type UnassignedIssueEvent struct {
	// Simple User
	Actor SimpleUser `json:"actor"`

	// Simple User
	Assignee SimpleUser `json:"assignee"`

	// Simple User
	Assigner  SimpleUser `json:"assigner"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	NodeId    string     `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// Unlabeled Issue Event
type UnlabeledIssueEvent struct {
	// Simple User
	Actor     SimpleUser `json:"actor"`
	CommitId  *string    `json:"commit_id"`
	CommitUrl *string    `json:"commit_url"`
	CreatedAt string     `json:"created_at"`
	Event     string     `json:"event"`
	Id        int        `json:"id"`
	Label     struct {
		Color string `json:"color"`
		Name  string `json:"name"`
	} `json:"label"`
	NodeId string `json:"node_id"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app"`
	Url                   string               `json:"url"`
}

// User Marketplace Purchase
type UserMarketplacePurchase struct {
	Account         MarketplaceAccount `json:"account"`
	BillingCycle    string             `json:"billing_cycle"`
	FreeTrialEndsOn *time.Time         `json:"free_trial_ends_on"`
	NextBillingDate *time.Time         `json:"next_billing_date"`
	OnFreeTrial     bool               `json:"on_free_trial"`

	// Marketplace Listing Plan
	Plan      MarketplaceListingPlan `json:"plan"`
	UnitCount *int                   `json:"unit_count"`
	UpdatedAt *time.Time             `json:"updated_at"`
}

// User Search Result Item
type UserSearchResultItem struct {
	AvatarUrl         string                   `json:"avatar_url"`
	Bio               *string                  `json:"bio"`
	Blog              *string                  `json:"blog"`
	Company           *string                  `json:"company"`
	CreatedAt         *time.Time               `json:"created_at,omitempty"`
	Email             *openapi_types.Email     `json:"email"`
	EventsUrl         string                   `json:"events_url"`
	Followers         *int                     `json:"followers,omitempty"`
	FollowersUrl      string                   `json:"followers_url"`
	Following         *int                     `json:"following,omitempty"`
	FollowingUrl      string                   `json:"following_url"`
	GistsUrl          string                   `json:"gists_url"`
	GravatarId        *string                  `json:"gravatar_id"`
	Hireable          *bool                    `json:"hireable"`
	HtmlUrl           string                   `json:"html_url"`
	Id                int                      `json:"id"`
	Location          *string                  `json:"location"`
	Login             string                   `json:"login"`
	Name              *string                  `json:"name"`
	NodeId            string                   `json:"node_id"`
	OrganizationsUrl  string                   `json:"organizations_url"`
	PublicGists       *int                     `json:"public_gists,omitempty"`
	PublicRepos       *int                     `json:"public_repos,omitempty"`
	ReceivedEventsUrl string                   `json:"received_events_url"`
	ReposUrl          string                   `json:"repos_url"`
	Score             float32                  `json:"score"`
	SiteAdmin         bool                     `json:"site_admin"`
	StarredUrl        string                   `json:"starred_url"`
	SubscriptionsUrl  string                   `json:"subscriptions_url"`
	SuspendedAt       *time.Time               `json:"suspended_at"`
	TextMatches       *SearchResultTextMatches `json:"text_matches,omitempty"`
	Type              string                   `json:"type"`
	UpdatedAt         *time.Time               `json:"updated_at,omitempty"`
	Url               string                   `json:"url"`
}

// Validation Error
type ValidationError struct {
	DocumentationUrl string `json:"documentation_url"`
	Errors           *[]struct {
		Code     string       `json:"code"`
		Field    *string      `json:"field,omitempty"`
		Index    *int         `json:"index,omitempty"`
		Message  *string      `json:"message,omitempty"`
		Resource *string      `json:"resource,omitempty"`
		Value    *interface{} `json:"value,omitempty"`
	} `json:"errors,omitempty"`
	Message string `json:"message"`
}

// Validation Error Simple
type ValidationErrorSimple struct {
	DocumentationUrl string    `json:"documentation_url"`
	Errors           *[]string `json:"errors,omitempty"`
	Message          string    `json:"message"`
}

// Verification defines model for verification.
type Verification struct {
	Payload   *string `json:"payload"`
	Reason    string  `json:"reason"`
	Signature *string `json:"signature"`
	Verified  bool    `json:"verified"`
}

// View Traffic
type ViewTraffic struct {
	Count   int       `json:"count"`
	Uniques int       `json:"uniques"`
	Views   []Traffic `json:"views"`
}

// The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
type WaitTimer int

// Configuration object of the webhook
type WebhookConfig struct {
	// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
	ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
	InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`

	// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
	Secret *WebhookConfigSecret `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	Url *WebhookConfigUrl `json:"url,omitempty"`
}

// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
type WebhookConfigContentType string

// WebhookConfigInsecureSsl defines model for webhook-config-insecure-ssl.
type WebhookConfigInsecureSsl interface{}

// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
type WebhookConfigSecret string

// The URL to which the payloads will be delivered.
type WebhookConfigUrl string

// A GitHub Actions workflow
type Workflow struct {
	BadgeUrl  string        `json:"badge_url"`
	CreatedAt time.Time     `json:"created_at"`
	DeletedAt *time.Time    `json:"deleted_at,omitempty"`
	HtmlUrl   string        `json:"html_url"`
	Id        int           `json:"id"`
	Name      string        `json:"name"`
	NodeId    string        `json:"node_id"`
	Path      string        `json:"path"`
	State     WorkflowState `json:"state"`
	UpdatedAt time.Time     `json:"updated_at"`
	Url       string        `json:"url"`
}

// WorkflowState defines model for Workflow.State.
type WorkflowState string

// An invocation of a workflow
type WorkflowRun struct {
	// Simple User
	Actor *SimpleUser `json:"actor,omitempty"`

	// The URL to the artifacts for the workflow run.
	ArtifactsUrl string `json:"artifacts_url"`

	// The URL to cancel the workflow run.
	CancelUrl string `json:"cancel_url"`

	// The ID of the associated check suite.
	CheckSuiteId *int `json:"check_suite_id,omitempty"`

	// The node ID of the associated check suite.
	CheckSuiteNodeId *string `json:"check_suite_node_id,omitempty"`

	// The URL to the associated check suite.
	CheckSuiteUrl string    `json:"check_suite_url"`
	Conclusion    *string   `json:"conclusion"`
	CreatedAt     time.Time `json:"created_at"`
	Event         string    `json:"event"`
	HeadBranch    *string   `json:"head_branch"`

	// Simple Commit
	HeadCommit *NullableSimpleCommit `json:"head_commit"`

	// Minimal Repository
	HeadRepository   MinimalRepository `json:"head_repository"`
	HeadRepositoryId *int              `json:"head_repository_id,omitempty"`

	// The SHA of the head commit that points to the version of the workflow being run.
	HeadSha string `json:"head_sha"`
	HtmlUrl string `json:"html_url"`

	// The ID of the workflow run.
	Id int `json:"id"`

	// The URL to the jobs for the workflow run.
	JobsUrl string `json:"jobs_url"`

	// The URL to download the logs for the workflow run.
	LogsUrl string `json:"logs_url"`

	// The name of the workflow run.
	Name   *string `json:"name"`
	NodeId string  `json:"node_id"`

	// The full path of the workflow
	Path string `json:"path"`

	// The URL to the previous attempted run of this workflow, if one exists.
	PreviousAttemptUrl  *string               `json:"previous_attempt_url"`
	PullRequests        *[]PullRequestMinimal `json:"pull_requests"`
	ReferencedWorkflows *[]ReferencedWorkflow `json:"referenced_workflows"`

	// Minimal Repository
	Repository MinimalRepository `json:"repository"`

	// The URL to rerun the workflow run.
	RerunUrl string `json:"rerun_url"`

	// Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
	RunAttempt *int `json:"run_attempt,omitempty"`

	// The auto incrementing run number for the workflow run.
	RunNumber int `json:"run_number"`

	// The start time of the latest run. Resets on re-run.
	RunStartedAt *time.Time `json:"run_started_at,omitempty"`
	Status       *string    `json:"status"`

	// Simple User
	TriggeringActor *SimpleUser `json:"triggering_actor,omitempty"`
	UpdatedAt       time.Time   `json:"updated_at"`

	// The URL to the workflow run.
	Url string `json:"url"`

	// The ID of the parent workflow.
	WorkflowId int `json:"workflow_id"`

	// The URL to the workflow.
	WorkflowUrl string `json:"workflow_url"`
}

// Workflow Run Usage
type WorkflowRunUsage struct {
	Billable struct {
		MACOS *struct {
			JobRuns *[]struct {
				DurationMs int `json:"duration_ms"`
				JobId      int `json:"job_id"`
			} `json:"job_runs,omitempty"`
			Jobs    int `json:"jobs"`
			TotalMs int `json:"total_ms"`
		} `json:"MACOS,omitempty"`
		UBUNTU *struct {
			JobRuns *[]struct {
				DurationMs int `json:"duration_ms"`
				JobId      int `json:"job_id"`
			} `json:"job_runs,omitempty"`
			Jobs    int `json:"jobs"`
			TotalMs int `json:"total_ms"`
		} `json:"UBUNTU,omitempty"`
		WINDOWS *struct {
			JobRuns *[]struct {
				DurationMs int `json:"duration_ms"`
				JobId      int `json:"job_id"`
			} `json:"job_runs,omitempty"`
			Jobs    int `json:"jobs"`
			TotalMs int `json:"total_ms"`
		} `json:"WINDOWS,omitempty"`
	} `json:"billable"`
	RunDurationMs *int `json:"run_duration_ms,omitempty"`
}

// Workflow Usage
type WorkflowUsage struct {
	Billable struct {
		MACOS *struct {
			TotalMs *int `json:"total_ms,omitempty"`
		} `json:"MACOS,omitempty"`
		UBUNTU *struct {
			TotalMs *int `json:"total_ms,omitempty"`
		} `json:"UBUNTU,omitempty"`
		WINDOWS *struct {
			TotalMs *int `json:"total_ms,omitempty"`
		} `json:"WINDOWS,omitempty"`
	} `json:"billable"`
}

// AccountId defines model for account-id.
type AccountId int

// All defines model for all.
type All bool

// AppSlug defines model for app-slug.
type AppSlug string

// ArtifactId defines model for artifact-id.
type ArtifactId int

// AssetId defines model for asset-id.
type AssetId int

// AttemptNumber defines model for attempt-number.
type AttemptNumber int

// AuditLogAfter defines model for audit-log-after.
type AuditLogAfter string

// AuditLogBefore defines model for audit-log-before.
type AuditLogBefore string

// AuditLogInclude defines model for audit-log-include.
type AuditLogInclude string

// AuditLogOrder defines model for audit-log-order.
type AuditLogOrder string

// AuditLogPhrase defines model for audit-log-phrase.
type AuditLogPhrase string

// AuthorizationId defines model for authorization-id.
type AuthorizationId int

// AutolinkId defines model for autolink-id.
type AutolinkId int

// Before defines model for before.
type Before time.Time

// Branch defines model for branch.
type Branch string

// CardId defines model for card-id.
type CardId int

// CheckName defines model for check-name.
type CheckName string

// CheckRunId defines model for check-run-id.
type CheckRunId int

// CheckSuiteId defines model for check-suite-id.
type CheckSuiteId int

// ClientId defines model for client-id.
type ClientId string

// CodespaceName defines model for codespace-name.
type CodespaceName string

// ColumnId defines model for column-id.
type ColumnId int

// CommentId defines model for comment-id.
type CommentId int

// CommentNumber defines model for comment-number.
type CommentNumber int

// CommitSha defines model for commit-sha.
type CommitSha string

// Count defines model for count.
type Count int

// Created defines model for created.
type Created time.Time

// Cursor defines model for cursor.
type Cursor string

// DeliveryId defines model for delivery-id.
type DeliveryId int

// DeploymentId defines model for deployment-id.
type DeploymentId int

// Direction defines model for direction.
type Direction string

// DiscussionNumber defines model for discussion-number.
type DiscussionNumber int

// EnterpriseOrOrg defines model for enterprise_or_org.
type EnterpriseOrOrg string

// EnvironmentName defines model for environment-name.
type EnvironmentName string

// ExcludePullRequests defines model for exclude-pull-requests.
type ExcludePullRequests bool

// ExportId defines model for export-id.
type ExportId string

// GistId defines model for gist-id.
type GistId string

// GpgKeyId defines model for gpg-key-id.
type GpgKeyId int

// GrantId defines model for grant-id.
type GrantId int

// GroupId defines model for group-id.
type GroupId int

// HookId defines model for hook-id.
type HookId int

// InstallationId defines model for installation-id.
type InstallationId int

// InvitationId defines model for invitation-id.
type InvitationId int

// IssueNumber defines model for issue-number.
type IssueNumber int

// JobId defines model for job-id.
type JobId int

// KeyId defines model for key-id.
type KeyId int

// Labels defines model for labels.
type Labels string

// ManifestPath defines model for manifest-path.
type ManifestPath string

// MigrationId defines model for migration-id.
type MigrationId int

// MilestoneNumber defines model for milestone-number.
type MilestoneNumber int

// Order defines model for order.
type Order string

// Org defines model for org.
type Org string

// OrgId defines model for org-id.
type OrgId int

// Owner defines model for owner.
type Owner string

// PackageName defines model for package-name.
type PackageName string

// PackageType defines model for package-type.
type PackageType string

// PackageVersionId defines model for package-version-id.
type PackageVersionId int

// PaginationAfter defines model for pagination-after.
type PaginationAfter string

// PaginationBefore defines model for pagination-before.
type PaginationBefore string

// Participating defines model for participating.
type Participating bool

// Per defines model for per.
type Per string

// PerPage defines model for per-page.
type PerPage int

// PlanId defines model for plan-id.
type PlanId int

// ProjectId defines model for project-id.
type ProjectId int

// PullNumber defines model for pull-number.
type PullNumber int

// ReactionId defines model for reaction-id.
type ReactionId int

// ReleaseId defines model for release-id.
type ReleaseId int

// Repo defines model for repo.
type Repo string

// RepoName defines model for repo-name.
type RepoName string

// RepositoryId defines model for repository-id.
type RepositoryId int

// RepositoryIdInQuery defines model for repository-id-in-query.
type RepositoryIdInQuery int

// ReviewId defines model for review-id.
type ReviewId int

// RunId defines model for run-id.
type RunId int

// RunnerGroupId defines model for runner-group-id.
type RunnerGroupId int

// RunnerId defines model for runner-id.
type RunnerId int

// RunnerLabelName defines model for runner-label-name.
type RunnerLabelName string

// ScimGroupId defines model for scim-group-id.
type ScimGroupId string

// ScimUserId defines model for scim-user-id.
type ScimUserId string

// SecretName defines model for secret-name.
type SecretName string

// SecretScanningAlertSecretType defines model for secret-scanning-alert-secret-type.
type SecretScanningAlertSecretType string

// Since defines model for since.
type Since time.Time

// SinceOrg defines model for since-org.
type SinceOrg int

// SinceRepo defines model for since-repo.
type SinceRepo int

// SinceUser defines model for since-user.
type SinceUser int

// Sort defines model for sort.
type Sort string

// StartIndex defines model for start-index.
type StartIndex int

// TagProtectionId defines model for tag_protection_id.
type TagProtectionId int

// TeamId defines model for team-id.
type TeamId int

// TeamSlug defines model for team-slug.
type TeamSlug string

// ThreadId defines model for thread-id.
type ThreadId int

// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
type ToolGuid CodeScanningAnalysisToolGuid

// The name of the tool used to generate the code scanning analysis.
type ToolName CodeScanningAnalysisToolName

// Username defines model for username.
type Username string

// VisibleToOrganization defines model for visible-to-organization.
type VisibleToOrganization string

// VisibleToRepository defines model for visible-to-repository.
type VisibleToRepository string

// WorkflowId defines model for workflow-id.
type WorkflowId interface{}

// WorkflowRunBranch defines model for workflow-run-branch.
type WorkflowRunBranch string

// WorkflowRunCheckSuiteId defines model for workflow-run-check-suite-id.
type WorkflowRunCheckSuiteId int

// WorkflowRunStatus defines model for workflow-run-status.
type WorkflowRunStatus string

// Accepted defines model for accepted.
type Accepted map[string]interface{}

// ActionsRunnerLabels defines model for actions_runner_labels.
type ActionsRunnerLabels struct {
	Labels     []RunnerLabel `json:"labels"`
	TotalCount int           `json:"total_count"`
}

// ActionsRunnerLabelsReadonly defines model for actions_runner_labels_readonly.
type ActionsRunnerLabelsReadonly struct {
	Labels     []RunnerLabel `json:"labels"`
	TotalCount int           `json:"total_count"`
}

// Basic Error
type BadRequest BasicError

// Basic Error
type CodeScanningForbiddenRead BasicError

// Basic Error
type CodeScanningForbiddenWrite BasicError

// Basic Error
type Conflict BasicError

// Basic Error
type Forbidden BasicError

// ForbiddenGist defines model for forbidden_gist.
type ForbiddenGist struct {
	Block *struct {
		CreatedAt *string `json:"created_at,omitempty"`
		HtmlUrl   *string `json:"html_url"`
		Reason    *string `json:"reason,omitempty"`
	} `json:"block,omitempty"`
	DocumentationUrl *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

// Basic Error
type Gone BasicError

// Basic Error
type InternalError BasicError

// Basic Error
type MovedPermanently BasicError

// Basic Error
type NotFound BasicError

// Basic Error
type RequiresAuthentication BasicError

// Scim Error
type ScimBadRequest ScimError

// Scim Error
type ScimConflict ScimError

// Scim Error
type ScimForbidden ScimError

// Scim Error
type ScimInternalError ScimError

// Scim Error
type ScimNotFound ScimError

// Scim Error
type ScimTooManyRequests ScimError

// ServiceUnavailable defines model for service_unavailable.
type ServiceUnavailable struct {
	Code             *string `json:"code,omitempty"`
	DocumentationUrl *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

// Basic Error
type TemporaryRedirect BasicError

// Validation Error
type ValidationFailed ValidationError

// Validation Error Simple
type ValidationFailedSimple ValidationErrorSimple

// AppsupdateWebhookConfigForAppJSONBody defines parameters for AppsupdateWebhookConfigForApp.
type AppsupdateWebhookConfigForAppJSONBody struct {
	// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
	ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
	InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`

	// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
	Secret *WebhookConfigSecret `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	Url *WebhookConfigUrl `json:"url,omitempty"`
}

// AppslistWebhookDeliveriesParams defines parameters for AppslistWebhookDeliveries.
type AppslistWebhookDeliveriesParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
	Cursor *Cursor `json:"cursor,omitempty"`
}

// AppslistInstallationsParams defines parameters for AppslistInstallations.
type AppslistInstallationsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since    *Since  `json:"since,omitempty"`
	Outdated *string `json:"outdated,omitempty"`
}

// AppscreateInstallationAccessTokenJSONBody defines parameters for AppscreateInstallationAccessToken.
type AppscreateInstallationAccessTokenJSONBody struct {
	// The permissions granted to the user-to-server access token.
	Permissions *AppPermissions `json:"permissions,omitempty"`

	// List of repository names that the token should have access to
	Repositories *[]string `json:"repositories,omitempty"`

	// List of repository IDs that the token should have access to
	RepositoryIds *[]int `json:"repository_ids,omitempty"`
}

// OauthAuthorizationslistGrantsParams defines parameters for OauthAuthorizationslistGrants.
type OauthAuthorizationslistGrantsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The client ID of your GitHub app.
	ClientId *string `json:"client_id,omitempty"`
}

// AppsdeleteAuthorizationJSONBody defines parameters for AppsdeleteAuthorization.
type AppsdeleteAuthorizationJSONBody struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string `json:"access_token"`
}

// AppsdeleteTokenJSONBody defines parameters for AppsdeleteToken.
type AppsdeleteTokenJSONBody struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string `json:"access_token"`
}

// AppsresetTokenJSONBody defines parameters for AppsresetToken.
type AppsresetTokenJSONBody struct {
	// The access_token of the OAuth application.
	AccessToken string `json:"access_token"`
}

// AppscheckTokenJSONBody defines parameters for AppscheckToken.
type AppscheckTokenJSONBody struct {
	// The access_token of the OAuth application.
	AccessToken string `json:"access_token"`
}

// AppsscopeTokenJSONBody defines parameters for AppsscopeToken.
type AppsscopeTokenJSONBody struct {
	// The OAuth access token used to authenticate to the GitHub API.
	AccessToken string `json:"access_token"`

	// The permissions granted to the user-to-server access token.
	Permissions *AppPermissions `json:"permissions,omitempty"`

	// The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
	Repositories *[]string `json:"repositories,omitempty"`

	// The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
	RepositoryIds *[]int `json:"repository_ids,omitempty"`

	// The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
	Target *string `json:"target,omitempty"`

	// The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
	TargetId *int `json:"target_id,omitempty"`
}

// OauthAuthorizationslistAuthorizationsParams defines parameters for OauthAuthorizationslistAuthorizations.
type OauthAuthorizationslistAuthorizationsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The client ID of your GitHub app.
	ClientId *string `json:"client_id,omitempty"`
}

// OauthAuthorizationscreateAuthorizationJSONBody defines parameters for OauthAuthorizationscreateAuthorization.
type OauthAuthorizationscreateAuthorizationJSONBody struct {
	// The OAuth app client key for which to create the token.
	ClientId *string `json:"client_id,omitempty"`

	// The OAuth app client secret for which to create the token.
	ClientSecret *string `json:"client_secret,omitempty"`

	// A unique string to distinguish an authorization from others created for the same client ID and user.
	Fingerprint *string `json:"fingerprint,omitempty"`

	// A note to remind you what the OAuth token is for.
	Note *string `json:"note,omitempty"`

	// A URL to remind you what app the OAuth token is for.
	NoteUrl *string `json:"note_url,omitempty"`

	// A list of scopes that this authorization is in.
	Scopes *[]string `json:"scopes"`
}

// OauthAuthorizationsgetOrCreateAuthorizationForAppJSONBody defines parameters for OauthAuthorizationsgetOrCreateAuthorizationForApp.
type OauthAuthorizationsgetOrCreateAuthorizationForAppJSONBody struct {
	// The OAuth app client secret for which to create the token.
	ClientSecret string `json:"client_secret"`

	// A unique string to distinguish an authorization from others created for the same client ID and user.
	Fingerprint *string `json:"fingerprint,omitempty"`

	// A note to remind you what the OAuth token is for.
	Note *string `json:"note,omitempty"`

	// A URL to remind you what app the OAuth token is for.
	NoteUrl *string `json:"note_url,omitempty"`

	// A list of scopes that this authorization is in.
	Scopes *[]string `json:"scopes"`
}

// OauthAuthorizationsgetOrCreateAuthorizationForAppAndFingerprintJSONBody defines parameters for OauthAuthorizationsgetOrCreateAuthorizationForAppAndFingerprint.
type OauthAuthorizationsgetOrCreateAuthorizationForAppAndFingerprintJSONBody struct {
	// The OAuth app client secret for which to create the token.
	ClientSecret string `json:"client_secret"`

	// A note to remind you what the OAuth token is for.
	Note *string `json:"note,omitempty"`

	// A URL to remind you what app the OAuth token is for.
	NoteUrl *string `json:"note_url,omitempty"`

	// A list of scopes that this authorization is in.
	Scopes *[]string `json:"scopes"`
}

// OauthAuthorizationsupdateAuthorizationJSONBody defines parameters for OauthAuthorizationsupdateAuthorization.
type OauthAuthorizationsupdateAuthorizationJSONBody struct {
	// A list of scopes to add to this authorization.
	AddScopes *[]string `json:"add_scopes,omitempty"`

	// A unique string to distinguish an authorization from others created for the same client ID and user.
	Fingerprint *string `json:"fingerprint,omitempty"`

	// A note to remind you what the OAuth token is for.
	Note *string `json:"note,omitempty"`

	// A URL to remind you what app the OAuth token is for.
	NoteUrl *string `json:"note_url,omitempty"`

	// A list of scopes to remove from this authorization.
	RemoveScopes *[]string `json:"remove_scopes,omitempty"`

	// A list of scopes that this authorization is in.
	Scopes *[]string `json:"scopes"`
}

// EnterpriseAdmingetServerStatisticsParams defines parameters for EnterpriseAdmingetServerStatistics.
type EnterpriseAdmingetServerStatisticsParams struct {
	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
	DateStart *string `json:"date_start,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
	DateEnd *string `json:"date_end,omitempty"`
}

// EnterpriseAdminsetGithubActionsPermissionsEnterpriseJSONBody defines parameters for EnterpriseAdminsetGithubActionsPermissionsEnterprise.
type EnterpriseAdminsetGithubActionsPermissionsEnterpriseJSONBody struct {
	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`

	// The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
	EnabledOrganizations EnabledOrganizations `json:"enabled_organizations"`
}

// EnterpriseAdminlistSelectedOrganizationsEnabledGithubActionsEnterpriseParams defines parameters for EnterpriseAdminlistSelectedOrganizationsEnabledGithubActionsEnterprise.
type EnterpriseAdminlistSelectedOrganizationsEnabledGithubActionsEnterpriseParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// EnterpriseAdminsetSelectedOrganizationsEnabledGithubActionsEnterpriseJSONBody defines parameters for EnterpriseAdminsetSelectedOrganizationsEnabledGithubActionsEnterprise.
type EnterpriseAdminsetSelectedOrganizationsEnabledGithubActionsEnterpriseJSONBody struct {
	// List of organization IDs to enable for GitHub Actions.
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
}

// EnterpriseAdminsetAllowedActionsEnterpriseJSONBody defines parameters for EnterpriseAdminsetAllowedActionsEnterprise.
type EnterpriseAdminsetAllowedActionsEnterpriseJSONBody SelectedActions

// ActionssetGithubActionsDefaultWorkflowPermissionsEnterpriseJSONBody defines parameters for ActionssetGithubActionsDefaultWorkflowPermissionsEnterprise.
type ActionssetGithubActionsDefaultWorkflowPermissionsEnterpriseJSONBody ActionsSetDefaultWorkflowPermissions

// EnterpriseAdminlistSelfHostedRunnerGroupsForEnterpriseParams defines parameters for EnterpriseAdminlistSelfHostedRunnerGroupsForEnterprise.
type EnterpriseAdminlistSelfHostedRunnerGroupsForEnterpriseParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// Only return runner groups that are allowed to be used by this organization.
	VisibleToOrganization *VisibleToOrganization `json:"visible_to_organization,omitempty"`
}

// EnterpriseAdmincreateSelfHostedRunnerGroupForEnterpriseJSONBody defines parameters for EnterpriseAdmincreateSelfHostedRunnerGroupForEnterprise.
type EnterpriseAdmincreateSelfHostedRunnerGroupForEnterpriseJSONBody struct {
	// Whether the runner group can be used by `public` repositories.
	AllowsPublicRepositories *bool `json:"allows_public_repositories,omitempty"`

	// Name of the runner group.
	Name string `json:"name"`

	// If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
	RestrictedToWorkflows *bool `json:"restricted_to_workflows,omitempty"`

	// List of runner IDs to add to the runner group.
	Runners *[]int `json:"runners,omitempty"`

	// List of organization IDs that can access the runner group.
	SelectedOrganizationIds *[]int `json:"selected_organization_ids,omitempty"`

	// List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
	SelectedWorkflows *[]string `json:"selected_workflows,omitempty"`

	// Visibility of a runner group. You can select all organizations or select individual organization.
	Visibility *EnterpriseAdmincreateSelfHostedRunnerGroupForEnterpriseJSONBodyVisibility `json:"visibility,omitempty"`
}

// EnterpriseAdmincreateSelfHostedRunnerGroupForEnterpriseJSONBodyVisibility defines parameters for EnterpriseAdmincreateSelfHostedRunnerGroupForEnterprise.
type EnterpriseAdmincreateSelfHostedRunnerGroupForEnterpriseJSONBodyVisibility string

// EnterpriseAdminupdateSelfHostedRunnerGroupForEnterpriseJSONBody defines parameters for EnterpriseAdminupdateSelfHostedRunnerGroupForEnterprise.
type EnterpriseAdminupdateSelfHostedRunnerGroupForEnterpriseJSONBody struct {
	// Whether the runner group can be used by `public` repositories.
	AllowsPublicRepositories *bool `json:"allows_public_repositories,omitempty"`

	// Name of the runner group.
	Name *string `json:"name,omitempty"`

	// If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
	RestrictedToWorkflows *bool `json:"restricted_to_workflows,omitempty"`

	// List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
	SelectedWorkflows *[]string `json:"selected_workflows,omitempty"`

	// Visibility of a runner group. You can select all organizations or select individual organizations.
	Visibility *EnterpriseAdminupdateSelfHostedRunnerGroupForEnterpriseJSONBodyVisibility `json:"visibility,omitempty"`
}

// EnterpriseAdminupdateSelfHostedRunnerGroupForEnterpriseJSONBodyVisibility defines parameters for EnterpriseAdminupdateSelfHostedRunnerGroupForEnterprise.
type EnterpriseAdminupdateSelfHostedRunnerGroupForEnterpriseJSONBodyVisibility string

// EnterpriseAdminlistOrgAccessToSelfHostedRunnerGroupInEnterpriseParams defines parameters for EnterpriseAdminlistOrgAccessToSelfHostedRunnerGroupInEnterprise.
type EnterpriseAdminlistOrgAccessToSelfHostedRunnerGroupInEnterpriseParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// EnterpriseAdminsetOrgAccessToSelfHostedRunnerGroupInEnterpriseJSONBody defines parameters for EnterpriseAdminsetOrgAccessToSelfHostedRunnerGroupInEnterprise.
type EnterpriseAdminsetOrgAccessToSelfHostedRunnerGroupInEnterpriseJSONBody struct {
	// List of organization IDs that can access the runner group.
	SelectedOrganizationIds []int `json:"selected_organization_ids"`
}

// EnterpriseAdminlistSelfHostedRunnersInGroupForEnterpriseParams defines parameters for EnterpriseAdminlistSelfHostedRunnersInGroupForEnterprise.
type EnterpriseAdminlistSelfHostedRunnersInGroupForEnterpriseParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// EnterpriseAdminsetSelfHostedRunnersInGroupForEnterpriseJSONBody defines parameters for EnterpriseAdminsetSelfHostedRunnersInGroupForEnterprise.
type EnterpriseAdminsetSelfHostedRunnersInGroupForEnterpriseJSONBody struct {
	// List of runner IDs to add to the runner group.
	Runners []int `json:"runners"`
}

// EnterpriseAdminlistSelfHostedRunnersForEnterpriseParams defines parameters for EnterpriseAdminlistSelfHostedRunnersForEnterprise.
type EnterpriseAdminlistSelfHostedRunnersForEnterpriseParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// EnterpriseAdminaddCustomLabelsToSelfHostedRunnerForEnterpriseJSONBody defines parameters for EnterpriseAdminaddCustomLabelsToSelfHostedRunnerForEnterprise.
type EnterpriseAdminaddCustomLabelsToSelfHostedRunnerForEnterpriseJSONBody struct {
	// The names of the custom labels to add to the runner.
	Labels []string `json:"labels"`
}

// EnterpriseAdminsetCustomLabelsForSelfHostedRunnerForEnterpriseJSONBody defines parameters for EnterpriseAdminsetCustomLabelsForSelfHostedRunnerForEnterprise.
type EnterpriseAdminsetCustomLabelsForSelfHostedRunnerForEnterpriseJSONBody struct {
	// The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
	Labels []string `json:"labels"`
}

// EnterpriseAdmingetAuditLogParams defines parameters for EnterpriseAdmingetAuditLog.
type EnterpriseAdmingetAuditLogParams struct {
	// A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
	Phrase *AuditLogPhrase `json:"phrase,omitempty"`

	// The event types to include:
	//
	// - `web` - returns web (non-Git) events.
	// - `git` - returns Git events.
	// - `all` - returns both web and Git events.
	//
	// The default is `web`.
	Include *EnterpriseAdmingetAuditLogParamsInclude `json:"include,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
	After *AuditLogAfter `json:"after,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
	Before *AuditLogBefore `json:"before,omitempty"`

	// The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
	//
	// The default is `desc`.
	Order *EnterpriseAdmingetAuditLogParamsOrder `json:"order,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// EnterpriseAdmingetAuditLogParamsInclude defines parameters for EnterpriseAdmingetAuditLog.
type EnterpriseAdmingetAuditLogParamsInclude string

// EnterpriseAdmingetAuditLogParamsOrder defines parameters for EnterpriseAdmingetAuditLog.
type EnterpriseAdmingetAuditLogParamsOrder string

// SecretScanninglistAlertsForEnterpriseParams defines parameters for SecretScanninglistAlertsForEnterprise.
type SecretScanninglistAlertsForEnterpriseParams struct {
	// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
	State *SecretScanninglistAlertsForEnterpriseParamsState `json:"state,omitempty"`

	// A comma-separated list of secret types to return. By default all secret types are returned.
	// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
	// for a complete list of secret types.
	SecretType *SecretScanningAlertSecretType `json:"secret_type,omitempty"`

	// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
	Resolution *SecretScanningAlertResolution `json:"resolution,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
	Before *PaginationBefore `json:"before,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
	After *PaginationAfter `json:"after,omitempty"`
}

// SecretScanninglistAlertsForEnterpriseParamsState defines parameters for SecretScanninglistAlertsForEnterprise.
type SecretScanninglistAlertsForEnterpriseParamsState string

// BillinggetGithubAdvancedSecurityBillingGheParams defines parameters for BillinggetGithubAdvancedSecurityBillingGhe.
type BillinggetGithubAdvancedSecurityBillingGheParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistPublicEventsParams defines parameters for ActivitylistPublicEvents.
type ActivitylistPublicEventsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// GistslistParams defines parameters for Gistslist.
type GistslistParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// GistscreateJSONBody defines parameters for Gistscreate.
type GistscreateJSONBody struct {
	// Description of the gist
	Description *string `json:"description,omitempty"`

	// Names and content for the files that make up the gist
	Files  GistscreateJSONBody_Files `json:"files"`
	Public *interface{}              `json:"public,omitempty"`
}

// GistscreateJSONBody_Files defines parameters for Gistscreate.
type GistscreateJSONBody_Files struct {
	AdditionalProperties map[string]struct {
		// Content of the file
		Content string `json:"content"`
	} `json:"-"`
}

// GistslistPublicParams defines parameters for GistslistPublic.
type GistslistPublicParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// GistslistStarredParams defines parameters for GistslistStarred.
type GistslistStarredParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// GistsupdateJSONBody defines parameters for Gistsupdate.
type GistsupdateJSONBody interface{}

// GistslistCommentsParams defines parameters for GistslistComments.
type GistslistCommentsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// GistscreateCommentJSONBody defines parameters for GistscreateComment.
type GistscreateCommentJSONBody struct {
	// The comment text.
	Body string `json:"body"`
}

// GistsupdateCommentJSONBody defines parameters for GistsupdateComment.
type GistsupdateCommentJSONBody struct {
	// The comment text.
	Body string `json:"body"`
}

// GistslistCommitsParams defines parameters for GistslistCommits.
type GistslistCommitsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// GistslistForksParams defines parameters for GistslistForks.
type GistslistForksParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// AppslistReposAccessibleToInstallationParams defines parameters for AppslistReposAccessibleToInstallation.
type AppslistReposAccessibleToInstallationParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistParams defines parameters for Issueslist.
type IssueslistParams struct {
	// Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
	Filter *IssueslistParamsFilter `json:"filter,omitempty"`

	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State *IssueslistParamsState `json:"state,omitempty"`

	// A list of comma separated label names. Example: `bug,ui,@high`
	Labels *Labels `json:"labels,omitempty"`

	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort *IssueslistParamsSort `json:"sort,omitempty"`

	// The direction to sort the results by.
	Direction *IssueslistParamsDirection `json:"direction,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since  *Since `json:"since,omitempty"`
	Collab *bool  `json:"collab,omitempty"`
	Orgs   *bool  `json:"orgs,omitempty"`
	Owned  *bool  `json:"owned,omitempty"`
	Pulls  *bool  `json:"pulls,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistParamsFilter defines parameters for Issueslist.
type IssueslistParamsFilter string

// IssueslistParamsState defines parameters for Issueslist.
type IssueslistParamsState string

// IssueslistParamsSort defines parameters for Issueslist.
type IssueslistParamsSort string

// IssueslistParamsDirection defines parameters for Issueslist.
type IssueslistParamsDirection string

// LicensesgetAllCommonlyUsedParams defines parameters for LicensesgetAllCommonlyUsed.
type LicensesgetAllCommonlyUsedParams struct {
	Featured *bool `json:"featured,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// MarkdownrenderJSONBody defines parameters for Markdownrender.
type MarkdownrenderJSONBody struct {
	// The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
	Context *string `json:"context,omitempty"`

	// The rendering mode. Can be either `markdown` or `gfm`.
	Mode *MarkdownrenderJSONBodyMode `json:"mode,omitempty"`

	// The Markdown text to render in HTML.
	Text string `json:"text"`
}

// MarkdownrenderJSONBodyMode defines parameters for Markdownrender.
type MarkdownrenderJSONBodyMode string

// AppslistPlansParams defines parameters for AppslistPlans.
type AppslistPlansParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// AppslistAccountsForPlanParams defines parameters for AppslistAccountsForPlan.
type AppslistAccountsForPlanParams struct {
	// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
	Sort *AppslistAccountsForPlanParamsSort `json:"sort,omitempty"`

	// To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
	Direction *AppslistAccountsForPlanParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// AppslistAccountsForPlanParamsSort defines parameters for AppslistAccountsForPlan.
type AppslistAccountsForPlanParamsSort string

// AppslistAccountsForPlanParamsDirection defines parameters for AppslistAccountsForPlan.
type AppslistAccountsForPlanParamsDirection string

// AppslistPlansStubbedParams defines parameters for AppslistPlansStubbed.
type AppslistPlansStubbedParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// AppslistAccountsForPlanStubbedParams defines parameters for AppslistAccountsForPlanStubbed.
type AppslistAccountsForPlanStubbedParams struct {
	// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
	Sort *AppslistAccountsForPlanStubbedParamsSort `json:"sort,omitempty"`

	// To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
	Direction *AppslistAccountsForPlanStubbedParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// AppslistAccountsForPlanStubbedParamsSort defines parameters for AppslistAccountsForPlanStubbed.
type AppslistAccountsForPlanStubbedParamsSort string

// AppslistAccountsForPlanStubbedParamsDirection defines parameters for AppslistAccountsForPlanStubbed.
type AppslistAccountsForPlanStubbedParamsDirection string

// ActivitylistPublicEventsForRepoNetworkParams defines parameters for ActivitylistPublicEventsForRepoNetwork.
type ActivitylistPublicEventsForRepoNetworkParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistNotificationsForAuthenticatedUserParams defines parameters for ActivitylistNotificationsForAuthenticatedUser.
type ActivitylistNotificationsForAuthenticatedUserParams struct {
	// If `true`, show notifications marked as read.
	All *All `json:"all,omitempty"`

	// If `true`, only shows notifications in which the user is directly participating or mentioned.
	Participating *Participating `json:"participating,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before *Before `json:"before,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitymarkNotificationsAsReadJSONBody defines parameters for ActivitymarkNotificationsAsRead.
type ActivitymarkNotificationsAsReadJSONBody struct {
	// Describes the last point that notifications were checked.
	LastReadAt *time.Time `json:"last_read_at,omitempty"`

	// Whether the notification has been read.
	Read *bool `json:"read,omitempty"`
}

// ActivitysetThreadSubscriptionJSONBody defines parameters for ActivitysetThreadSubscription.
type ActivitysetThreadSubscriptionJSONBody struct {
	// Whether to block all notifications from a thread.
	Ignored *bool `json:"ignored,omitempty"`
}

// MetagetOctocatParams defines parameters for MetagetOctocat.
type MetagetOctocatParams struct {
	// The words to show in Octocat's speech bubble
	S *string `json:"s,omitempty"`
}

// OrgslistParams defines parameters for Orgslist.
type OrgslistParams struct {
	// An organization ID. Only return organizations with an ID greater than this ID.
	Since *SinceOrg `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// OrgsupdateJSONBody defines parameters for Orgsupdate.
type OrgsupdateJSONBody struct {
	// Billing email address. This address is not publicized.
	BillingEmail *string `json:"billing_email,omitempty"`
	Blog         *string `json:"blog,omitempty"`

	// The company name.
	Company *string `json:"company,omitempty"`

	// Default permission level members have for organization repositories.
	DefaultRepositoryPermission *OrgsupdateJSONBodyDefaultRepositoryPermission `json:"default_repository_permission,omitempty"`

	// The description of the company.
	Description *string `json:"description,omitempty"`

	// The publicly visible email address.
	Email *string `json:"email,omitempty"`

	// Whether an organization can use organization projects.
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`

	// Whether repositories that belong to the organization can use repository projects.
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`

	// The location.
	Location *string `json:"location,omitempty"`

	// Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
	// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
	MembersAllowedRepositoryCreationType *OrgsupdateJSONBodyMembersAllowedRepositoryCreationType `json:"members_allowed_repository_creation_type,omitempty"`

	// Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
	MembersCanCreateInternalRepositories *bool `json:"members_can_create_internal_repositories,omitempty"`

	// Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePages *bool `json:"members_can_create_pages,omitempty"`

	// Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePrivatePages *bool `json:"members_can_create_private_pages,omitempty"`

	// Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
	MembersCanCreatePrivateRepositories *bool `json:"members_can_create_private_repositories,omitempty"`

	// Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePublicPages *bool `json:"members_can_create_public_pages,omitempty"`

	// Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
	MembersCanCreatePublicRepositories *bool `json:"members_can_create_public_repositories,omitempty"`

	// Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
	MembersCanCreateRepositories *bool `json:"members_can_create_repositories,omitempty"`

	// Whether organization members can fork private organization repositories.
	MembersCanForkPrivateRepositories *bool `json:"members_can_fork_private_repositories,omitempty"`

	// The shorthand name of the company.
	Name *string `json:"name,omitempty"`

	// The Twitter username of the company.
	TwitterUsername *string `json:"twitter_username,omitempty"`
}

// OrgsupdateJSONBodyDefaultRepositoryPermission defines parameters for Orgsupdate.
type OrgsupdateJSONBodyDefaultRepositoryPermission string

// OrgsupdateJSONBodyMembersAllowedRepositoryCreationType defines parameters for Orgsupdate.
type OrgsupdateJSONBodyMembersAllowedRepositoryCreationType string

// ActionsgetActionsCacheUsageByRepoForOrgParams defines parameters for ActionsgetActionsCacheUsageByRepoForOrg.
type ActionsgetActionsCacheUsageByRepoForOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionssetGithubActionsPermissionsOrganizationJSONBody defines parameters for ActionssetGithubActionsPermissionsOrganization.
type ActionssetGithubActionsPermissionsOrganizationJSONBody struct {
	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`

	// The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
	EnabledRepositories EnabledRepositories `json:"enabled_repositories"`
}

// ActionslistSelectedRepositoriesEnabledGithubActionsOrganizationParams defines parameters for ActionslistSelectedRepositoriesEnabledGithubActionsOrganization.
type ActionslistSelectedRepositoriesEnabledGithubActionsOrganizationParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionssetSelectedRepositoriesEnabledGithubActionsOrganizationJSONBody defines parameters for ActionssetSelectedRepositoriesEnabledGithubActionsOrganization.
type ActionssetSelectedRepositoriesEnabledGithubActionsOrganizationJSONBody struct {
	// List of repository IDs to enable for GitHub Actions.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

// ActionssetAllowedActionsOrganizationJSONBody defines parameters for ActionssetAllowedActionsOrganization.
type ActionssetAllowedActionsOrganizationJSONBody SelectedActions

// ActionssetGithubActionsDefaultWorkflowPermissionsOrganizationJSONBody defines parameters for ActionssetGithubActionsDefaultWorkflowPermissionsOrganization.
type ActionssetGithubActionsDefaultWorkflowPermissionsOrganizationJSONBody ActionsSetDefaultWorkflowPermissions

// ActionslistSelfHostedRunnerGroupsForOrgParams defines parameters for ActionslistSelfHostedRunnerGroupsForOrg.
type ActionslistSelfHostedRunnerGroupsForOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// Only return runner groups that are allowed to be used by this repository.
	VisibleToRepository *VisibleToRepository `json:"visible_to_repository,omitempty"`
}

// ActionscreateSelfHostedRunnerGroupForOrgJSONBody defines parameters for ActionscreateSelfHostedRunnerGroupForOrg.
type ActionscreateSelfHostedRunnerGroupForOrgJSONBody struct {
	// Whether the runner group can be used by `public` repositories.
	AllowsPublicRepositories *bool `json:"allows_public_repositories,omitempty"`

	// Name of the runner group.
	Name string `json:"name"`

	// If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
	RestrictedToWorkflows *bool `json:"restricted_to_workflows,omitempty"`

	// List of runner IDs to add to the runner group.
	Runners *[]int `json:"runners,omitempty"`

	// List of repository IDs that can access the runner group.
	SelectedRepositoryIds *[]int `json:"selected_repository_ids,omitempty"`

	// List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
	SelectedWorkflows *[]string `json:"selected_workflows,omitempty"`

	// Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.
	Visibility *ActionscreateSelfHostedRunnerGroupForOrgJSONBodyVisibility `json:"visibility,omitempty"`
}

// ActionscreateSelfHostedRunnerGroupForOrgJSONBodyVisibility defines parameters for ActionscreateSelfHostedRunnerGroupForOrg.
type ActionscreateSelfHostedRunnerGroupForOrgJSONBodyVisibility string

// ActionsupdateSelfHostedRunnerGroupForOrgJSONBody defines parameters for ActionsupdateSelfHostedRunnerGroupForOrg.
type ActionsupdateSelfHostedRunnerGroupForOrgJSONBody struct {
	// Whether the runner group can be used by `public` repositories.
	AllowsPublicRepositories *bool `json:"allows_public_repositories,omitempty"`

	// Name of the runner group.
	Name string `json:"name"`

	// If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.
	RestrictedToWorkflows *bool `json:"restricted_to_workflows,omitempty"`

	// List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.
	SelectedWorkflows *[]string `json:"selected_workflows,omitempty"`

	// Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.
	Visibility *ActionsupdateSelfHostedRunnerGroupForOrgJSONBodyVisibility `json:"visibility,omitempty"`
}

// ActionsupdateSelfHostedRunnerGroupForOrgJSONBodyVisibility defines parameters for ActionsupdateSelfHostedRunnerGroupForOrg.
type ActionsupdateSelfHostedRunnerGroupForOrgJSONBodyVisibility string

// ActionslistRepoAccessToSelfHostedRunnerGroupInOrgParams defines parameters for ActionslistRepoAccessToSelfHostedRunnerGroupInOrg.
type ActionslistRepoAccessToSelfHostedRunnerGroupInOrgParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// ActionssetRepoAccessToSelfHostedRunnerGroupInOrgJSONBody defines parameters for ActionssetRepoAccessToSelfHostedRunnerGroupInOrg.
type ActionssetRepoAccessToSelfHostedRunnerGroupInOrgJSONBody struct {
	// List of repository IDs that can access the runner group.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

// ActionslistSelfHostedRunnersInGroupForOrgParams defines parameters for ActionslistSelfHostedRunnersInGroupForOrg.
type ActionslistSelfHostedRunnersInGroupForOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionssetSelfHostedRunnersInGroupForOrgJSONBody defines parameters for ActionssetSelfHostedRunnersInGroupForOrg.
type ActionssetSelfHostedRunnersInGroupForOrgJSONBody struct {
	// List of runner IDs to add to the runner group.
	Runners []int `json:"runners"`
}

// ActionslistSelfHostedRunnersForOrgParams defines parameters for ActionslistSelfHostedRunnersForOrg.
type ActionslistSelfHostedRunnersForOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionsaddCustomLabelsToSelfHostedRunnerForOrgJSONBody defines parameters for ActionsaddCustomLabelsToSelfHostedRunnerForOrg.
type ActionsaddCustomLabelsToSelfHostedRunnerForOrgJSONBody struct {
	// The names of the custom labels to add to the runner.
	Labels []string `json:"labels"`
}

// ActionssetCustomLabelsForSelfHostedRunnerForOrgJSONBody defines parameters for ActionssetCustomLabelsForSelfHostedRunnerForOrg.
type ActionssetCustomLabelsForSelfHostedRunnerForOrgJSONBody struct {
	// The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
	Labels []string `json:"labels"`
}

// ActionslistOrgSecretsParams defines parameters for ActionslistOrgSecrets.
type ActionslistOrgSecretsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionscreateOrUpdateOrgSecretJSONBody defines parameters for ActionscreateOrUpdateOrgSecret.
type ActionscreateOrUpdateOrgSecretJSONBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyId *string `json:"key_id,omitempty"`

	// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds *[]string `json:"selected_repository_ids,omitempty"`

	// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
	Visibility ActionscreateOrUpdateOrgSecretJSONBodyVisibility `json:"visibility"`
}

// ActionscreateOrUpdateOrgSecretJSONBodyVisibility defines parameters for ActionscreateOrUpdateOrgSecret.
type ActionscreateOrUpdateOrgSecretJSONBodyVisibility string

// ActionslistSelectedReposForOrgSecretParams defines parameters for ActionslistSelectedReposForOrgSecret.
type ActionslistSelectedReposForOrgSecretParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// ActionssetSelectedReposForOrgSecretJSONBody defines parameters for ActionssetSelectedReposForOrgSecret.
type ActionssetSelectedReposForOrgSecretJSONBody struct {
	// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

// OrgsgetAuditLogParams defines parameters for OrgsgetAuditLog.
type OrgsgetAuditLogParams struct {
	// A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
	Phrase *AuditLogPhrase `json:"phrase,omitempty"`

	// The event types to include:
	//
	// - `web` - returns web (non-Git) events.
	// - `git` - returns Git events.
	// - `all` - returns both web and Git events.
	//
	// The default is `web`.
	Include *OrgsgetAuditLogParamsInclude `json:"include,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
	After *AuditLogAfter `json:"after,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
	Before *AuditLogBefore `json:"before,omitempty"`

	// The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
	//
	// The default is `desc`.
	Order *OrgsgetAuditLogParamsOrder `json:"order,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// OrgsgetAuditLogParamsInclude defines parameters for OrgsgetAuditLog.
type OrgsgetAuditLogParamsInclude string

// OrgsgetAuditLogParamsOrder defines parameters for OrgsgetAuditLog.
type OrgsgetAuditLogParamsOrder string

// CodeScanninglistAlertsForOrgParams defines parameters for CodeScanninglistAlertsForOrg.
type CodeScanninglistAlertsForOrgParams struct {
	// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
	ToolName *ToolName `json:"tool_name,omitempty"`

	// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
	ToolGuid *ToolGuid `json:"tool_guid,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
	Before *PaginationBefore `json:"before,omitempty"`

	// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
	After *PaginationAfter `json:"after,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// The direction to sort the results by.
	Direction *CodeScanninglistAlertsForOrgParamsDirection `json:"direction,omitempty"`

	// Set to `open`, `closed`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
	State *CodeScanningAlertState `json:"state,omitempty"`

	// The property by which to sort the results.
	Sort *CodeScanninglistAlertsForOrgParamsSort `json:"sort,omitempty"`
}

// CodeScanninglistAlertsForOrgParamsDirection defines parameters for CodeScanninglistAlertsForOrg.
type CodeScanninglistAlertsForOrgParamsDirection string

// CodeScanninglistAlertsForOrgParamsSort defines parameters for CodeScanninglistAlertsForOrg.
type CodeScanninglistAlertsForOrgParamsSort string

// OrgslistSamlSsoAuthorizationsParams defines parameters for OrgslistSamlSsoAuthorizations.
type OrgslistSamlSsoAuthorizationsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page token
	Page *int `json:"page,omitempty"`

	// Limits the list of credentials authorizations for an organization to a specific login
	Login *string `json:"login,omitempty"`
}

// DependabotlistOrgSecretsParams defines parameters for DependabotlistOrgSecrets.
type DependabotlistOrgSecretsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// DependabotcreateOrUpdateOrgSecretJSONBody defines parameters for DependabotcreateOrUpdateOrgSecret.
type DependabotcreateOrUpdateOrgSecretJSONBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyId *string `json:"key_id,omitempty"`

	// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds *[]string `json:"selected_repository_ids,omitempty"`

	// Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
	Visibility DependabotcreateOrUpdateOrgSecretJSONBodyVisibility `json:"visibility"`
}

// DependabotcreateOrUpdateOrgSecretJSONBodyVisibility defines parameters for DependabotcreateOrUpdateOrgSecret.
type DependabotcreateOrUpdateOrgSecretJSONBodyVisibility string

// DependabotlistSelectedReposForOrgSecretParams defines parameters for DependabotlistSelectedReposForOrgSecret.
type DependabotlistSelectedReposForOrgSecretParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// DependabotsetSelectedReposForOrgSecretJSONBody defines parameters for DependabotsetSelectedReposForOrgSecret.
type DependabotsetSelectedReposForOrgSecretJSONBody struct {
	// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

// ActivitylistPublicOrgEventsParams defines parameters for ActivitylistPublicOrgEvents.
type ActivitylistPublicOrgEventsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistExternalIdpGroupsForOrgParams defines parameters for TeamslistExternalIdpGroupsForOrg.
type TeamslistExternalIdpGroupsForOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page token
	Page *int `json:"page,omitempty"`

	// Limits the list to groups containing the text in the group name
	DisplayName *string `json:"display_name,omitempty"`
}

// OrgslistFailedInvitationsParams defines parameters for OrgslistFailedInvitations.
type OrgslistFailedInvitationsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgslistWebhooksParams defines parameters for OrgslistWebhooks.
type OrgslistWebhooksParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgscreateWebhookJSONBody defines parameters for OrgscreateWebhook.
type OrgscreateWebhookJSONBody struct {
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	Active *bool `json:"active,omitempty"`

	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
	Config struct {
		// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
		ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
		InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`
		Password    *string                   `json:"password,omitempty"`

		// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
		Secret *WebhookConfigSecret `json:"secret,omitempty"`

		// The URL to which the payloads will be delivered.
		Url      WebhookConfigUrl `json:"url"`
		Username *string          `json:"username,omitempty"`
	} `json:"config"`

	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
	Events *[]string `json:"events,omitempty"`

	// Must be passed as "web".
	Name string `json:"name"`
}

// OrgsupdateWebhookJSONBody defines parameters for OrgsupdateWebhook.
type OrgsupdateWebhookJSONBody struct {
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	Active *bool `json:"active,omitempty"`

	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
	Config *struct {
		// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
		ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
		InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`

		// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
		Secret *WebhookConfigSecret `json:"secret,omitempty"`

		// The URL to which the payloads will be delivered.
		Url WebhookConfigUrl `json:"url"`
	} `json:"config,omitempty"`

	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
	Events *[]string `json:"events,omitempty"`
	Name   *string   `json:"name,omitempty"`
}

// OrgsupdateWebhookConfigForOrgJSONBody defines parameters for OrgsupdateWebhookConfigForOrg.
type OrgsupdateWebhookConfigForOrgJSONBody struct {
	// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
	ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
	InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`

	// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
	Secret *WebhookConfigSecret `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	Url *WebhookConfigUrl `json:"url,omitempty"`
}

// OrgslistWebhookDeliveriesParams defines parameters for OrgslistWebhookDeliveries.
type OrgslistWebhookDeliveriesParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
	Cursor *Cursor `json:"cursor,omitempty"`
}

// OrgslistAppInstallationsParams defines parameters for OrgslistAppInstallations.
type OrgslistAppInstallationsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// InteractionssetRestrictionsForOrgJSONBody defines parameters for InteractionssetRestrictionsForOrg.
type InteractionssetRestrictionsForOrgJSONBody InteractionLimit

// OrgslistPendingInvitationsParams defines parameters for OrgslistPendingInvitations.
type OrgslistPendingInvitationsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgscreateInvitationJSONBody defines parameters for OrgscreateInvitation.
type OrgscreateInvitationJSONBody struct {
	// **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
	Email *string `json:"email,omitempty"`

	// **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
	InviteeId *int `json:"invitee_id,omitempty"`

	// The role for the new member.
	// \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
	// \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
	// \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
	Role *OrgscreateInvitationJSONBodyRole `json:"role,omitempty"`

	// Specify IDs for the teams you want to invite new members to.
	TeamIds *[]int `json:"team_ids,omitempty"`
}

// OrgscreateInvitationJSONBodyRole defines parameters for OrgscreateInvitation.
type OrgscreateInvitationJSONBodyRole string

// OrgslistInvitationTeamsParams defines parameters for OrgslistInvitationTeams.
type OrgslistInvitationTeamsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistForOrgParams defines parameters for IssueslistForOrg.
type IssueslistForOrgParams struct {
	// Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
	Filter *IssueslistForOrgParamsFilter `json:"filter,omitempty"`

	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State *IssueslistForOrgParamsState `json:"state,omitempty"`

	// A list of comma separated label names. Example: `bug,ui,@high`
	Labels *Labels `json:"labels,omitempty"`

	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort *IssueslistForOrgParamsSort `json:"sort,omitempty"`

	// The direction to sort the results by.
	Direction *IssueslistForOrgParamsDirection `json:"direction,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistForOrgParamsFilter defines parameters for IssueslistForOrg.
type IssueslistForOrgParamsFilter string

// IssueslistForOrgParamsState defines parameters for IssueslistForOrg.
type IssueslistForOrgParamsState string

// IssueslistForOrgParamsSort defines parameters for IssueslistForOrg.
type IssueslistForOrgParamsSort string

// IssueslistForOrgParamsDirection defines parameters for IssueslistForOrg.
type IssueslistForOrgParamsDirection string

// OrgslistMembersParams defines parameters for OrgslistMembers.
type OrgslistMembersParams struct {
	// Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
	Filter *OrgslistMembersParamsFilter `json:"filter,omitempty"`

	// Filter members returned by their role.
	Role *OrgslistMembersParamsRole `json:"role,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgslistMembersParamsFilter defines parameters for OrgslistMembers.
type OrgslistMembersParamsFilter string

// OrgslistMembersParamsRole defines parameters for OrgslistMembers.
type OrgslistMembersParamsRole string

// OrgssetMembershipForUserJSONBody defines parameters for OrgssetMembershipForUser.
type OrgssetMembershipForUserJSONBody struct {
	// The role to give the user in the organization. Can be one of:
	// \* `admin` - The user will become an owner of the organization.
	// \* `member` - The user will become a non-owner member of the organization.
	Role *OrgssetMembershipForUserJSONBodyRole `json:"role,omitempty"`
}

// OrgssetMembershipForUserJSONBodyRole defines parameters for OrgssetMembershipForUser.
type OrgssetMembershipForUserJSONBodyRole string

// MigrationslistForOrgParams defines parameters for MigrationslistForOrg.
type MigrationslistForOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// Exclude attributes from the API response to improve performance
	Exclude *[]MigrationslistForOrgParamsExclude `json:"exclude,omitempty"`
}

// MigrationslistForOrgParamsExclude defines parameters for MigrationslistForOrg.
type MigrationslistForOrgParamsExclude string

// MigrationsstartForOrgJSONBody defines parameters for MigrationsstartForOrg.
type MigrationsstartForOrgJSONBody struct {
	Exclude *[]MigrationsstartForOrgJSONBodyExclude `json:"exclude,omitempty"`

	// Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
	ExcludeAttachments *bool `json:"exclude_attachments,omitempty"`

	// Indicates whether projects owned by the organization or users should be excluded. from the migration.
	ExcludeOwnerProjects *bool `json:"exclude_owner_projects,omitempty"`

	// Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
	ExcludeReleases *bool `json:"exclude_releases,omitempty"`

	// Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
	LockRepositories *bool `json:"lock_repositories,omitempty"`

	// A list of arrays indicating which repositories should be migrated.
	Repositories []string `json:"repositories"`
}

// MigrationsstartForOrgJSONBodyExclude defines parameters for MigrationsstartForOrg.
type MigrationsstartForOrgJSONBodyExclude string

// MigrationsgetStatusForOrgParams defines parameters for MigrationsgetStatusForOrg.
type MigrationsgetStatusForOrgParams struct {
	// Exclude attributes from the API response to improve performance
	Exclude *[]MigrationsgetStatusForOrgParamsExclude `json:"exclude,omitempty"`
}

// MigrationsgetStatusForOrgParamsExclude defines parameters for MigrationsgetStatusForOrg.
type MigrationsgetStatusForOrgParamsExclude string

// MigrationslistReposForOrgParams defines parameters for MigrationslistReposForOrg.
type MigrationslistReposForOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgslistOutsideCollaboratorsParams defines parameters for OrgslistOutsideCollaborators.
type OrgslistOutsideCollaboratorsParams struct {
	// Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
	Filter *OrgslistOutsideCollaboratorsParamsFilter `json:"filter,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgslistOutsideCollaboratorsParamsFilter defines parameters for OrgslistOutsideCollaborators.
type OrgslistOutsideCollaboratorsParamsFilter string

// PackageslistPackagesForOrganizationParams defines parameters for PackageslistPackagesForOrganization.
type PackageslistPackagesForOrganizationParams struct {
	// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
	PackageType PackageslistPackagesForOrganizationParamsPackageType `json:"package_type"`

	// The selected visibility of the packages. Only `container` package_types currently support `internal` visibility properly. For other ecosystems `internal` is synonymous with `private`. This parameter is optional and only filters an existing result set.
	Visibility *PackageslistPackagesForOrganizationParamsVisibility `json:"visibility,omitempty"`
}

// PackageslistPackagesForOrganizationParamsPackageType defines parameters for PackageslistPackagesForOrganization.
type PackageslistPackagesForOrganizationParamsPackageType string

// PackageslistPackagesForOrganizationParamsVisibility defines parameters for PackageslistPackagesForOrganization.
type PackageslistPackagesForOrganizationParamsVisibility string

// PackagesdeletePackageForOrgParamsPackageType defines parameters for PackagesdeletePackageForOrg.
type PackagesdeletePackageForOrgParamsPackageType string

// PackagesgetPackageForOrganizationParamsPackageType defines parameters for PackagesgetPackageForOrganization.
type PackagesgetPackageForOrganizationParamsPackageType string

// PackagesrestorePackageForOrgParams defines parameters for PackagesrestorePackageForOrg.
type PackagesrestorePackageForOrgParams struct {
	// package token
	Token *string `json:"token,omitempty"`
}

// PackagesrestorePackageForOrgParamsPackageType defines parameters for PackagesrestorePackageForOrg.
type PackagesrestorePackageForOrgParamsPackageType string

// PackagesgetAllPackageVersionsForPackageOwnedByOrgParams defines parameters for PackagesgetAllPackageVersionsForPackageOwnedByOrg.
type PackagesgetAllPackageVersionsForPackageOwnedByOrgParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// The state of the package, either active or deleted.
	State *PackagesgetAllPackageVersionsForPackageOwnedByOrgParamsState `json:"state,omitempty"`
}

// PackagesgetAllPackageVersionsForPackageOwnedByOrgParamsState defines parameters for PackagesgetAllPackageVersionsForPackageOwnedByOrg.
type PackagesgetAllPackageVersionsForPackageOwnedByOrgParamsState string

// PackagesgetAllPackageVersionsForPackageOwnedByOrgParamsPackageType defines parameters for PackagesgetAllPackageVersionsForPackageOwnedByOrg.
type PackagesgetAllPackageVersionsForPackageOwnedByOrgParamsPackageType string

// PackagesdeletePackageVersionForOrgParamsPackageType defines parameters for PackagesdeletePackageVersionForOrg.
type PackagesdeletePackageVersionForOrgParamsPackageType string

// PackagesgetPackageVersionForOrganizationParamsPackageType defines parameters for PackagesgetPackageVersionForOrganization.
type PackagesgetPackageVersionForOrganizationParamsPackageType string

// PackagesrestorePackageVersionForOrgParamsPackageType defines parameters for PackagesrestorePackageVersionForOrg.
type PackagesrestorePackageVersionForOrgParamsPackageType string

// ProjectslistForOrgParams defines parameters for ProjectslistForOrg.
type ProjectslistForOrgParams struct {
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State *ProjectslistForOrgParamsState `json:"state,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ProjectslistForOrgParamsState defines parameters for ProjectslistForOrg.
type ProjectslistForOrgParamsState string

// ProjectscreateForOrgJSONBody defines parameters for ProjectscreateForOrg.
type ProjectscreateForOrgJSONBody struct {
	// The description of the project.
	Body *string `json:"body,omitempty"`

	// The name of the project.
	Name string `json:"name"`
}

// OrgslistPublicMembersParams defines parameters for OrgslistPublicMembers.
type OrgslistPublicMembersParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistForOrgParams defines parameters for ReposlistForOrg.
type ReposlistForOrgParams struct {
	// Specifies the types of repositories you want returned. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token.
	Type *ReposlistForOrgParamsType `json:"type,omitempty"`

	// The property to sort the results by.
	Sort *ReposlistForOrgParamsSort `json:"sort,omitempty"`

	// The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
	Direction *ReposlistForOrgParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistForOrgParamsType defines parameters for ReposlistForOrg.
type ReposlistForOrgParamsType string

// ReposlistForOrgParamsSort defines parameters for ReposlistForOrg.
type ReposlistForOrgParamsSort string

// ReposlistForOrgParamsDirection defines parameters for ReposlistForOrg.
type ReposlistForOrgParamsDirection string

// ReposcreateInOrgJSONBody defines parameters for ReposcreateInOrg.
type ReposcreateInOrgJSONBody struct {
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Pass `true` to create an initial commit with empty README.
	AutoInit *bool `json:"auto_init,omitempty"`

	// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// A short description of the repository.
	Description *string `json:"description,omitempty"`

	// Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
	GitignoreTemplate *string `json:"gitignore_template,omitempty"`

	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues *bool `json:"has_issues,omitempty"`

	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
	HasProjects *bool `json:"has_projects,omitempty"`

	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`

	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate *bool `json:"is_template,omitempty"`

	// Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
	LicenseTemplate *string `json:"license_template,omitempty"`

	// The name of the repository.
	Name string `json:"name"`

	// Whether the repository is private.
	Private *bool `json:"private,omitempty"`

	// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
	TeamId *int `json:"team_id,omitempty"`

	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
	Visibility *ReposcreateInOrgJSONBodyVisibility `json:"visibility,omitempty"`
}

// ReposcreateInOrgJSONBodyVisibility defines parameters for ReposcreateInOrg.
type ReposcreateInOrgJSONBodyVisibility string

// SecretScanninglistAlertsForOrgParams defines parameters for SecretScanninglistAlertsForOrg.
type SecretScanninglistAlertsForOrgParams struct {
	// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
	State *SecretScanninglistAlertsForOrgParamsState `json:"state,omitempty"`

	// A comma-separated list of secret types to return. By default all secret types are returned.
	// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
	// for a complete list of secret types.
	SecretType *SecretScanningAlertSecretType `json:"secret_type,omitempty"`

	// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
	Resolution *SecretScanningAlertResolution `json:"resolution,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// SecretScanninglistAlertsForOrgParamsState defines parameters for SecretScanninglistAlertsForOrg.
type SecretScanninglistAlertsForOrgParamsState string

// BillinggetGithubAdvancedSecurityBillingOrgParams defines parameters for BillinggetGithubAdvancedSecurityBillingOrg.
type BillinggetGithubAdvancedSecurityBillingOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistIdpGroupsForOrgParams defines parameters for TeamslistIdpGroupsForOrg.
type TeamslistIdpGroupsForOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page token
	Page *string `json:"page,omitempty"`
}

// TeamslistParams defines parameters for Teamslist.
type TeamslistParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamscreateJSONBody defines parameters for Teamscreate.
type TeamscreateJSONBody struct {
	// The description of the team.
	Description *string `json:"description,omitempty"`

	// List GitHub IDs for organization members who will become team maintainers.
	Maintainers *[]string `json:"maintainers,omitempty"`

	// The name of the team.
	Name string `json:"name"`

	// The ID of a team to set as the parent team.
	ParentTeamId *int `json:"parent_team_id,omitempty"`

	// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
	Permission *TeamscreateJSONBodyPermission `json:"permission,omitempty"`

	// The level of privacy this team should have. The options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// Default: `secret`
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	// Default for child team: `closed`
	Privacy *TeamscreateJSONBodyPrivacy `json:"privacy,omitempty"`

	// The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
	RepoNames *[]string `json:"repo_names,omitempty"`
}

// TeamscreateJSONBodyPermission defines parameters for Teamscreate.
type TeamscreateJSONBodyPermission string

// TeamscreateJSONBodyPrivacy defines parameters for Teamscreate.
type TeamscreateJSONBodyPrivacy string

// TeamsupdateInOrgJSONBody defines parameters for TeamsupdateInOrg.
type TeamsupdateInOrgJSONBody struct {
	// The description of the team.
	Description *string `json:"description,omitempty"`

	// The name of the team.
	Name *string `json:"name,omitempty"`

	// The ID of a team to set as the parent team.
	ParentTeamId *int `json:"parent_team_id"`

	// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
	Permission *TeamsupdateInOrgJSONBodyPermission `json:"permission,omitempty"`

	// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	Privacy *TeamsupdateInOrgJSONBodyPrivacy `json:"privacy,omitempty"`
}

// TeamsupdateInOrgJSONBodyPermission defines parameters for TeamsupdateInOrg.
type TeamsupdateInOrgJSONBodyPermission string

// TeamsupdateInOrgJSONBodyPrivacy defines parameters for TeamsupdateInOrg.
type TeamsupdateInOrgJSONBodyPrivacy string

// TeamslistDiscussionsInOrgParams defines parameters for TeamslistDiscussionsInOrg.
type TeamslistDiscussionsInOrgParams struct {
	// The direction to sort the results by.
	Direction *TeamslistDiscussionsInOrgParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// Pinned discussions only filter
	Pinned *string `json:"pinned,omitempty"`
}

// TeamslistDiscussionsInOrgParamsDirection defines parameters for TeamslistDiscussionsInOrg.
type TeamslistDiscussionsInOrgParamsDirection string

// TeamscreateDiscussionInOrgJSONBody defines parameters for TeamscreateDiscussionInOrg.
type TeamscreateDiscussionInOrgJSONBody struct {
	// The discussion post's body text.
	Body string `json:"body"`

	// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
	Private *bool `json:"private,omitempty"`

	// The discussion post's title.
	Title string `json:"title"`
}

// TeamsupdateDiscussionInOrgJSONBody defines parameters for TeamsupdateDiscussionInOrg.
type TeamsupdateDiscussionInOrgJSONBody struct {
	// The discussion post's body text.
	Body *string `json:"body,omitempty"`

	// The discussion post's title.
	Title *string `json:"title,omitempty"`
}

// TeamslistDiscussionCommentsInOrgParams defines parameters for TeamslistDiscussionCommentsInOrg.
type TeamslistDiscussionCommentsInOrgParams struct {
	// The direction to sort the results by.
	Direction *TeamslistDiscussionCommentsInOrgParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistDiscussionCommentsInOrgParamsDirection defines parameters for TeamslistDiscussionCommentsInOrg.
type TeamslistDiscussionCommentsInOrgParamsDirection string

// TeamscreateDiscussionCommentInOrgJSONBody defines parameters for TeamscreateDiscussionCommentInOrg.
type TeamscreateDiscussionCommentInOrgJSONBody struct {
	// The discussion comment's body text.
	Body string `json:"body"`
}

// TeamsupdateDiscussionCommentInOrgJSONBody defines parameters for TeamsupdateDiscussionCommentInOrg.
type TeamsupdateDiscussionCommentInOrgJSONBody struct {
	// The discussion comment's body text.
	Body string `json:"body"`
}

// ReactionslistForTeamDiscussionCommentInOrgParams defines parameters for ReactionslistForTeamDiscussionCommentInOrg.
type ReactionslistForTeamDiscussionCommentInOrgParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
	Content *ReactionslistForTeamDiscussionCommentInOrgParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForTeamDiscussionCommentInOrgParamsContent defines parameters for ReactionslistForTeamDiscussionCommentInOrg.
type ReactionslistForTeamDiscussionCommentInOrgParamsContent string

// ReactionscreateForTeamDiscussionCommentInOrgJSONBody defines parameters for ReactionscreateForTeamDiscussionCommentInOrg.
type ReactionscreateForTeamDiscussionCommentInOrgJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
	Content ReactionscreateForTeamDiscussionCommentInOrgJSONBodyContent `json:"content"`
}

// ReactionscreateForTeamDiscussionCommentInOrgJSONBodyContent defines parameters for ReactionscreateForTeamDiscussionCommentInOrg.
type ReactionscreateForTeamDiscussionCommentInOrgJSONBodyContent string

// ReactionslistForTeamDiscussionInOrgParams defines parameters for ReactionslistForTeamDiscussionInOrg.
type ReactionslistForTeamDiscussionInOrgParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
	Content *ReactionslistForTeamDiscussionInOrgParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForTeamDiscussionInOrgParamsContent defines parameters for ReactionslistForTeamDiscussionInOrg.
type ReactionslistForTeamDiscussionInOrgParamsContent string

// ReactionscreateForTeamDiscussionInOrgJSONBody defines parameters for ReactionscreateForTeamDiscussionInOrg.
type ReactionscreateForTeamDiscussionInOrgJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
	Content ReactionscreateForTeamDiscussionInOrgJSONBodyContent `json:"content"`
}

// ReactionscreateForTeamDiscussionInOrgJSONBodyContent defines parameters for ReactionscreateForTeamDiscussionInOrg.
type ReactionscreateForTeamDiscussionInOrgJSONBodyContent string

// TeamslinkExternalIdpGroupToTeamForOrgJSONBody defines parameters for TeamslinkExternalIdpGroupToTeamForOrg.
type TeamslinkExternalIdpGroupToTeamForOrgJSONBody struct {
	// External Group Id
	GroupId int `json:"group_id"`
}

// TeamslistPendingInvitationsInOrgParams defines parameters for TeamslistPendingInvitationsInOrg.
type TeamslistPendingInvitationsInOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistMembersInOrgParams defines parameters for TeamslistMembersInOrg.
type TeamslistMembersInOrgParams struct {
	// Filters members returned by their role in the team.
	Role *TeamslistMembersInOrgParamsRole `json:"role,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistMembersInOrgParamsRole defines parameters for TeamslistMembersInOrg.
type TeamslistMembersInOrgParamsRole string

// TeamsaddOrUpdateMembershipForUserInOrgJSONBody defines parameters for TeamsaddOrUpdateMembershipForUserInOrg.
type TeamsaddOrUpdateMembershipForUserInOrgJSONBody struct {
	// The role that this user should have in the team.
	Role *TeamsaddOrUpdateMembershipForUserInOrgJSONBodyRole `json:"role,omitempty"`
}

// TeamsaddOrUpdateMembershipForUserInOrgJSONBodyRole defines parameters for TeamsaddOrUpdateMembershipForUserInOrg.
type TeamsaddOrUpdateMembershipForUserInOrgJSONBodyRole string

// TeamslistProjectsInOrgParams defines parameters for TeamslistProjectsInOrg.
type TeamslistProjectsInOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamsaddOrUpdateProjectPermissionsInOrgJSONBody defines parameters for TeamsaddOrUpdateProjectPermissionsInOrg.
type TeamsaddOrUpdateProjectPermissionsInOrgJSONBody struct {
	// The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
	Permission *TeamsaddOrUpdateProjectPermissionsInOrgJSONBodyPermission `json:"permission,omitempty"`
}

// TeamsaddOrUpdateProjectPermissionsInOrgJSONBodyPermission defines parameters for TeamsaddOrUpdateProjectPermissionsInOrg.
type TeamsaddOrUpdateProjectPermissionsInOrgJSONBodyPermission string

// TeamslistReposInOrgParams defines parameters for TeamslistReposInOrg.
type TeamslistReposInOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamsaddOrUpdateRepoPermissionsInOrgJSONBody defines parameters for TeamsaddOrUpdateRepoPermissionsInOrg.
type TeamsaddOrUpdateRepoPermissionsInOrgJSONBody struct {
	// The permission to grant the team on this repository. In addition to the enumerated values, you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
	Permission *TeamsaddOrUpdateRepoPermissionsInOrgJSONBodyPermission `json:"permission,omitempty"`
}

// TeamsaddOrUpdateRepoPermissionsInOrgJSONBodyPermission defines parameters for TeamsaddOrUpdateRepoPermissionsInOrg.
type TeamsaddOrUpdateRepoPermissionsInOrgJSONBodyPermission string

// TeamscreateOrUpdateIdpGroupConnectionsInOrgJSONBody defines parameters for TeamscreateOrUpdateIdpGroupConnectionsInOrg.
type TeamscreateOrUpdateIdpGroupConnectionsInOrgJSONBody struct {
	// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
	Groups *[]struct {
		// Description of the IdP group.
		GroupDescription string `json:"group_description"`

		// ID of the IdP group.
		GroupId string `json:"group_id"`

		// Name of the IdP group.
		GroupName string `json:"group_name"`
	} `json:"groups,omitempty"`
}

// TeamslistChildInOrgParams defines parameters for TeamslistChildInOrg.
type TeamslistChildInOrgParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ProjectsupdateCardJSONBody defines parameters for ProjectsupdateCard.
type ProjectsupdateCardJSONBody struct {
	// Whether or not the card is archived
	Archived *bool `json:"archived,omitempty"`

	// The project card's note
	Note *string `json:"note"`
}

// ProjectsmoveCardJSONBody defines parameters for ProjectsmoveCard.
type ProjectsmoveCardJSONBody struct {
	// The unique identifier of the column the card should be moved to
	ColumnId *int `json:"column_id,omitempty"`

	// The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
	Position string `json:"position"`
}

// ProjectsupdateColumnJSONBody defines parameters for ProjectsupdateColumn.
type ProjectsupdateColumnJSONBody struct {
	// Name of the project column
	Name string `json:"name"`
}

// ProjectslistCardsParams defines parameters for ProjectslistCards.
type ProjectslistCardsParams struct {
	// Filters the project cards that are returned by the card's state.
	ArchivedState *ProjectslistCardsParamsArchivedState `json:"archived_state,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ProjectslistCardsParamsArchivedState defines parameters for ProjectslistCards.
type ProjectslistCardsParamsArchivedState string

// ProjectscreateCardJSONBody defines parameters for ProjectscreateCard.
type ProjectscreateCardJSONBody interface{}

// ProjectsmoveColumnJSONBody defines parameters for ProjectsmoveColumn.
type ProjectsmoveColumnJSONBody struct {
	// The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
	Position string `json:"position"`
}

// ProjectsupdateJSONBody defines parameters for Projectsupdate.
type ProjectsupdateJSONBody struct {
	// Body of the project
	Body *string `json:"body"`

	// Name of the project
	Name *string `json:"name,omitempty"`

	// The baseline permission that all organization members have on this project
	OrganizationPermission *ProjectsupdateJSONBodyOrganizationPermission `json:"organization_permission,omitempty"`

	// Whether or not this project can be seen by everyone.
	Private *bool `json:"private,omitempty"`

	// State of the project; either 'open' or 'closed'
	State *string `json:"state,omitempty"`
}

// ProjectsupdateJSONBodyOrganizationPermission defines parameters for Projectsupdate.
type ProjectsupdateJSONBodyOrganizationPermission string

// ProjectslistCollaboratorsParams defines parameters for ProjectslistCollaborators.
type ProjectslistCollaboratorsParams struct {
	// Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
	Affiliation *ProjectslistCollaboratorsParamsAffiliation `json:"affiliation,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ProjectslistCollaboratorsParamsAffiliation defines parameters for ProjectslistCollaborators.
type ProjectslistCollaboratorsParamsAffiliation string

// ProjectsaddCollaboratorJSONBody defines parameters for ProjectsaddCollaborator.
type ProjectsaddCollaboratorJSONBody struct {
	// The permission to grant the collaborator.
	Permission *ProjectsaddCollaboratorJSONBodyPermission `json:"permission,omitempty"`
}

// ProjectsaddCollaboratorJSONBodyPermission defines parameters for ProjectsaddCollaborator.
type ProjectsaddCollaboratorJSONBodyPermission string

// ProjectslistColumnsParams defines parameters for ProjectslistColumns.
type ProjectslistColumnsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ProjectscreateColumnJSONBody defines parameters for ProjectscreateColumn.
type ProjectscreateColumnJSONBody struct {
	// Name of the project column
	Name string `json:"name"`
}

// ReposupdateJSONBody defines parameters for Reposupdate.
type ReposupdateJSONBody struct {
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Either `true` to allow private forks, or `false` to prevent private forks.
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
	Archived *bool `json:"archived,omitempty"`

	// Updates the default branch for this repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// A short description of the repository.
	Description *string `json:"description,omitempty"`

	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues *bool `json:"has_issues,omitempty"`

	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
	HasProjects *bool `json:"has_projects,omitempty"`

	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`

	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate *bool `json:"is_template,omitempty"`

	// The name of the repository.
	Name *string `json:"name,omitempty"`

	// Either `true` to make the repository private or `false` to make it public. Default: `false`.
	// **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
	Private *bool `json:"private,omitempty"`

	// Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis": {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
	SecurityAndAnalysis *struct {
		// Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
		AdvancedSecurity *struct {
			// Can be `enabled` or `disabled`.
			Status *string `json:"status,omitempty"`
		} `json:"advanced_security,omitempty"`

		// Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
		SecretScanning *struct {
			// Can be `enabled` or `disabled`.
			Status *string `json:"status,omitempty"`
		} `json:"secret_scanning,omitempty"`

		// Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
		SecretScanningPushProtection *struct {
			// Can be `enabled` or `disabled`.
			Status *string `json:"status,omitempty"`
		} `json:"secret_scanning_push_protection,omitempty"`
	} `json:"security_and_analysis"`

	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`."
	Visibility *ReposupdateJSONBodyVisibility `json:"visibility,omitempty"`
}

// ReposupdateJSONBodyVisibility defines parameters for Reposupdate.
type ReposupdateJSONBodyVisibility string

// ActionslistArtifactsForRepoParams defines parameters for ActionslistArtifactsForRepo.
type ActionslistArtifactsForRepoParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionsreRunJobForWorkflowRunJSONBody defines parameters for ActionsreRunJobForWorkflowRun.
type ActionsreRunJobForWorkflowRunJSONBody struct {
	// Whether to enable debug logging for the re-run.
	EnableDebugLogging *bool `json:"enable_debug_logging,omitempty"`
}

// ActionssetGithubActionsPermissionsRepositoryJSONBody defines parameters for ActionssetGithubActionsPermissionsRepository.
type ActionssetGithubActionsPermissionsRepositoryJSONBody struct {
	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`

	// Whether GitHub Actions is enabled on the repository.
	Enabled ActionsEnabled `json:"enabled"`
}

// ActionssetWorkflowAccessToRepositoryJSONBody defines parameters for ActionssetWorkflowAccessToRepository.
type ActionssetWorkflowAccessToRepositoryJSONBody ActionsWorkflowAccessToRepository

// ActionssetAllowedActionsRepositoryJSONBody defines parameters for ActionssetAllowedActionsRepository.
type ActionssetAllowedActionsRepositoryJSONBody SelectedActions

// ActionssetGithubActionsDefaultWorkflowPermissionsRepositoryJSONBody defines parameters for ActionssetGithubActionsDefaultWorkflowPermissionsRepository.
type ActionssetGithubActionsDefaultWorkflowPermissionsRepositoryJSONBody ActionsSetDefaultWorkflowPermissions

// ActionslistSelfHostedRunnersForRepoParams defines parameters for ActionslistSelfHostedRunnersForRepo.
type ActionslistSelfHostedRunnersForRepoParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionsaddCustomLabelsToSelfHostedRunnerForRepoJSONBody defines parameters for ActionsaddCustomLabelsToSelfHostedRunnerForRepo.
type ActionsaddCustomLabelsToSelfHostedRunnerForRepoJSONBody struct {
	// The names of the custom labels to add to the runner.
	Labels []string `json:"labels"`
}

// ActionssetCustomLabelsForSelfHostedRunnerForRepoJSONBody defines parameters for ActionssetCustomLabelsForSelfHostedRunnerForRepo.
type ActionssetCustomLabelsForSelfHostedRunnerForRepoJSONBody struct {
	// The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
	Labels []string `json:"labels"`
}

// ActionslistWorkflowRunsForRepoParams defines parameters for ActionslistWorkflowRunsForRepo.
type ActionslistWorkflowRunsForRepoParams struct {
	// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
	Actor *Actor `json:"actor,omitempty"`

	// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
	Branch *WorkflowRunBranch `json:"branch,omitempty"`

	// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
	Event *Event `json:"event,omitempty"`

	// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)."
	Status *ActionslistWorkflowRunsForRepoParamsStatus `json:"status,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
	Created *Created `json:"created,omitempty"`

	// If `true` pull requests are omitted from the response (empty array).
	ExcludePullRequests *ExcludePullRequests `json:"exclude_pull_requests,omitempty"`

	// Returns workflow runs with the `check_suite_id` that you specify.
	CheckSuiteId *WorkflowRunCheckSuiteId `json:"check_suite_id,omitempty"`
}

// ActionslistWorkflowRunsForRepoParamsStatus defines parameters for ActionslistWorkflowRunsForRepo.
type ActionslistWorkflowRunsForRepoParamsStatus string

// ActionsgetWorkflowRunParams defines parameters for ActionsgetWorkflowRun.
type ActionsgetWorkflowRunParams struct {
	// If `true` pull requests are omitted from the response (empty array).
	ExcludePullRequests *ExcludePullRequests `json:"exclude_pull_requests,omitempty"`
}

// ActionslistWorkflowRunArtifactsParams defines parameters for ActionslistWorkflowRunArtifacts.
type ActionslistWorkflowRunArtifactsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionsgetWorkflowRunAttemptParams defines parameters for ActionsgetWorkflowRunAttempt.
type ActionsgetWorkflowRunAttemptParams struct {
	// If `true` pull requests are omitted from the response (empty array).
	ExcludePullRequests *ExcludePullRequests `json:"exclude_pull_requests,omitempty"`
}

// ActionslistJobsForWorkflowRunAttemptParams defines parameters for ActionslistJobsForWorkflowRunAttempt.
type ActionslistJobsForWorkflowRunAttemptParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionslistJobsForWorkflowRunParams defines parameters for ActionslistJobsForWorkflowRun.
type ActionslistJobsForWorkflowRunParams struct {
	// Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
	Filter *ActionslistJobsForWorkflowRunParamsFilter `json:"filter,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionslistJobsForWorkflowRunParamsFilter defines parameters for ActionslistJobsForWorkflowRun.
type ActionslistJobsForWorkflowRunParamsFilter string

// ActionsreviewPendingDeploymentsForRunJSONBody defines parameters for ActionsreviewPendingDeploymentsForRun.
type ActionsreviewPendingDeploymentsForRunJSONBody struct {
	// A comment to accompany the deployment review
	Comment string `json:"comment"`

	// The list of environment ids to approve or reject
	EnvironmentIds []int `json:"environment_ids"`

	// Whether to approve or reject deployment to the specified environments.
	State ActionsreviewPendingDeploymentsForRunJSONBodyState `json:"state"`
}

// ActionsreviewPendingDeploymentsForRunJSONBodyState defines parameters for ActionsreviewPendingDeploymentsForRun.
type ActionsreviewPendingDeploymentsForRunJSONBodyState string

// ActionsreRunWorkflowJSONBody defines parameters for ActionsreRunWorkflow.
type ActionsreRunWorkflowJSONBody struct {
	// Whether to enable debug logging for the re-run.
	EnableDebugLogging *bool `json:"enable_debug_logging,omitempty"`
}

// ActionsreRunWorkflowFailedJobsJSONBody defines parameters for ActionsreRunWorkflowFailedJobs.
type ActionsreRunWorkflowFailedJobsJSONBody struct {
	// Whether to enable debug logging for the re-run.
	EnableDebugLogging *bool `json:"enable_debug_logging,omitempty"`
}

// ActionslistRepoSecretsParams defines parameters for ActionslistRepoSecrets.
type ActionslistRepoSecretsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionscreateOrUpdateRepoSecretJSONBody defines parameters for ActionscreateOrUpdateRepoSecret.
type ActionscreateOrUpdateRepoSecretJSONBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyId *string `json:"key_id,omitempty"`
}

// ActionslistRepoWorkflowsParams defines parameters for ActionslistRepoWorkflows.
type ActionslistRepoWorkflowsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionscreateWorkflowDispatchJSONBody defines parameters for ActionscreateWorkflowDispatch.
type ActionscreateWorkflowDispatchJSONBody struct {
	// Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
	Inputs *ActionscreateWorkflowDispatchJSONBody_Inputs `json:"inputs,omitempty"`

	// The git reference for the workflow. The reference can be a branch or tag name.
	Ref string `json:"ref"`
}

// ActionscreateWorkflowDispatchJSONBody_Inputs defines parameters for ActionscreateWorkflowDispatch.
type ActionscreateWorkflowDispatchJSONBody_Inputs struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ActionslistWorkflowRunsParams defines parameters for ActionslistWorkflowRuns.
type ActionslistWorkflowRunsParams struct {
	// Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
	Actor *Actor `json:"actor,omitempty"`

	// Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
	Branch *WorkflowRunBranch `json:"branch,omitempty"`

	// Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
	Event *Event `json:"event,omitempty"`

	// Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)."
	Status *ActionslistWorkflowRunsParamsStatus `json:"status,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
	Created *Created `json:"created,omitempty"`

	// If `true` pull requests are omitted from the response (empty array).
	ExcludePullRequests *ExcludePullRequests `json:"exclude_pull_requests,omitempty"`

	// Returns workflow runs with the `check_suite_id` that you specify.
	CheckSuiteId *WorkflowRunCheckSuiteId `json:"check_suite_id,omitempty"`
}

// ActionslistWorkflowRunsParamsStatus defines parameters for ActionslistWorkflowRuns.
type ActionslistWorkflowRunsParamsStatus string

// IssueslistAssigneesParams defines parameters for IssueslistAssignees.
type IssueslistAssigneesParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistAutolinksParams defines parameters for ReposlistAutolinks.
type ReposlistAutolinksParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateAutolinkJSONBody defines parameters for ReposcreateAutolink.
type ReposcreateAutolinkJSONBody struct {
	// The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.
	KeyPrefix string `json:"key_prefix"`

	// The URL must contain <num> for the reference number.
	UrlTemplate string `json:"url_template"`
}

// ReposlistBranchesParams defines parameters for ReposlistBranches.
type ReposlistBranchesParams struct {
	// Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
	Protected *bool `json:"protected,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposupdateBranchProtectionJSONBody defines parameters for ReposupdateBranchProtection.
type ReposupdateBranchProtectionJSONBody struct {
	// Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
	AllowDeletions *bool `json:"allow_deletions,omitempty"`

	// Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
	AllowForcePushes *bool `json:"allow_force_pushes"`

	// Blocks creation of new branches which match the branch protection pattern. Set to `true` to prohibit new branch creation. Default: `false`.
	BlockCreations *bool `json:"block_creations,omitempty"`

	// Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
	EnforceAdmins *bool `json:"enforce_admins"`

	// Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
	RequiredConversationResolution *bool `json:"required_conversation_resolution,omitempty"`

	// Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
	RequiredLinearHistory *bool `json:"required_linear_history,omitempty"`

	// Require at least one approving review on a pull request, before merging. Set to `null` to disable.
	RequiredPullRequestReviews *struct {
		// Allow specific users or teams to bypass pull request requirements.
		BypassPullRequestAllowances *struct {
			// The list of team `slug`s allowed to bypass pull request requirements.
			Teams *[]string `json:"teams,omitempty"`

			// The list of user `login`s allowed to bypass pull request requirements.
			Users *[]string `json:"users,omitempty"`
		} `json:"bypass_pull_request_allowances,omitempty"`

		// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
		DismissStaleReviews *bool `json:"dismiss_stale_reviews,omitempty"`

		// Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
		DismissalRestrictions *struct {
			// The list of team `slug`s with dismissal access
			Teams *[]string `json:"teams,omitempty"`

			// The list of user `login`s with dismissal access
			Users *[]string `json:"users,omitempty"`
		} `json:"dismissal_restrictions,omitempty"`

		// Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
		RequireCodeOwnerReviews *bool `json:"require_code_owner_reviews,omitempty"`

		// Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
		RequiredApprovingReviewCount *int `json:"required_approving_review_count,omitempty"`
	} `json:"required_pull_request_reviews"`

	// Require status checks to pass before merging. Set to `null` to disable.
	RequiredStatusChecks *struct {
		// The list of status checks to require in order to merge into this branch.
		Checks *[]struct {
			// The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
			AppId *int `json:"app_id,omitempty"`

			// The name of the required check
			Context string `json:"context"`
		} `json:"checks,omitempty"`

		// **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
		Contexts []string `json:"contexts"`

		// Require branches to be up to date before merging.
		Strict bool `json:"strict"`
	} `json:"required_status_checks"`

	// Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
	Restrictions *struct {
		// The list of app `slug`s with push access
		Apps *[]string `json:"apps,omitempty"`

		// The list of team `slug`s with push access
		Teams []string `json:"teams"`

		// The list of user `login`s with push access
		Users []string `json:"users"`
	} `json:"restrictions"`
}

// ReposupdatePullRequestReviewProtectionJSONBody defines parameters for ReposupdatePullRequestReviewProtection.
type ReposupdatePullRequestReviewProtectionJSONBody struct {
	// Allow specific users or teams to bypass pull request requirements.
	BypassPullRequestAllowances *struct {
		// The list of team `slug`s allowed to bypass pull request requirements.
		Teams *[]string `json:"teams,omitempty"`

		// The list of user `login`s allowed to bypass pull request requirements.
		Users *[]string `json:"users,omitempty"`
	} `json:"bypass_pull_request_allowances,omitempty"`

	// Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
	DismissStaleReviews *bool `json:"dismiss_stale_reviews,omitempty"`

	// Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
	DismissalRestrictions *struct {
		// The list of team `slug`s with dismissal access
		Teams *[]string `json:"teams,omitempty"`

		// The list of user `login`s with dismissal access
		Users *[]string `json:"users,omitempty"`
	} `json:"dismissal_restrictions,omitempty"`

	// Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
	RequireCodeOwnerReviews *bool `json:"require_code_owner_reviews,omitempty"`

	// Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
	RequiredApprovingReviewCount *int `json:"required_approving_review_count,omitempty"`
}

// ReposupdateStatusCheckProtectionJSONBody defines parameters for ReposupdateStatusCheckProtection.
type ReposupdateStatusCheckProtectionJSONBody struct {
	// The list of status checks to require in order to merge into this branch.
	Checks *[]struct {
		// The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
		AppId *int `json:"app_id,omitempty"`

		// The name of the required check
		Context string `json:"context"`
	} `json:"checks,omitempty"`

	// **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
	Contexts *[]string `json:"contexts,omitempty"`

	// Require branches to be up to date before merging.
	Strict *bool `json:"strict,omitempty"`
}

// ReposremoveStatusCheckContextsJSONBody defines parameters for ReposremoveStatusCheckContexts.
type ReposremoveStatusCheckContextsJSONBody interface{}

// ReposaddStatusCheckContextsJSONBody defines parameters for ReposaddStatusCheckContexts.
type ReposaddStatusCheckContextsJSONBody interface{}

// RepossetStatusCheckContextsJSONBody defines parameters for RepossetStatusCheckContexts.
type RepossetStatusCheckContextsJSONBody interface{}

// ReposremoveAppAccessRestrictionsJSONBody defines parameters for ReposremoveAppAccessRestrictions.
type ReposremoveAppAccessRestrictionsJSONBody interface{}

// ReposaddAppAccessRestrictionsJSONBody defines parameters for ReposaddAppAccessRestrictions.
type ReposaddAppAccessRestrictionsJSONBody interface{}

// RepossetAppAccessRestrictionsJSONBody defines parameters for RepossetAppAccessRestrictions.
type RepossetAppAccessRestrictionsJSONBody interface{}

// ReposremoveTeamAccessRestrictionsJSONBody defines parameters for ReposremoveTeamAccessRestrictions.
type ReposremoveTeamAccessRestrictionsJSONBody interface{}

// ReposaddTeamAccessRestrictionsJSONBody defines parameters for ReposaddTeamAccessRestrictions.
type ReposaddTeamAccessRestrictionsJSONBody interface{}

// RepossetTeamAccessRestrictionsJSONBody defines parameters for RepossetTeamAccessRestrictions.
type RepossetTeamAccessRestrictionsJSONBody interface{}

// ReposremoveUserAccessRestrictionsJSONBody defines parameters for ReposremoveUserAccessRestrictions.
type ReposremoveUserAccessRestrictionsJSONBody interface{}

// ReposaddUserAccessRestrictionsJSONBody defines parameters for ReposaddUserAccessRestrictions.
type ReposaddUserAccessRestrictionsJSONBody interface{}

// RepossetUserAccessRestrictionsJSONBody defines parameters for RepossetUserAccessRestrictions.
type RepossetUserAccessRestrictionsJSONBody interface{}

// ReposrenameBranchJSONBody defines parameters for ReposrenameBranch.
type ReposrenameBranchJSONBody struct {
	// The new name of the branch.
	NewName string `json:"new_name"`
}

// CheckscreateJSONBody defines parameters for Checkscreate.
type CheckscreateJSONBody interface{}

// ChecksupdateJSONBody defines parameters for Checksupdate.
type ChecksupdateJSONBody interface{}

// CheckslistAnnotationsParams defines parameters for CheckslistAnnotations.
type CheckslistAnnotationsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// CheckscreateSuiteJSONBody defines parameters for CheckscreateSuite.
type CheckscreateSuiteJSONBody struct {
	// The sha of the head commit.
	HeadSha string `json:"head_sha"`
}

// CheckssetSuitesPreferencesJSONBody defines parameters for CheckssetSuitesPreferences.
type CheckssetSuitesPreferencesJSONBody struct {
	// Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
	AutoTriggerChecks *[]struct {
		// The `id` of the GitHub App.
		AppId int `json:"app_id"`

		// Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
		Setting bool `json:"setting"`
	} `json:"auto_trigger_checks,omitempty"`
}

// CheckslistForSuiteParams defines parameters for CheckslistForSuite.
type CheckslistForSuiteParams struct {
	// Returns check runs with the specified `name`.
	CheckName *CheckName `json:"check_name,omitempty"`

	// Returns check runs with the specified `status`.
	Status *CheckslistForSuiteParamsStatus `json:"status,omitempty"`

	// Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
	Filter *CheckslistForSuiteParamsFilter `json:"filter,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// CheckslistForSuiteParamsStatus defines parameters for CheckslistForSuite.
type CheckslistForSuiteParamsStatus string

// CheckslistForSuiteParamsFilter defines parameters for CheckslistForSuite.
type CheckslistForSuiteParamsFilter string

// CodeScanninglistAlertsForRepoParams defines parameters for CodeScanninglistAlertsForRepo.
type CodeScanninglistAlertsForRepoParams struct {
	// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
	ToolName *ToolName `json:"tool_name,omitempty"`

	// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
	ToolGuid *ToolGuid `json:"tool_guid,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
	Ref *GitRef `json:"ref,omitempty"`

	// The direction to sort the results by.
	Direction *CodeScanninglistAlertsForRepoParamsDirection `json:"direction,omitempty"`

	// The property by which to sort the results.
	Sort *CodeScanninglistAlertsForRepoParamsSort `json:"sort,omitempty"`

	// Set to `open`, `closed, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
	State *CodeScanningAlertState `json:"state,omitempty"`
}

// CodeScanninglistAlertsForRepoParamsDirection defines parameters for CodeScanninglistAlertsForRepo.
type CodeScanninglistAlertsForRepoParamsDirection string

// CodeScanninglistAlertsForRepoParamsSort defines parameters for CodeScanninglistAlertsForRepo.
type CodeScanninglistAlertsForRepoParamsSort string

// CodeScanningupdateAlertJSONBody defines parameters for CodeScanningupdateAlert.
type CodeScanningupdateAlertJSONBody struct {
	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *CodeScanningAlertDismissedComment `json:"dismissed_comment"`

	// **Required when the state is dismissed.** The reason for dismissing or closing the alert.
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason"`

	// Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
	State CodeScanningAlertSetState `json:"state"`
}

// CodeScanninglistAlertInstancesParams defines parameters for CodeScanninglistAlertInstances.
type CodeScanninglistAlertInstancesParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
	Ref *GitRef `json:"ref,omitempty"`
}

// CodeScanninglistRecentAnalysesParams defines parameters for CodeScanninglistRecentAnalyses.
type CodeScanninglistRecentAnalysesParams struct {
	// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
	ToolName *ToolName `json:"tool_name,omitempty"`

	// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
	ToolGuid *ToolGuid `json:"tool_guid,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
	Ref *CodeScanningRef `json:"ref,omitempty"`

	// Filter analyses belonging to the same SARIF upload.
	SarifId *CodeScanningAnalysisSarifId `json:"sarif_id,omitempty"`
}

// CodeScanningdeleteAnalysisParams defines parameters for CodeScanningdeleteAnalysis.
type CodeScanningdeleteAnalysisParams struct {
	// Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
	ConfirmDelete *string `json:"confirm_delete,omitempty"`
}

// CodeScanninguploadSarifJSONBody defines parameters for CodeScanninguploadSarif.
type CodeScanninguploadSarifJSONBody struct {
	// The base directory used in the analysis, as it appears in the SARIF file.
	// This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
	CheckoutUri *string `json:"checkout_uri,omitempty"`

	// The SHA of the commit to which the analysis you are uploading relates.
	CommitSha CodeScanningAnalysisCommitSha `json:"commit_sha"`

	// The full Git reference, formatted as `refs/heads/<branch name>`,
	// `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
	Ref CodeScanningRef `json:"ref"`

	// A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
	Sarif CodeScanningAnalysisSarifFile `json:"sarif"`

	// The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
	ToolName *string `json:"tool_name,omitempty"`
}

// ReposcodeownersErrorsParams defines parameters for ReposcodeownersErrors.
type ReposcodeownersErrorsParams struct {
	// A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)
	Ref *string `json:"ref,omitempty"`
}

// CodespaceslistInRepositoryForAuthenticatedUserParams defines parameters for CodespaceslistInRepositoryForAuthenticatedUser.
type CodespaceslistInRepositoryForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// CodespacescreateWithRepoForAuthenticatedUserJSONBody defines parameters for CodespacescreateWithRepoForAuthenticatedUser.
type CodespacescreateWithRepoForAuthenticatedUserJSONBody struct {
	// IP for location auto-detection when proxying a request
	ClientIp *string `json:"client_ip,omitempty"`

	// Path to devcontainer.json config to use for this codespace
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// Display name for this codespace
	DisplayName *string `json:"display_name,omitempty"`

	// Time in minutes before codespace stops from inactivity
	IdleTimeoutMinutes *int `json:"idle_timeout_minutes,omitempty"`

	// Location for this codespace. Assigned by IP if not provided
	Location *string `json:"location,omitempty"`

	// Machine type to use for this codespace
	Machine *string `json:"machine,omitempty"`

	// Whether to authorize requested permissions from devcontainer.json
	MultiRepoPermissionsOptOut *bool `json:"multi_repo_permissions_opt_out,omitempty"`

	// Git ref (typically a branch name) for this codespace
	Ref *string `json:"ref,omitempty"`

	// Working directory for this codespace
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

// CodespaceslistDevcontainersInRepositoryForAuthenticatedUserParams defines parameters for CodespaceslistDevcontainersInRepositoryForAuthenticatedUser.
type CodespaceslistDevcontainersInRepositoryForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// CodespacesrepoMachinesForAuthenticatedUserParams defines parameters for CodespacesrepoMachinesForAuthenticatedUser.
type CodespacesrepoMachinesForAuthenticatedUserParams struct {
	// The location to check for available machines. Assigned by IP if not provided.
	Location *string `json:"location,omitempty"`

	// IP for location auto-detection when proxying a request
	ClientIp *string `json:"client_ip,omitempty"`
}

// CodespaceslistRepoSecretsParams defines parameters for CodespaceslistRepoSecrets.
type CodespaceslistRepoSecretsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// CodespacescreateOrUpdateRepoSecretJSONBody defines parameters for CodespacescreateOrUpdateRepoSecret.
type CodespacescreateOrUpdateRepoSecretJSONBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyId *string `json:"key_id,omitempty"`
}

// ReposlistCollaboratorsParams defines parameters for ReposlistCollaborators.
type ReposlistCollaboratorsParams struct {
	// Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
	Affiliation *ReposlistCollaboratorsParamsAffiliation `json:"affiliation,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistCollaboratorsParamsAffiliation defines parameters for ReposlistCollaborators.
type ReposlistCollaboratorsParamsAffiliation string

// ReposaddCollaboratorJSONBody defines parameters for ReposaddCollaborator.
type ReposaddCollaboratorJSONBody struct {
	// The permission to grant the collaborator. **Only valid on organization-owned repositories.** In addition to the enumerated values, you can also specify a custom repository role name, if the owning organization has defined any.
	Permission  *ReposaddCollaboratorJSONBodyPermission `json:"permission,omitempty"`
	Permissions *string                                 `json:"permissions,omitempty"`
}

// ReposaddCollaboratorJSONBodyPermission defines parameters for ReposaddCollaborator.
type ReposaddCollaboratorJSONBodyPermission string

// ReposlistCommitCommentsForRepoParams defines parameters for ReposlistCommitCommentsForRepo.
type ReposlistCommitCommentsForRepoParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposupdateCommitCommentJSONBody defines parameters for ReposupdateCommitComment.
type ReposupdateCommitCommentJSONBody struct {
	// The contents of the comment
	Body string `json:"body"`
}

// ReactionslistForCommitCommentParams defines parameters for ReactionslistForCommitComment.
type ReactionslistForCommitCommentParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
	Content *ReactionslistForCommitCommentParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForCommitCommentParamsContent defines parameters for ReactionslistForCommitComment.
type ReactionslistForCommitCommentParamsContent string

// ReactionscreateForCommitCommentJSONBody defines parameters for ReactionscreateForCommitComment.
type ReactionscreateForCommitCommentJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
	Content ReactionscreateForCommitCommentJSONBodyContent `json:"content"`
}

// ReactionscreateForCommitCommentJSONBodyContent defines parameters for ReactionscreateForCommitComment.
type ReactionscreateForCommitCommentJSONBodyContent string

// ReposlistCommitsParams defines parameters for ReposlistCommits.
type ReposlistCommitsParams struct {
	// SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
	Sha *string `json:"sha,omitempty"`

	// Only commits containing this file path will be returned.
	Path *string `json:"path,omitempty"`

	// GitHub login or email address by which to filter by commit author.
	Author *string `json:"author,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Until *time.Time `json:"until,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistCommentsForCommitParams defines parameters for ReposlistCommentsForCommit.
type ReposlistCommentsForCommitParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateCommitCommentJSONBody defines parameters for ReposcreateCommitComment.
type ReposcreateCommitCommentJSONBody struct {
	// The contents of the comment.
	Body string `json:"body"`

	// **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
	Line *int `json:"line,omitempty"`

	// Relative path of the file to comment on.
	Path *string `json:"path,omitempty"`

	// Line index in the diff to comment on.
	Position *int `json:"position,omitempty"`
}

// ReposlistPullRequestsAssociatedWithCommitParams defines parameters for ReposlistPullRequestsAssociatedWithCommit.
type ReposlistPullRequestsAssociatedWithCommitParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposgetCommitParams defines parameters for ReposgetCommit.
type ReposgetCommitParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// CheckslistForRefParams defines parameters for CheckslistForRef.
type CheckslistForRefParams struct {
	// Returns check runs with the specified `name`.
	CheckName *CheckName `json:"check_name,omitempty"`

	// Returns check runs with the specified `status`.
	Status *CheckslistForRefParamsStatus `json:"status,omitempty"`

	// Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
	Filter *CheckslistForRefParamsFilter `json:"filter,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page  *Page `json:"page,omitempty"`
	AppId *int  `json:"app_id,omitempty"`
}

// CheckslistForRefParamsStatus defines parameters for CheckslistForRef.
type CheckslistForRefParamsStatus string

// CheckslistForRefParamsFilter defines parameters for CheckslistForRef.
type CheckslistForRefParamsFilter string

// CheckslistSuitesForRefParams defines parameters for CheckslistSuitesForRef.
type CheckslistSuitesForRefParams struct {
	// Filters check suites by GitHub App `id`.
	AppId *int `json:"app_id,omitempty"`

	// Returns check runs with the specified `name`.
	CheckName *CheckName `json:"check_name,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposgetCombinedStatusForRefParams defines parameters for ReposgetCombinedStatusForRef.
type ReposgetCombinedStatusForRefParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistCommitStatusesForRefParams defines parameters for ReposlistCommitStatusesForRef.
type ReposlistCommitStatusesForRefParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcompareCommitsParams defines parameters for ReposcompareCommits.
type ReposcompareCommitsParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// ReposdeleteFileJSONBody defines parameters for ReposdeleteFile.
type ReposdeleteFileJSONBody struct {
	// object containing information about the author.
	Author *struct {
		// The email of the author (or committer) of the commit
		Email *string `json:"email,omitempty"`

		// The name of the author (or committer) of the commit
		Name *string `json:"name,omitempty"`
	} `json:"author,omitempty"`

	// The branch name. Default: the repository’s default branch (usually `master`)
	Branch *string `json:"branch,omitempty"`

	// object containing information about the committer.
	Committer *struct {
		// The email of the author (or committer) of the commit
		Email *string `json:"email,omitempty"`

		// The name of the author (or committer) of the commit
		Name *string `json:"name,omitempty"`
	} `json:"committer,omitempty"`

	// The commit message.
	Message string `json:"message"`

	// The blob SHA of the file being replaced.
	Sha string `json:"sha"`
}

// ReposgetContentParams defines parameters for ReposgetContent.
type ReposgetContentParams struct {
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
	Ref *string `json:"ref,omitempty"`
}

// ReposcreateOrUpdateFileContentsJSONBody defines parameters for ReposcreateOrUpdateFileContents.
type ReposcreateOrUpdateFileContentsJSONBody struct {
	// The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
	Author *struct {
		Date *string `json:"date,omitempty"`

		// The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
		Email string `json:"email"`

		// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
		Name string `json:"name"`
	} `json:"author,omitempty"`

	// The branch name. Default: the repository’s default branch (usually `master`)
	Branch *string `json:"branch,omitempty"`

	// The person that committed the file. Default: the authenticated user.
	Committer *struct {
		Date *string `json:"date,omitempty"`

		// The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
		Email string `json:"email"`

		// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
		Name string `json:"name"`
	} `json:"committer,omitempty"`

	// The new file content, using Base64 encoding.
	Content string `json:"content"`

	// The commit message.
	Message string `json:"message"`

	// **Required if you are updating a file**. The blob SHA of the file being replaced.
	Sha *string `json:"sha,omitempty"`
}

// ReposlistContributorsParams defines parameters for ReposlistContributors.
type ReposlistContributorsParams struct {
	// Set to `1` or `true` to include anonymous contributors in results.
	Anon *string `json:"anon,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// DependabotlistRepoSecretsParams defines parameters for DependabotlistRepoSecrets.
type DependabotlistRepoSecretsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// DependabotcreateOrUpdateRepoSecretJSONBody defines parameters for DependabotcreateOrUpdateRepoSecret.
type DependabotcreateOrUpdateRepoSecretJSONBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyId *string `json:"key_id,omitempty"`
}

// DependencyGraphdiffRangeParams defines parameters for DependencyGraphdiffRange.
type DependencyGraphdiffRangeParams struct {
	// The full path, relative to the repository root, of the dependency manifest file.
	Name *ManifestPath `json:"name,omitempty"`
}

// ReposlistDeploymentsParams defines parameters for ReposlistDeployments.
type ReposlistDeploymentsParams struct {
	// The SHA recorded at creation time.
	Sha *string `json:"sha,omitempty"`

	// The name of the ref. This can be a branch, tag, or SHA.
	Ref *string `json:"ref,omitempty"`

	// The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
	Task *string `json:"task,omitempty"`

	// The name of the environment that was deployed to (e.g., `staging` or `production`).
	Environment *string `json:"environment,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateDeploymentJSONBody defines parameters for ReposcreateDeployment.
type ReposcreateDeploymentJSONBody struct {
	// Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
	AutoMerge *bool `json:"auto_merge,omitempty"`

	// Short description of the deployment.
	Description *string `json:"description"`

	// Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
	Environment *string      `json:"environment,omitempty"`
	Payload     *interface{} `json:"payload,omitempty"`

	// Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
	ProductionEnvironment *bool `json:"production_environment,omitempty"`

	// The ref to deploy. This can be a branch, tag, or SHA.
	Ref string `json:"ref"`

	// The [status](https://docs.github.com/rest/reference/commits#commit-statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
	RequiredContexts *[]string `json:"required_contexts,omitempty"`

	// Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
	Task *string `json:"task,omitempty"`

	// Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
	TransientEnvironment *bool `json:"transient_environment,omitempty"`
}

// ReposlistDeploymentStatusesParams defines parameters for ReposlistDeploymentStatuses.
type ReposlistDeploymentStatusesParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateDeploymentStatusJSONBody defines parameters for ReposcreateDeploymentStatus.
type ReposcreateDeploymentStatusJSONBody struct {
	// Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
	AutoInactive *bool `json:"auto_inactive,omitempty"`

	// A short description of the status. The maximum description length is 140 characters.
	Description *string `json:"description,omitempty"`

	// Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
	Environment *ReposcreateDeploymentStatusJSONBodyEnvironment `json:"environment,omitempty"`

	// Sets the URL for accessing your environment. Default: `""`
	EnvironmentUrl *string `json:"environment_url,omitempty"`

	// The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
	LogUrl *string `json:"log_url,omitempty"`

	// The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
	State ReposcreateDeploymentStatusJSONBodyState `json:"state"`

	// The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
	TargetUrl *string `json:"target_url,omitempty"`
}

// ReposcreateDeploymentStatusJSONBodyEnvironment defines parameters for ReposcreateDeploymentStatus.
type ReposcreateDeploymentStatusJSONBodyEnvironment string

// ReposcreateDeploymentStatusJSONBodyState defines parameters for ReposcreateDeploymentStatus.
type ReposcreateDeploymentStatusJSONBodyState string

// ReposcreateDispatchEventJSONBody defines parameters for ReposcreateDispatchEvent.
type ReposcreateDispatchEventJSONBody struct {
	// JSON payload with extra information about the webhook event that your action or worklow may use.
	ClientPayload *ReposcreateDispatchEventJSONBody_ClientPayload `json:"client_payload,omitempty"`

	// A custom webhook event name. Must be 100 characters or fewer.
	EventType string `json:"event_type"`
}

// ReposcreateDispatchEventJSONBody_ClientPayload defines parameters for ReposcreateDispatchEvent.
type ReposcreateDispatchEventJSONBody_ClientPayload struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReposgetAllEnvironmentsParams defines parameters for ReposgetAllEnvironments.
type ReposgetAllEnvironmentsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateOrUpdateEnvironmentJSONBody defines parameters for ReposcreateOrUpdateEnvironment.
type ReposcreateOrUpdateEnvironmentJSONBody struct {
	// The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
	DeploymentBranchPolicy *DeploymentBranchPolicy `json:"deployment_branch_policy"`

	// The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
	Reviewers *[]struct {
		// The id of the user or team who can review the deployment
		Id *int `json:"id,omitempty"`

		// The type of reviewer.
		Type *DeploymentReviewerType `json:"type,omitempty"`
	} `json:"reviewers"`

	// The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
	WaitTimer *WaitTimer `json:"wait_timer,omitempty"`
}

// ActivitylistRepoEventsParams defines parameters for ActivitylistRepoEvents.
type ActivitylistRepoEventsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistForksParams defines parameters for ReposlistForks.
type ReposlistForksParams struct {
	// The sort order. Can be either `newest`, `oldest`, or `stargazers`.
	Sort *ReposlistForksParamsSort `json:"sort,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistForksParamsSort defines parameters for ReposlistForks.
type ReposlistForksParamsSort string

// ReposcreateForkJSONBody defines parameters for ReposcreateFork.
type ReposcreateForkJSONBody struct {
	// Optional parameter to specify the organization name if forking into an organization.
	Organization *string `json:"organization,omitempty"`
}

// GitcreateBlobJSONBody defines parameters for GitcreateBlob.
type GitcreateBlobJSONBody struct {
	// The new blob's content.
	Content string `json:"content"`

	// The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
	Encoding *string `json:"encoding,omitempty"`
}

// GitcreateCommitJSONBody defines parameters for GitcreateCommit.
type GitcreateCommitJSONBody struct {
	// Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
	Author *struct {
		// Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		Date *time.Time `json:"date,omitempty"`

		// The email of the author (or committer) of the commit
		Email string `json:"email"`

		// The name of the author (or committer) of the commit
		Name string `json:"name"`
	} `json:"author,omitempty"`

	// Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
	Committer *struct {
		// Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		Date *time.Time `json:"date,omitempty"`

		// The email of the author (or committer) of the commit
		Email *string `json:"email,omitempty"`

		// The name of the author (or committer) of the commit
		Name *string `json:"name,omitempty"`
	} `json:"committer,omitempty"`

	// The commit message
	Message string `json:"message"`

	// The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
	Parents *[]string `json:"parents,omitempty"`

	// The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
	Signature *string `json:"signature,omitempty"`

	// The SHA of the tree object this commit points to
	Tree string `json:"tree"`
}

// GitlistMatchingRefsParams defines parameters for GitlistMatchingRefs.
type GitlistMatchingRefsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// GitcreateRefJSONBody defines parameters for GitcreateRef.
type GitcreateRefJSONBody struct {
	Key *string `json:"key,omitempty"`

	// The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
	Ref string `json:"ref"`

	// The SHA1 value for this reference.
	Sha string `json:"sha"`
}

// GitupdateRefJSONBody defines parameters for GitupdateRef.
type GitupdateRefJSONBody struct {
	// Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
	Force *bool `json:"force,omitempty"`

	// The SHA1 value to set this reference to
	Sha string `json:"sha"`
}

// GitcreateTagJSONBody defines parameters for GitcreateTag.
type GitcreateTagJSONBody struct {
	// The tag message.
	Message string `json:"message"`

	// The SHA of the git object this is tagging.
	Object string `json:"object"`

	// The tag's name. This is typically a version (e.g., "v0.0.1").
	Tag string `json:"tag"`

	// An object with information about the individual creating the tag.
	Tagger *struct {
		// When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
		Date *time.Time `json:"date,omitempty"`

		// The email of the author of the tag
		Email string `json:"email"`

		// The name of the author of the tag
		Name string `json:"name"`
	} `json:"tagger,omitempty"`

	// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
	Type GitcreateTagJSONBodyType `json:"type"`
}

// GitcreateTagJSONBodyType defines parameters for GitcreateTag.
type GitcreateTagJSONBodyType string

// GitcreateTreeJSONBody defines parameters for GitcreateTree.
type GitcreateTreeJSONBody struct {
	// The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
	// If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
	BaseTree *string `json:"base_tree,omitempty"`

	// Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
	Tree []struct {
		// The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
		//
		// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
		Content *string `json:"content,omitempty"`

		// The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
		Mode *GitcreateTreeJSONBodyTreeMode `json:"mode,omitempty"`

		// The file referenced in the tree.
		Path *string `json:"path,omitempty"`

		// The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
		//
		// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
		Sha *string `json:"sha"`

		// Either `blob`, `tree`, or `commit`.
		Type *GitcreateTreeJSONBodyTreeType `json:"type,omitempty"`
	} `json:"tree"`
}

// GitcreateTreeJSONBodyTreeMode defines parameters for GitcreateTree.
type GitcreateTreeJSONBodyTreeMode string

// GitcreateTreeJSONBodyTreeType defines parameters for GitcreateTree.
type GitcreateTreeJSONBodyTreeType string

// GitgetTreeParams defines parameters for GitgetTree.
type GitgetTreeParams struct {
	// Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
	Recursive *string `json:"recursive,omitempty"`
}

// ReposlistWebhooksParams defines parameters for ReposlistWebhooks.
type ReposlistWebhooksParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateWebhookJSONBody defines parameters for ReposcreateWebhook.
type ReposcreateWebhookJSONBody struct {
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	Active *bool `json:"active,omitempty"`

	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
	Config *struct {
		// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
		ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
		Digest      *string                   `json:"digest,omitempty"`
		InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`

		// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
		Secret *WebhookConfigSecret `json:"secret,omitempty"`
		Token  *string              `json:"token,omitempty"`

		// The URL to which the payloads will be delivered.
		Url *WebhookConfigUrl `json:"url,omitempty"`
	} `json:"config,omitempty"`

	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
	Events *[]string `json:"events,omitempty"`

	// Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
	Name *string `json:"name,omitempty"`
}

// ReposupdateWebhookJSONBody defines parameters for ReposupdateWebhook.
type ReposupdateWebhookJSONBody struct {
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	Active *bool `json:"active,omitempty"`

	// Determines a list of events to be added to the list of events that the Hook triggers for.
	AddEvents *[]string `json:"add_events,omitempty"`

	// Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
	Config *struct {
		Address *string `json:"address,omitempty"`

		// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
		ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
		InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`
		Room        *string                   `json:"room,omitempty"`

		// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
		Secret *WebhookConfigSecret `json:"secret,omitempty"`

		// The URL to which the payloads will be delivered.
		Url WebhookConfigUrl `json:"url"`
	} `json:"config,omitempty"`

	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
	Events *[]string `json:"events,omitempty"`

	// Determines a list of events to be removed from the list of events that the Hook triggers for.
	RemoveEvents *[]string `json:"remove_events,omitempty"`
}

// ReposupdateWebhookConfigForRepoJSONBody defines parameters for ReposupdateWebhookConfigForRepo.
type ReposupdateWebhookConfigForRepoJSONBody struct {
	// The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
	ContentType *WebhookConfigContentType `json:"content_type,omitempty"`
	InsecureSsl *WebhookConfigInsecureSsl `json:"insecure_ssl,omitempty"`

	// If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
	Secret *WebhookConfigSecret `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	Url *WebhookConfigUrl `json:"url,omitempty"`
}

// ReposlistWebhookDeliveriesParams defines parameters for ReposlistWebhookDeliveries.
type ReposlistWebhookDeliveriesParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
	Cursor *Cursor `json:"cursor,omitempty"`
}

// MigrationsupdateImportJSONBody defines parameters for MigrationsupdateImport.
type MigrationsupdateImportJSONBody struct {
	// For a tfvc import, the name of the project that is being imported.
	TfvcProject *string `json:"tfvc_project,omitempty"`

	// The type of version control system you are migrating from.
	Vcs *MigrationsupdateImportJSONBodyVcs `json:"vcs,omitempty"`

	// The password to provide to the originating repository.
	VcsPassword *string `json:"vcs_password,omitempty"`

	// The username to provide to the originating repository.
	VcsUsername *string `json:"vcs_username,omitempty"`
}

// MigrationsupdateImportJSONBodyVcs defines parameters for MigrationsupdateImport.
type MigrationsupdateImportJSONBodyVcs string

// MigrationsstartImportJSONBody defines parameters for MigrationsstartImport.
type MigrationsstartImportJSONBody struct {
	// For a tfvc import, the name of the project that is being imported.
	TfvcProject *string `json:"tfvc_project,omitempty"`

	// The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
	Vcs *MigrationsstartImportJSONBodyVcs `json:"vcs,omitempty"`

	// If authentication is required, the password to provide to `vcs_url`.
	VcsPassword *string `json:"vcs_password,omitempty"`

	// The URL of the originating repository.
	VcsUrl string `json:"vcs_url"`

	// If authentication is required, the username to provide to `vcs_url`.
	VcsUsername *string `json:"vcs_username,omitempty"`
}

// MigrationsstartImportJSONBodyVcs defines parameters for MigrationsstartImport.
type MigrationsstartImportJSONBodyVcs string

// MigrationsgetCommitAuthorsParams defines parameters for MigrationsgetCommitAuthors.
type MigrationsgetCommitAuthorsParams struct {
	// A user ID. Only return users with an ID greater than this ID.
	Since *SinceUser `json:"since,omitempty"`
}

// MigrationsmapCommitAuthorJSONBody defines parameters for MigrationsmapCommitAuthor.
type MigrationsmapCommitAuthorJSONBody struct {
	// The new Git author email.
	Email *string `json:"email,omitempty"`

	// The new Git author name.
	Name *string `json:"name,omitempty"`
}

// MigrationssetLfsPreferenceJSONBody defines parameters for MigrationssetLfsPreference.
type MigrationssetLfsPreferenceJSONBody struct {
	// Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
	UseLfs MigrationssetLfsPreferenceJSONBodyUseLfs `json:"use_lfs"`
}

// MigrationssetLfsPreferenceJSONBodyUseLfs defines parameters for MigrationssetLfsPreference.
type MigrationssetLfsPreferenceJSONBodyUseLfs string

// InteractionssetRestrictionsForRepoJSONBody defines parameters for InteractionssetRestrictionsForRepo.
type InteractionssetRestrictionsForRepoJSONBody InteractionLimit

// ReposlistInvitationsParams defines parameters for ReposlistInvitations.
type ReposlistInvitationsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposupdateInvitationJSONBody defines parameters for ReposupdateInvitation.
type ReposupdateInvitationJSONBody struct {
	// The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
	Permissions *ReposupdateInvitationJSONBodyPermissions `json:"permissions,omitempty"`
}

// ReposupdateInvitationJSONBodyPermissions defines parameters for ReposupdateInvitation.
type ReposupdateInvitationJSONBodyPermissions string

// IssueslistForRepoParams defines parameters for IssueslistForRepo.
type IssueslistForRepoParams struct {
	// If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
	Milestone *string `json:"milestone,omitempty"`

	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State *IssueslistForRepoParamsState `json:"state,omitempty"`

	// Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
	Assignee *string `json:"assignee,omitempty"`

	// The user that created the issue.
	Creator *string `json:"creator,omitempty"`

	// A user that's mentioned in the issue.
	Mentioned *string `json:"mentioned,omitempty"`

	// A list of comma separated label names. Example: `bug,ui,@high`
	Labels *Labels `json:"labels,omitempty"`

	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort *IssueslistForRepoParamsSort `json:"sort,omitempty"`

	// The direction to sort the results by.
	Direction *IssueslistForRepoParamsDirection `json:"direction,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistForRepoParamsState defines parameters for IssueslistForRepo.
type IssueslistForRepoParamsState string

// IssueslistForRepoParamsSort defines parameters for IssueslistForRepo.
type IssueslistForRepoParamsSort string

// IssueslistForRepoParamsDirection defines parameters for IssueslistForRepo.
type IssueslistForRepoParamsDirection string

// IssuescreateJSONBody defines parameters for Issuescreate.
type IssuescreateJSONBody struct {
	// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
	Assignee *string `json:"assignee"`

	// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
	Assignees *[]string `json:"assignees,omitempty"`

	// The contents of the issue.
	Body *string `json:"body,omitempty"`

	// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
	Labels    *[]interface{} `json:"labels,omitempty"`
	Milestone *interface{}   `json:"milestone"`

	// The title of the issue.
	Title interface{} `json:"title"`
}

// IssueslistCommentsForRepoParams defines parameters for IssueslistCommentsForRepo.
type IssueslistCommentsForRepoParams struct {
	// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
	Sort *IssueslistCommentsForRepoParamsSort `json:"sort,omitempty"`

	// Either `asc` or `desc`. Ignored without the `sort` parameter.
	Direction *IssueslistCommentsForRepoParamsDirection `json:"direction,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistCommentsForRepoParamsSort defines parameters for IssueslistCommentsForRepo.
type IssueslistCommentsForRepoParamsSort string

// IssueslistCommentsForRepoParamsDirection defines parameters for IssueslistCommentsForRepo.
type IssueslistCommentsForRepoParamsDirection string

// IssuesupdateCommentJSONBody defines parameters for IssuesupdateComment.
type IssuesupdateCommentJSONBody struct {
	// The contents of the comment.
	Body string `json:"body"`
}

// ReactionslistForIssueCommentParams defines parameters for ReactionslistForIssueComment.
type ReactionslistForIssueCommentParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
	Content *ReactionslistForIssueCommentParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForIssueCommentParamsContent defines parameters for ReactionslistForIssueComment.
type ReactionslistForIssueCommentParamsContent string

// ReactionscreateForIssueCommentJSONBody defines parameters for ReactionscreateForIssueComment.
type ReactionscreateForIssueCommentJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
	Content ReactionscreateForIssueCommentJSONBodyContent `json:"content"`
}

// ReactionscreateForIssueCommentJSONBodyContent defines parameters for ReactionscreateForIssueComment.
type ReactionscreateForIssueCommentJSONBodyContent string

// IssueslistEventsForRepoParams defines parameters for IssueslistEventsForRepo.
type IssueslistEventsForRepoParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssuesupdateJSONBody defines parameters for Issuesupdate.
type IssuesupdateJSONBody struct {
	// Login for the user that this issue should be assigned to. **This field is deprecated.**
	Assignee *string `json:"assignee"`

	// Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
	Assignees *[]string `json:"assignees,omitempty"`

	// The contents of the issue.
	Body *string `json:"body"`

	// Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
	Labels    *[]interface{} `json:"labels,omitempty"`
	Milestone *interface{}   `json:"milestone"`

	// State of the issue. Either `open` or `closed`.
	State *IssuesupdateJSONBodyState `json:"state,omitempty"`

	// The title of the issue.
	Title *interface{} `json:"title"`
}

// IssuesupdateJSONBodyState defines parameters for Issuesupdate.
type IssuesupdateJSONBodyState string

// IssuesremoveAssigneesJSONBody defines parameters for IssuesremoveAssignees.
type IssuesremoveAssigneesJSONBody struct {
	// Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
	Assignees *[]string `json:"assignees,omitempty"`
}

// IssuesaddAssigneesJSONBody defines parameters for IssuesaddAssignees.
type IssuesaddAssigneesJSONBody struct {
	// Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
	Assignees *[]string `json:"assignees,omitempty"`
}

// IssueslistCommentsParams defines parameters for IssueslistComments.
type IssueslistCommentsParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssuescreateCommentJSONBody defines parameters for IssuescreateComment.
type IssuescreateCommentJSONBody struct {
	// The contents of the comment.
	Body string `json:"body"`
}

// IssueslistEventsParams defines parameters for IssueslistEvents.
type IssueslistEventsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistLabelsOnIssueParams defines parameters for IssueslistLabelsOnIssue.
type IssueslistLabelsOnIssueParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssuesaddLabelsJSONBody defines parameters for IssuesaddLabels.
type IssuesaddLabelsJSONBody interface{}

// IssuessetLabelsJSONBody defines parameters for IssuessetLabels.
type IssuessetLabelsJSONBody interface{}

// IssueslockJSONBody defines parameters for Issueslock.
type IssueslockJSONBody struct {
	// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
	// \* `off-topic`
	// \* `too heated`
	// \* `resolved`
	// \* `spam`
	LockReason *IssueslockJSONBodyLockReason `json:"lock_reason,omitempty"`
}

// IssueslockJSONBodyLockReason defines parameters for Issueslock.
type IssueslockJSONBodyLockReason string

// ReactionslistForIssueParams defines parameters for ReactionslistForIssue.
type ReactionslistForIssueParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
	Content *ReactionslistForIssueParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForIssueParamsContent defines parameters for ReactionslistForIssue.
type ReactionslistForIssueParamsContent string

// ReactionscreateForIssueJSONBody defines parameters for ReactionscreateForIssue.
type ReactionscreateForIssueJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
	Content ReactionscreateForIssueJSONBodyContent `json:"content"`
}

// ReactionscreateForIssueJSONBodyContent defines parameters for ReactionscreateForIssue.
type ReactionscreateForIssueJSONBodyContent string

// IssueslistEventsForTimelineParams defines parameters for IssueslistEventsForTimeline.
type IssueslistEventsForTimelineParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistDeployKeysParams defines parameters for ReposlistDeployKeys.
type ReposlistDeployKeysParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateDeployKeyJSONBody defines parameters for ReposcreateDeployKey.
type ReposcreateDeployKeyJSONBody struct {
	// The contents of the key.
	Key string `json:"key"`

	// If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
	//
	// Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
	ReadOnly *bool `json:"read_only,omitempty"`

	// A name for the key.
	Title *string `json:"title,omitempty"`
}

// IssueslistLabelsForRepoParams defines parameters for IssueslistLabelsForRepo.
type IssueslistLabelsForRepoParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssuescreateLabelJSONBody defines parameters for IssuescreateLabel.
type IssuescreateLabelJSONBody struct {
	// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
	Color *string `json:"color,omitempty"`

	// A short description of the label. Must be 100 characters or fewer.
	Description *string `json:"description,omitempty"`

	// The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
	Name string `json:"name"`
}

// IssuesupdateLabelJSONBody defines parameters for IssuesupdateLabel.
type IssuesupdateLabelJSONBody struct {
	// The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
	Color *string `json:"color,omitempty"`

	// A short description of the label. Must be 100 characters or fewer.
	Description *string `json:"description,omitempty"`

	// The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
	NewName *string `json:"new_name,omitempty"`
}

// ReposmergeUpstreamJSONBody defines parameters for ReposmergeUpstream.
type ReposmergeUpstreamJSONBody struct {
	// The name of the branch which should be updated to match upstream.
	Branch string `json:"branch"`
}

// ReposmergeJSONBody defines parameters for Reposmerge.
type ReposmergeJSONBody struct {
	// The name of the base branch that the head will be merged into.
	Base string `json:"base"`

	// Commit message to use for the merge commit. If omitted, a default message will be used.
	CommitMessage *string `json:"commit_message,omitempty"`

	// The head to merge. This can be a branch name or a commit SHA1.
	Head string `json:"head"`
}

// IssueslistMilestonesParams defines parameters for IssueslistMilestones.
type IssueslistMilestonesParams struct {
	// The state of the milestone. Either `open`, `closed`, or `all`.
	State *IssueslistMilestonesParamsState `json:"state,omitempty"`

	// What to sort results by. Either `due_on` or `completeness`.
	Sort *IssueslistMilestonesParamsSort `json:"sort,omitempty"`

	// The direction of the sort. Either `asc` or `desc`.
	Direction *IssueslistMilestonesParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistMilestonesParamsState defines parameters for IssueslistMilestones.
type IssueslistMilestonesParamsState string

// IssueslistMilestonesParamsSort defines parameters for IssueslistMilestones.
type IssueslistMilestonesParamsSort string

// IssueslistMilestonesParamsDirection defines parameters for IssueslistMilestones.
type IssueslistMilestonesParamsDirection string

// IssuescreateMilestoneJSONBody defines parameters for IssuescreateMilestone.
type IssuescreateMilestoneJSONBody struct {
	// A description of the milestone.
	Description *string `json:"description,omitempty"`

	// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	DueOn *time.Time `json:"due_on,omitempty"`

	// The state of the milestone. Either `open` or `closed`.
	State *IssuescreateMilestoneJSONBodyState `json:"state,omitempty"`

	// The title of the milestone.
	Title string `json:"title"`
}

// IssuescreateMilestoneJSONBodyState defines parameters for IssuescreateMilestone.
type IssuescreateMilestoneJSONBodyState string

// IssuesupdateMilestoneJSONBody defines parameters for IssuesupdateMilestone.
type IssuesupdateMilestoneJSONBody struct {
	// A description of the milestone.
	Description *string `json:"description,omitempty"`

	// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	DueOn *time.Time `json:"due_on,omitempty"`

	// The state of the milestone. Either `open` or `closed`.
	State *IssuesupdateMilestoneJSONBodyState `json:"state,omitempty"`

	// The title of the milestone.
	Title *string `json:"title,omitempty"`
}

// IssuesupdateMilestoneJSONBodyState defines parameters for IssuesupdateMilestone.
type IssuesupdateMilestoneJSONBodyState string

// IssueslistLabelsForMilestoneParams defines parameters for IssueslistLabelsForMilestone.
type IssueslistLabelsForMilestoneParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistRepoNotificationsForAuthenticatedUserParams defines parameters for ActivitylistRepoNotificationsForAuthenticatedUser.
type ActivitylistRepoNotificationsForAuthenticatedUserParams struct {
	// If `true`, show notifications marked as read.
	All *All `json:"all,omitempty"`

	// If `true`, only shows notifications in which the user is directly participating or mentioned.
	Participating *Participating `json:"participating,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before *Before `json:"before,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitymarkRepoNotificationsAsReadJSONBody defines parameters for ActivitymarkRepoNotificationsAsRead.
type ActivitymarkRepoNotificationsAsReadJSONBody struct {
	// Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
	LastReadAt *time.Time `json:"last_read_at,omitempty"`
}

// ReposcreatePagesSiteJSONBody defines parameters for ReposcreatePagesSite.
type ReposcreatePagesSiteJSONBody interface{}

// ReposupdateInformationAboutPagesSiteJSONBody defines parameters for ReposupdateInformationAboutPagesSite.
type ReposupdateInformationAboutPagesSiteJSONBody interface{}

// ReposlistPagesBuildsParams defines parameters for ReposlistPagesBuilds.
type ReposlistPagesBuildsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ProjectslistForRepoParams defines parameters for ProjectslistForRepo.
type ProjectslistForRepoParams struct {
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State *ProjectslistForRepoParamsState `json:"state,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ProjectslistForRepoParamsState defines parameters for ProjectslistForRepo.
type ProjectslistForRepoParamsState string

// ProjectscreateForRepoJSONBody defines parameters for ProjectscreateForRepo.
type ProjectscreateForRepoJSONBody struct {
	// The description of the project.
	Body *string `json:"body,omitempty"`

	// The name of the project.
	Name string `json:"name"`
}

// PullslistParams defines parameters for Pullslist.
type PullslistParams struct {
	// Either `open`, `closed`, or `all` to filter by state.
	State *PullslistParamsState `json:"state,omitempty"`

	// Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
	Head *string `json:"head,omitempty"`

	// Filter pulls by base branch name. Example: `gh-pages`.
	Base *string `json:"base,omitempty"`

	// What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
	Sort *PullslistParamsSort `json:"sort,omitempty"`

	// The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
	Direction *PullslistParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PullslistParamsState defines parameters for Pullslist.
type PullslistParamsState string

// PullslistParamsSort defines parameters for Pullslist.
type PullslistParamsSort string

// PullslistParamsDirection defines parameters for Pullslist.
type PullslistParamsDirection string

// PullscreateJSONBody defines parameters for Pullscreate.
type PullscreateJSONBody struct {
	// The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
	Base string `json:"base"`

	// The contents of the pull request.
	Body *string `json:"body,omitempty"`

	// Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
	Draft *bool `json:"draft,omitempty"`

	// The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
	Head  string `json:"head"`
	Issue *int   `json:"issue,omitempty"`

	// Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`

	// The title of the new pull request.
	Title *string `json:"title,omitempty"`
}

// PullslistReviewCommentsForRepoParams defines parameters for PullslistReviewCommentsForRepo.
type PullslistReviewCommentsForRepoParams struct {
	Sort *PullslistReviewCommentsForRepoParamsSort `json:"sort,omitempty"`

	// Can be either `asc` or `desc`. Ignored without `sort` parameter.
	Direction *PullslistReviewCommentsForRepoParamsDirection `json:"direction,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PullslistReviewCommentsForRepoParamsSort defines parameters for PullslistReviewCommentsForRepo.
type PullslistReviewCommentsForRepoParamsSort string

// PullslistReviewCommentsForRepoParamsDirection defines parameters for PullslistReviewCommentsForRepo.
type PullslistReviewCommentsForRepoParamsDirection string

// PullsupdateReviewCommentJSONBody defines parameters for PullsupdateReviewComment.
type PullsupdateReviewCommentJSONBody struct {
	// The text of the reply to the review comment.
	Body string `json:"body"`
}

// ReactionslistForPullRequestReviewCommentParams defines parameters for ReactionslistForPullRequestReviewComment.
type ReactionslistForPullRequestReviewCommentParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
	Content *ReactionslistForPullRequestReviewCommentParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForPullRequestReviewCommentParamsContent defines parameters for ReactionslistForPullRequestReviewComment.
type ReactionslistForPullRequestReviewCommentParamsContent string

// ReactionscreateForPullRequestReviewCommentJSONBody defines parameters for ReactionscreateForPullRequestReviewComment.
type ReactionscreateForPullRequestReviewCommentJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
	Content ReactionscreateForPullRequestReviewCommentJSONBodyContent `json:"content"`
}

// ReactionscreateForPullRequestReviewCommentJSONBodyContent defines parameters for ReactionscreateForPullRequestReviewComment.
type ReactionscreateForPullRequestReviewCommentJSONBodyContent string

// PullsupdateJSONBody defines parameters for Pullsupdate.
type PullsupdateJSONBody struct {
	// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
	Base *string `json:"base,omitempty"`

	// The contents of the pull request.
	Body *string `json:"body,omitempty"`

	// Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`

	// State of this Pull Request. Either `open` or `closed`.
	State *PullsupdateJSONBodyState `json:"state,omitempty"`

	// The title of the pull request.
	Title *string `json:"title,omitempty"`
}

// PullsupdateJSONBodyState defines parameters for Pullsupdate.
type PullsupdateJSONBodyState string

// CodespacescreateWithPrForAuthenticatedUserJSONBody defines parameters for CodespacescreateWithPrForAuthenticatedUser.
type CodespacescreateWithPrForAuthenticatedUserJSONBody struct {
	// IP for location auto-detection when proxying a request
	ClientIp *string `json:"client_ip,omitempty"`

	// Path to devcontainer.json config to use for this codespace
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// Display name for this codespace
	DisplayName *string `json:"display_name,omitempty"`

	// Time in minutes before codespace stops from inactivity
	IdleTimeoutMinutes *int `json:"idle_timeout_minutes,omitempty"`

	// Location for this codespace. Assigned by IP if not provided
	Location *string `json:"location,omitempty"`

	// Machine type to use for this codespace
	Machine *string `json:"machine,omitempty"`

	// Whether to authorize requested permissions from devcontainer.json
	MultiRepoPermissionsOptOut *bool `json:"multi_repo_permissions_opt_out,omitempty"`

	// Working directory for this codespace
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

// PullslistReviewCommentsParams defines parameters for PullslistReviewComments.
type PullslistReviewCommentsParams struct {
	// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
	Sort *PullslistReviewCommentsParamsSort `json:"sort,omitempty"`

	// Can be either `asc` or `desc`. Ignored without `sort` parameter.
	Direction *PullslistReviewCommentsParamsDirection `json:"direction,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PullslistReviewCommentsParamsSort defines parameters for PullslistReviewComments.
type PullslistReviewCommentsParamsSort string

// PullslistReviewCommentsParamsDirection defines parameters for PullslistReviewComments.
type PullslistReviewCommentsParamsDirection string

// PullscreateReviewCommentJSONBody defines parameters for PullscreateReviewComment.
type PullscreateReviewCommentJSONBody struct {
	// The text of the review comment.
	Body string `json:"body"`

	// The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
	CommitId *string `json:"commit_id,omitempty"`

	// The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
	InReplyTo *int `json:"in_reply_to,omitempty"`

	// The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
	Line *int `json:"line,omitempty"`

	// The relative path to the file that necessitates a comment.
	Path *string `json:"path,omitempty"`

	// **This paramter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
	Position *int `json:"position,omitempty"`

	// In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
	Side *PullscreateReviewCommentJSONBodySide `json:"side,omitempty"`

	// **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
	StartLine *int `json:"start_line,omitempty"`

	// **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
	StartSide *PullscreateReviewCommentJSONBodyStartSide `json:"start_side,omitempty"`
}

// PullscreateReviewCommentJSONBodySide defines parameters for PullscreateReviewComment.
type PullscreateReviewCommentJSONBodySide string

// PullscreateReviewCommentJSONBodyStartSide defines parameters for PullscreateReviewComment.
type PullscreateReviewCommentJSONBodyStartSide string

// PullscreateReplyForReviewCommentJSONBody defines parameters for PullscreateReplyForReviewComment.
type PullscreateReplyForReviewCommentJSONBody struct {
	// The text of the review comment.
	Body string `json:"body"`
}

// PullslistCommitsParams defines parameters for PullslistCommits.
type PullslistCommitsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PullslistFilesParams defines parameters for PullslistFiles.
type PullslistFilesParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PullsmergeJSONBody defines parameters for Pullsmerge.
type PullsmergeJSONBody struct {
	// Extra detail to append to automatic commit message.
	CommitMessage *string `json:"commit_message,omitempty"`

	// Title for the automatic commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
	MergeMethod *PullsmergeJSONBodyMergeMethod `json:"merge_method,omitempty"`

	// SHA that pull request head must match to allow merge.
	Sha *string `json:"sha,omitempty"`
}

// PullsmergeJSONBodyMergeMethod defines parameters for Pullsmerge.
type PullsmergeJSONBodyMergeMethod string

// PullsremoveRequestedReviewersJSONBody defines parameters for PullsremoveRequestedReviewers.
type PullsremoveRequestedReviewersJSONBody struct {
	// An array of user `login`s that will be removed.
	Reviewers []string `json:"reviewers"`

	// An array of team `slug`s that will be removed.
	TeamReviewers *[]string `json:"team_reviewers,omitempty"`
}

// PullslistRequestedReviewersParams defines parameters for PullslistRequestedReviewers.
type PullslistRequestedReviewersParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PullsrequestReviewersJSONBody defines parameters for PullsrequestReviewers.
type PullsrequestReviewersJSONBody interface{}

// PullslistReviewsParams defines parameters for PullslistReviews.
type PullslistReviewsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PullscreateReviewJSONBody defines parameters for PullscreateReview.
type PullscreateReviewJSONBody struct {
	// **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
	Body *string `json:"body,omitempty"`

	// Use the following table to specify the location, destination, and contents of the draft review comment.
	Comments *[]struct {
		// Text of the review comment.
		Body string `json:"body"`
		Line *int   `json:"line,omitempty"`

		// The relative path to the file that necessitates a review comment.
		Path string `json:"path"`

		// The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
		Position  *int    `json:"position,omitempty"`
		Side      *string `json:"side,omitempty"`
		StartLine *int    `json:"start_line,omitempty"`
		StartSide *string `json:"start_side,omitempty"`
	} `json:"comments,omitempty"`

	// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
	CommitId *string `json:"commit_id,omitempty"`

	// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
	Event *PullscreateReviewJSONBodyEvent `json:"event,omitempty"`
}

// PullscreateReviewJSONBodyEvent defines parameters for PullscreateReview.
type PullscreateReviewJSONBodyEvent string

// PullsupdateReviewJSONBody defines parameters for PullsupdateReview.
type PullsupdateReviewJSONBody struct {
	// The body text of the pull request review.
	Body string `json:"body"`
}

// PullslistCommentsForReviewParams defines parameters for PullslistCommentsForReview.
type PullslistCommentsForReviewParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PullsdismissReviewJSONBody defines parameters for PullsdismissReview.
type PullsdismissReviewJSONBody struct {
	Event *string `json:"event,omitempty"`

	// The message for the pull request review dismissal
	Message string `json:"message"`
}

// PullssubmitReviewJSONBody defines parameters for PullssubmitReview.
type PullssubmitReviewJSONBody struct {
	// The body text of the pull request review
	Body *string `json:"body,omitempty"`

	// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
	Event PullssubmitReviewJSONBodyEvent `json:"event"`
}

// PullssubmitReviewJSONBodyEvent defines parameters for PullssubmitReview.
type PullssubmitReviewJSONBodyEvent string

// PullsupdateBranchJSONBody defines parameters for PullsupdateBranch.
type PullsupdateBranchJSONBody struct {
	// The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
	ExpectedHeadSha *string `json:"expected_head_sha,omitempty"`
}

// ReposgetReadmeParams defines parameters for ReposgetReadme.
type ReposgetReadmeParams struct {
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
	Ref *string `json:"ref,omitempty"`
}

// ReposgetReadmeInDirectoryParams defines parameters for ReposgetReadmeInDirectory.
type ReposgetReadmeInDirectoryParams struct {
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
	Ref *string `json:"ref,omitempty"`
}

// ReposlistReleasesParams defines parameters for ReposlistReleases.
type ReposlistReleasesParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateReleaseJSONBody defines parameters for ReposcreateRelease.
type ReposcreateReleaseJSONBody struct {
	// Text describing the contents of the tag.
	Body *string `json:"body,omitempty"`

	// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
	DiscussionCategoryName *string `json:"discussion_category_name,omitempty"`

	// `true` to create a draft (unpublished) release, `false` to create a published one.
	Draft *bool `json:"draft,omitempty"`

	// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
	GenerateReleaseNotes *bool `json:"generate_release_notes,omitempty"`

	// The name of the release.
	Name *string `json:"name,omitempty"`

	// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// The name of the tag.
	TagName string `json:"tag_name"`

	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
	TargetCommitish *string `json:"target_commitish,omitempty"`
}

// ReposupdateReleaseAssetJSONBody defines parameters for ReposupdateReleaseAsset.
type ReposupdateReleaseAssetJSONBody struct {
	// An alternate short description of the asset. Used in place of the filename.
	Label *string `json:"label,omitempty"`

	// The file name of the asset.
	Name  *string `json:"name,omitempty"`
	State *string `json:"state,omitempty"`
}

// ReposgenerateReleaseNotesJSONBody defines parameters for ReposgenerateReleaseNotes.
type ReposgenerateReleaseNotesJSONBody struct {
	// Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
	ConfigurationFilePath *string `json:"configuration_file_path,omitempty"`

	// The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
	PreviousTagName *string `json:"previous_tag_name,omitempty"`

	// The tag name for the release. This can be an existing tag or a new one.
	TagName string `json:"tag_name"`

	// Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
	TargetCommitish *string `json:"target_commitish,omitempty"`
}

// ReposupdateReleaseJSONBody defines parameters for ReposupdateRelease.
type ReposupdateReleaseJSONBody struct {
	// Text describing the contents of the tag.
	Body *string `json:"body,omitempty"`

	// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
	DiscussionCategoryName *string `json:"discussion_category_name,omitempty"`

	// `true` makes the release a draft, and `false` publishes the release.
	Draft *bool `json:"draft,omitempty"`

	// The name of the release.
	Name *string `json:"name,omitempty"`

	// `true` to identify the release as a prerelease, `false` to identify the release as a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
	TargetCommitish *string `json:"target_commitish,omitempty"`
}

// ReposlistReleaseAssetsParams defines parameters for ReposlistReleaseAssets.
type ReposlistReleaseAssetsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposuploadReleaseAssetParams defines parameters for ReposuploadReleaseAsset.
type ReposuploadReleaseAssetParams struct {
	Name  string  `json:"name"`
	Label *string `json:"label,omitempty"`
}

// ReactionslistForReleaseParams defines parameters for ReactionslistForRelease.
type ReactionslistForReleaseParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.
	Content *ReactionslistForReleaseParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForReleaseParamsContent defines parameters for ReactionslistForRelease.
type ReactionslistForReleaseParamsContent string

// ReactionscreateForReleaseJSONBody defines parameters for ReactionscreateForRelease.
type ReactionscreateForReleaseJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
	Content ReactionscreateForReleaseJSONBodyContent `json:"content"`
}

// ReactionscreateForReleaseJSONBodyContent defines parameters for ReactionscreateForRelease.
type ReactionscreateForReleaseJSONBodyContent string

// SecretScanninglistAlertsForRepoParams defines parameters for SecretScanninglistAlertsForRepo.
type SecretScanninglistAlertsForRepoParams struct {
	// Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
	State *SecretScanninglistAlertsForRepoParamsState `json:"state,omitempty"`

	// A comma-separated list of secret types to return. By default all secret types are returned.
	// See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
	// for a complete list of secret types.
	SecretType *SecretScanningAlertSecretType `json:"secret_type,omitempty"`

	// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
	Resolution *SecretScanningAlertResolution `json:"resolution,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// SecretScanninglistAlertsForRepoParamsState defines parameters for SecretScanninglistAlertsForRepo.
type SecretScanninglistAlertsForRepoParamsState string

// SecretScanningupdateAlertJSONBody defines parameters for SecretScanningupdateAlert.
type SecretScanningupdateAlertJSONBody struct {
	// **Required when the `state` is `resolved`.** The reason for resolving the alert.
	Resolution *SecretScanningAlertResolution `json:"resolution"`

	// Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
	State SecretScanningAlertState `json:"state"`
}

// SecretScanninglistLocationsForAlertParams defines parameters for SecretScanninglistLocationsForAlert.
type SecretScanninglistLocationsForAlertParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// ActivitylistStargazersForRepoParams defines parameters for ActivitylistStargazersForRepo.
type ActivitylistStargazersForRepoParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateCommitStatusJSONBody defines parameters for ReposcreateCommitStatus.
type ReposcreateCommitStatusJSONBody struct {
	// A string label to differentiate this status from the status of other systems. This field is case-insensitive.
	Context *string `json:"context,omitempty"`

	// A short description of the status.
	Description *string `json:"description,omitempty"`

	// The state of the status.
	State ReposcreateCommitStatusJSONBodyState `json:"state"`

	// The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
	// For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
	// `http://ci.example.com/user/repo/build/sha`
	TargetUrl *string `json:"target_url,omitempty"`
}

// ReposcreateCommitStatusJSONBodyState defines parameters for ReposcreateCommitStatus.
type ReposcreateCommitStatusJSONBodyState string

// ActivitylistWatchersForRepoParams defines parameters for ActivitylistWatchersForRepo.
type ActivitylistWatchersForRepoParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitysetRepoSubscriptionJSONBody defines parameters for ActivitysetRepoSubscription.
type ActivitysetRepoSubscriptionJSONBody struct {
	// Determines if all notifications should be blocked from this repository.
	Ignored *bool `json:"ignored,omitempty"`

	// Determines if notifications should be received from this repository.
	Subscribed *bool `json:"subscribed,omitempty"`
}

// ReposlistTagsParams defines parameters for ReposlistTags.
type ReposlistTagsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposcreateTagProtectionJSONBody defines parameters for ReposcreateTagProtection.
type ReposcreateTagProtectionJSONBody struct {
	// An optional glob pattern to match against when enforcing tag protection.
	Pattern string `json:"pattern"`
}

// ReposlistTeamsParams defines parameters for ReposlistTeams.
type ReposlistTeamsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposgetAllTopicsParams defines parameters for ReposgetAllTopics.
type ReposgetAllTopicsParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// ReposreplaceAllTopicsJSONBody defines parameters for ReposreplaceAllTopics.
type ReposreplaceAllTopicsJSONBody struct {
	// An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
	Names []string `json:"names"`
}

// ReposgetClonesParams defines parameters for ReposgetClones.
type ReposgetClonesParams struct {
	// The time frame to display results for.
	Per *ReposgetClonesParamsPer `json:"per,omitempty"`
}

// ReposgetClonesParamsPer defines parameters for ReposgetClones.
type ReposgetClonesParamsPer string

// ReposgetViewsParams defines parameters for ReposgetViews.
type ReposgetViewsParams struct {
	// The time frame to display results for.
	Per *ReposgetViewsParamsPer `json:"per,omitempty"`
}

// ReposgetViewsParamsPer defines parameters for ReposgetViews.
type ReposgetViewsParamsPer string

// RepostransferJSONBody defines parameters for Repostransfer.
type RepostransferJSONBody struct {
	// The username or organization name the repository will be transferred to.
	NewOwner string `json:"new_owner"`

	// ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
	TeamIds *[]int `json:"team_ids,omitempty"`
}

// ReposcreateUsingTemplateJSONBody defines parameters for ReposcreateUsingTemplate.
type ReposcreateUsingTemplateJSONBody struct {
	// A short description of the new repository.
	Description *string `json:"description,omitempty"`

	// Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
	IncludeAllBranches *bool `json:"include_all_branches,omitempty"`

	// The name of the new repository.
	Name string `json:"name"`

	// The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
	Owner *string `json:"owner,omitempty"`

	// Either `true` to create a new private repository or `false` to create a new public one.
	Private *bool `json:"private,omitempty"`
}

// ReposlistPublicParams defines parameters for ReposlistPublic.
type ReposlistPublicParams struct {
	// A repository ID. Only return repositories with an ID greater than this ID.
	Since *SinceRepo `json:"since,omitempty"`
}

// ActionslistEnvironmentSecretsParams defines parameters for ActionslistEnvironmentSecrets.
type ActionslistEnvironmentSecretsParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActionscreateOrUpdateEnvironmentSecretJSONBody defines parameters for ActionscreateOrUpdateEnvironmentSecret.
type ActionscreateOrUpdateEnvironmentSecretJSONBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
	EncryptedValue string `json:"encrypted_value"`

	// ID of the key you used to encrypt the secret.
	KeyId string `json:"key_id"`
}

// EnterpriseAdminlistProvisionedGroupsEnterpriseParams defines parameters for EnterpriseAdminlistProvisionedGroupsEnterprise.
type EnterpriseAdminlistProvisionedGroupsEnterpriseParams struct {
	// Used for pagination: the index of the first result to return.
	StartIndex *StartIndex `json:"startIndex,omitempty"`

	// Used for pagination: the number of results to return.
	Count *Count `json:"count,omitempty"`

	// filter results
	Filter *string `json:"filter,omitempty"`

	// attributes to exclude
	ExcludedAttributes *string `json:"excludedAttributes,omitempty"`
}

// EnterpriseAdminprovisionAndInviteEnterpriseGroupJSONBody defines parameters for EnterpriseAdminprovisionAndInviteEnterpriseGroup.
type EnterpriseAdminprovisionAndInviteEnterpriseGroupJSONBody struct {
	// The name of the SCIM group. This must match the GitHub organization that the group maps to.
	DisplayName string `json:"displayName"`
	Members     *[]struct {
		// The SCIM user ID for a user.
		Value string `json:"value"`
	} `json:"members,omitempty"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
}

// EnterpriseAdmingetProvisioningInformationForEnterpriseGroupParams defines parameters for EnterpriseAdmingetProvisioningInformationForEnterpriseGroup.
type EnterpriseAdmingetProvisioningInformationForEnterpriseGroupParams struct {
	// Attributes to exclude.
	ExcludedAttributes *string `json:"excludedAttributes,omitempty"`
}

// EnterpriseAdminupdateAttributeForEnterpriseGroupJSONBody defines parameters for EnterpriseAdminupdateAttributeForEnterpriseGroup.
type EnterpriseAdminupdateAttributeForEnterpriseGroupJSONBody struct {
	// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
	Operations []struct {
		Op   EnterpriseAdminupdateAttributeForEnterpriseGroupJSONBodyOperationsOp `json:"op"`
		Path *string                                                              `json:"path,omitempty"`

		// Can be any value - string, number, array or object.
		Value *interface{} `json:"value,omitempty"`
	} `json:"Operations"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
}

// EnterpriseAdminupdateAttributeForEnterpriseGroupJSONBodyOperationsOp defines parameters for EnterpriseAdminupdateAttributeForEnterpriseGroup.
type EnterpriseAdminupdateAttributeForEnterpriseGroupJSONBodyOperationsOp string

// EnterpriseAdminsetInformationForProvisionedEnterpriseGroupJSONBody defines parameters for EnterpriseAdminsetInformationForProvisionedEnterpriseGroup.
type EnterpriseAdminsetInformationForProvisionedEnterpriseGroupJSONBody struct {
	// The name of the SCIM group. This must match the GitHub organization that the group maps to.
	DisplayName string `json:"displayName"`
	Members     *[]struct {
		// The SCIM user ID for a user.
		Value string `json:"value"`
	} `json:"members,omitempty"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
}

// EnterpriseAdminlistProvisionedIdentitiesEnterpriseParams defines parameters for EnterpriseAdminlistProvisionedIdentitiesEnterprise.
type EnterpriseAdminlistProvisionedIdentitiesEnterpriseParams struct {
	// Used for pagination: the index of the first result to return.
	StartIndex *StartIndex `json:"startIndex,omitempty"`

	// Used for pagination: the number of results to return.
	Count *Count `json:"count,omitempty"`

	// filter results
	Filter *string `json:"filter,omitempty"`
}

// EnterpriseAdminprovisionAndInviteEnterpriseUserJSONBody defines parameters for EnterpriseAdminprovisionAndInviteEnterpriseUser.
type EnterpriseAdminprovisionAndInviteEnterpriseUserJSONBody struct {
	// List of user emails.
	Emails []struct {
		// Whether this email address is the primary address.
		Primary bool `json:"primary"`

		// The type of email address.
		Type string `json:"type"`

		// The email address.
		Value string `json:"value"`
	} `json:"emails"`

	// List of SCIM group IDs the user is a member of.
	Groups *[]struct {
		Value *string `json:"value,omitempty"`
	} `json:"groups,omitempty"`
	Name struct {
		// The last name of the user.
		FamilyName string `json:"familyName"`

		// The first name of the user.
		GivenName string `json:"givenName"`
	} `json:"name"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`

	// The username for the user.
	UserName string `json:"userName"`
}

// EnterpriseAdminupdateAttributeForEnterpriseUserJSONBody defines parameters for EnterpriseAdminupdateAttributeForEnterpriseUser.
type EnterpriseAdminupdateAttributeForEnterpriseUserJSONBody struct {
	// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
	Operations []map[string]interface{} `json:"Operations"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
}

// EnterpriseAdminsetInformationForProvisionedEnterpriseUserJSONBody defines parameters for EnterpriseAdminsetInformationForProvisionedEnterpriseUser.
type EnterpriseAdminsetInformationForProvisionedEnterpriseUserJSONBody struct {
	// List of user emails.
	Emails []struct {
		// Whether this email address is the primary address.
		Primary bool `json:"primary"`

		// The type of email address.
		Type string `json:"type"`

		// The email address.
		Value string `json:"value"`
	} `json:"emails"`

	// List of SCIM group IDs the user is a member of.
	Groups *[]struct {
		Value *string `json:"value,omitempty"`
	} `json:"groups,omitempty"`
	Name struct {
		// The last name of the user.
		FamilyName string `json:"familyName"`

		// The first name of the user.
		GivenName string `json:"givenName"`
	} `json:"name"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`

	// The username for the user.
	UserName string `json:"userName"`
}

// ScimlistProvisionedIdentitiesParams defines parameters for ScimlistProvisionedIdentities.
type ScimlistProvisionedIdentitiesParams struct {
	// Used for pagination: the index of the first result to return.
	StartIndex *int `json:"startIndex,omitempty"`

	// Used for pagination: the number of results to return.
	Count *int `json:"count,omitempty"`

	// Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:
	//
	// `?filter=userName%20eq%20\"Octocat\"`.
	//
	// To filter results for the identity with the email `octocat@github.com`, you would use this query:
	//
	// `?filter=emails%20eq%20\"octocat@github.com\"`.
	Filter *string `json:"filter,omitempty"`
}

// ScimprovisionAndInviteUserJSONBody defines parameters for ScimprovisionAndInviteUser.
type ScimprovisionAndInviteUserJSONBody struct {
	Active *bool `json:"active,omitempty"`

	// The name of the user, suitable for display to end-users
	DisplayName *string `json:"displayName,omitempty"`

	// user emails
	Emails []struct {
		Primary *bool   `json:"primary,omitempty"`
		Type    *string `json:"type,omitempty"`
		Value   string  `json:"value"`
	} `json:"emails"`
	ExternalId *string   `json:"externalId,omitempty"`
	Groups     *[]string `json:"groups,omitempty"`
	Name       struct {
		FamilyName string  `json:"familyName"`
		Formatted  *string `json:"formatted,omitempty"`
		GivenName  string  `json:"givenName"`
	} `json:"name"`
	Schemas *[]string `json:"schemas,omitempty"`

	// Configured by the admin. Could be an email, login, or username
	UserName string `json:"userName"`
}

// ScimupdateAttributeForUserJSONBody defines parameters for ScimupdateAttributeForUser.
type ScimupdateAttributeForUserJSONBody struct {
	// Set of operations to be performed
	Operations []struct {
		Op    ScimupdateAttributeForUserJSONBodyOperationsOp `json:"op"`
		Path  *string                                        `json:"path,omitempty"`
		Value *interface{}                                   `json:"value,omitempty"`
	} `json:"Operations"`
	Schemas *[]string `json:"schemas,omitempty"`
}

// ScimupdateAttributeForUserJSONBodyOperationsOp defines parameters for ScimupdateAttributeForUser.
type ScimupdateAttributeForUserJSONBodyOperationsOp string

// ScimsetInformationForProvisionedUserJSONBody defines parameters for ScimsetInformationForProvisionedUser.
type ScimsetInformationForProvisionedUserJSONBody struct {
	Active *bool `json:"active,omitempty"`

	// The name of the user, suitable for display to end-users
	DisplayName *string `json:"displayName,omitempty"`

	// user emails
	Emails []struct {
		Primary *bool   `json:"primary,omitempty"`
		Type    *string `json:"type,omitempty"`
		Value   string  `json:"value"`
	} `json:"emails"`
	ExternalId *string   `json:"externalId,omitempty"`
	Groups     *[]string `json:"groups,omitempty"`
	Name       struct {
		FamilyName string  `json:"familyName"`
		Formatted  *string `json:"formatted,omitempty"`
		GivenName  string  `json:"givenName"`
	} `json:"name"`
	Schemas *[]string `json:"schemas,omitempty"`

	// Configured by the admin. Could be an email, login, or username
	UserName string `json:"userName"`
}

// SearchcodeParams defines parameters for Searchcode.
type SearchcodeParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.
	Q string `json:"q"`

	// Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
	Sort *SearchcodeParamsSort `json:"sort,omitempty"`

	// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order *SearchcodeParamsOrder `json:"order,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// SearchcodeParamsSort defines parameters for Searchcode.
type SearchcodeParamsSort string

// SearchcodeParamsOrder defines parameters for Searchcode.
type SearchcodeParamsOrder string

// SearchcommitsParams defines parameters for Searchcommits.
type SearchcommitsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.
	Q string `json:"q"`

	// Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
	Sort *SearchcommitsParamsSort `json:"sort,omitempty"`

	// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order *SearchcommitsParamsOrder `json:"order,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// SearchcommitsParamsSort defines parameters for Searchcommits.
type SearchcommitsParamsSort string

// SearchcommitsParamsOrder defines parameters for Searchcommits.
type SearchcommitsParamsOrder string

// SearchissuesAndPullRequestsParams defines parameters for SearchissuesAndPullRequests.
type SearchissuesAndPullRequestsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.
	Q string `json:"q"`

	// Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
	Sort *SearchissuesAndPullRequestsParamsSort `json:"sort,omitempty"`

	// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order *SearchissuesAndPullRequestsParamsOrder `json:"order,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// SearchissuesAndPullRequestsParamsSort defines parameters for SearchissuesAndPullRequests.
type SearchissuesAndPullRequestsParamsSort string

// SearchissuesAndPullRequestsParamsOrder defines parameters for SearchissuesAndPullRequests.
type SearchissuesAndPullRequestsParamsOrder string

// SearchlabelsParams defines parameters for Searchlabels.
type SearchlabelsParams struct {
	// The id of the repository.
	RepositoryId int `json:"repository_id"`

	// The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
	Q string `json:"q"`

	// Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
	Sort *SearchlabelsParamsSort `json:"sort,omitempty"`

	// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order *SearchlabelsParamsOrder `json:"order,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// SearchlabelsParamsSort defines parameters for Searchlabels.
type SearchlabelsParamsSort string

// SearchlabelsParamsOrder defines parameters for Searchlabels.
type SearchlabelsParamsOrder string

// SearchreposParams defines parameters for Searchrepos.
type SearchreposParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
	Q string `json:"q"`

	// Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
	Sort *SearchreposParamsSort `json:"sort,omitempty"`

	// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order *SearchreposParamsOrder `json:"order,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// SearchreposParamsSort defines parameters for Searchrepos.
type SearchreposParamsSort string

// SearchreposParamsOrder defines parameters for Searchrepos.
type SearchreposParamsOrder string

// SearchtopicsParams defines parameters for Searchtopics.
type SearchtopicsParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
	Q string `json:"q"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// SearchusersParams defines parameters for Searchusers.
type SearchusersParams struct {
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.
	Q string `json:"q"`

	// Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
	Sort *SearchusersParamsSort `json:"sort,omitempty"`

	// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order *SearchusersParamsOrder `json:"order,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// SearchusersParamsSort defines parameters for Searchusers.
type SearchusersParamsSort string

// SearchusersParamsOrder defines parameters for Searchusers.
type SearchusersParamsOrder string

// TeamsupdateLegacyJSONBody defines parameters for TeamsupdateLegacy.
type TeamsupdateLegacyJSONBody struct {
	// The description of the team.
	Description *string `json:"description,omitempty"`

	// The name of the team.
	Name string `json:"name"`

	// The ID of a team to set as the parent team.
	ParentTeamId *int `json:"parent_team_id"`

	// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
	Permission *TeamsupdateLegacyJSONBodyPermission `json:"permission,omitempty"`

	// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	Privacy *TeamsupdateLegacyJSONBodyPrivacy `json:"privacy,omitempty"`
}

// TeamsupdateLegacyJSONBodyPermission defines parameters for TeamsupdateLegacy.
type TeamsupdateLegacyJSONBodyPermission string

// TeamsupdateLegacyJSONBodyPrivacy defines parameters for TeamsupdateLegacy.
type TeamsupdateLegacyJSONBodyPrivacy string

// TeamslistDiscussionsLegacyParams defines parameters for TeamslistDiscussionsLegacy.
type TeamslistDiscussionsLegacyParams struct {
	// The direction to sort the results by.
	Direction *TeamslistDiscussionsLegacyParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistDiscussionsLegacyParamsDirection defines parameters for TeamslistDiscussionsLegacy.
type TeamslistDiscussionsLegacyParamsDirection string

// TeamscreateDiscussionLegacyJSONBody defines parameters for TeamscreateDiscussionLegacy.
type TeamscreateDiscussionLegacyJSONBody struct {
	// The discussion post's body text.
	Body string `json:"body"`

	// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
	Private *bool `json:"private,omitempty"`

	// The discussion post's title.
	Title string `json:"title"`
}

// TeamsupdateDiscussionLegacyJSONBody defines parameters for TeamsupdateDiscussionLegacy.
type TeamsupdateDiscussionLegacyJSONBody struct {
	// The discussion post's body text.
	Body *string `json:"body,omitempty"`

	// The discussion post's title.
	Title *string `json:"title,omitempty"`
}

// TeamslistDiscussionCommentsLegacyParams defines parameters for TeamslistDiscussionCommentsLegacy.
type TeamslistDiscussionCommentsLegacyParams struct {
	// The direction to sort the results by.
	Direction *TeamslistDiscussionCommentsLegacyParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistDiscussionCommentsLegacyParamsDirection defines parameters for TeamslistDiscussionCommentsLegacy.
type TeamslistDiscussionCommentsLegacyParamsDirection string

// TeamscreateDiscussionCommentLegacyJSONBody defines parameters for TeamscreateDiscussionCommentLegacy.
type TeamscreateDiscussionCommentLegacyJSONBody struct {
	// The discussion comment's body text.
	Body string `json:"body"`
}

// TeamsupdateDiscussionCommentLegacyJSONBody defines parameters for TeamsupdateDiscussionCommentLegacy.
type TeamsupdateDiscussionCommentLegacyJSONBody struct {
	// The discussion comment's body text.
	Body string `json:"body"`
}

// ReactionslistForTeamDiscussionCommentLegacyParams defines parameters for ReactionslistForTeamDiscussionCommentLegacy.
type ReactionslistForTeamDiscussionCommentLegacyParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
	Content *ReactionslistForTeamDiscussionCommentLegacyParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForTeamDiscussionCommentLegacyParamsContent defines parameters for ReactionslistForTeamDiscussionCommentLegacy.
type ReactionslistForTeamDiscussionCommentLegacyParamsContent string

// ReactionscreateForTeamDiscussionCommentLegacyJSONBody defines parameters for ReactionscreateForTeamDiscussionCommentLegacy.
type ReactionscreateForTeamDiscussionCommentLegacyJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
	Content ReactionscreateForTeamDiscussionCommentLegacyJSONBodyContent `json:"content"`
}

// ReactionscreateForTeamDiscussionCommentLegacyJSONBodyContent defines parameters for ReactionscreateForTeamDiscussionCommentLegacy.
type ReactionscreateForTeamDiscussionCommentLegacyJSONBodyContent string

// ReactionslistForTeamDiscussionLegacyParams defines parameters for ReactionslistForTeamDiscussionLegacy.
type ReactionslistForTeamDiscussionLegacyParams struct {
	// Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
	Content *ReactionslistForTeamDiscussionLegacyParamsContent `json:"content,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReactionslistForTeamDiscussionLegacyParamsContent defines parameters for ReactionslistForTeamDiscussionLegacy.
type ReactionslistForTeamDiscussionLegacyParamsContent string

// ReactionscreateForTeamDiscussionLegacyJSONBody defines parameters for ReactionscreateForTeamDiscussionLegacy.
type ReactionscreateForTeamDiscussionLegacyJSONBody struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
	Content ReactionscreateForTeamDiscussionLegacyJSONBodyContent `json:"content"`
}

// ReactionscreateForTeamDiscussionLegacyJSONBodyContent defines parameters for ReactionscreateForTeamDiscussionLegacy.
type ReactionscreateForTeamDiscussionLegacyJSONBodyContent string

// TeamslistPendingInvitationsLegacyParams defines parameters for TeamslistPendingInvitationsLegacy.
type TeamslistPendingInvitationsLegacyParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistMembersLegacyParams defines parameters for TeamslistMembersLegacy.
type TeamslistMembersLegacyParams struct {
	// Filters members returned by their role in the team.
	Role *TeamslistMembersLegacyParamsRole `json:"role,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistMembersLegacyParamsRole defines parameters for TeamslistMembersLegacy.
type TeamslistMembersLegacyParamsRole string

// TeamsaddOrUpdateMembershipForUserLegacyJSONBody defines parameters for TeamsaddOrUpdateMembershipForUserLegacy.
type TeamsaddOrUpdateMembershipForUserLegacyJSONBody struct {
	// The role that this user should have in the team.
	Role *TeamsaddOrUpdateMembershipForUserLegacyJSONBodyRole `json:"role,omitempty"`
}

// TeamsaddOrUpdateMembershipForUserLegacyJSONBodyRole defines parameters for TeamsaddOrUpdateMembershipForUserLegacy.
type TeamsaddOrUpdateMembershipForUserLegacyJSONBodyRole string

// TeamslistProjectsLegacyParams defines parameters for TeamslistProjectsLegacy.
type TeamslistProjectsLegacyParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamsaddOrUpdateProjectPermissionsLegacyJSONBody defines parameters for TeamsaddOrUpdateProjectPermissionsLegacy.
type TeamsaddOrUpdateProjectPermissionsLegacyJSONBody struct {
	// The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
	Permission *TeamsaddOrUpdateProjectPermissionsLegacyJSONBodyPermission `json:"permission,omitempty"`
}

// TeamsaddOrUpdateProjectPermissionsLegacyJSONBodyPermission defines parameters for TeamsaddOrUpdateProjectPermissionsLegacy.
type TeamsaddOrUpdateProjectPermissionsLegacyJSONBodyPermission string

// TeamslistReposLegacyParams defines parameters for TeamslistReposLegacy.
type TeamslistReposLegacyParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamsaddOrUpdateRepoPermissionsLegacyJSONBody defines parameters for TeamsaddOrUpdateRepoPermissionsLegacy.
type TeamsaddOrUpdateRepoPermissionsLegacyJSONBody struct {
	// The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
	Permission *TeamsaddOrUpdateRepoPermissionsLegacyJSONBodyPermission `json:"permission,omitempty"`
}

// TeamsaddOrUpdateRepoPermissionsLegacyJSONBodyPermission defines parameters for TeamsaddOrUpdateRepoPermissionsLegacy.
type TeamsaddOrUpdateRepoPermissionsLegacyJSONBodyPermission string

// TeamscreateOrUpdateIdpGroupConnectionsLegacyJSONBody defines parameters for TeamscreateOrUpdateIdpGroupConnectionsLegacy.
type TeamscreateOrUpdateIdpGroupConnectionsLegacyJSONBody struct {
	// The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
	Groups []struct {
		Description *string `json:"description,omitempty"`

		// Description of the IdP group.
		GroupDescription string `json:"group_description"`

		// ID of the IdP group.
		GroupId string `json:"group_id"`

		// Name of the IdP group.
		GroupName string  `json:"group_name"`
		Id        *string `json:"id,omitempty"`
		Name      *string `json:"name,omitempty"`
	} `json:"groups"`
	SyncedAt *string `json:"synced_at,omitempty"`
}

// TeamslistChildLegacyParams defines parameters for TeamslistChildLegacy.
type TeamslistChildLegacyParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UsersupdateAuthenticatedJSONBody defines parameters for UsersupdateAuthenticated.
type UsersupdateAuthenticatedJSONBody struct {
	// The new short biography of the user.
	Bio *string `json:"bio,omitempty"`

	// The new blog URL of the user.
	Blog *string `json:"blog,omitempty"`

	// The new company of the user.
	Company *string `json:"company,omitempty"`

	// The publicly visible email address of the user.
	Email *string `json:"email,omitempty"`

	// The new hiring availability of the user.
	Hireable *bool `json:"hireable,omitempty"`

	// The new location of the user.
	Location *string `json:"location,omitempty"`

	// The new name of the user.
	Name *string `json:"name,omitempty"`

	// The new Twitter username of the user.
	TwitterUsername *string `json:"twitter_username"`
}

// CodespaceslistForAuthenticatedUserParams defines parameters for CodespaceslistForAuthenticatedUser.
type CodespaceslistForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// ID of the Repository to filter on
	RepositoryId *RepositoryIdInQuery `json:"repository_id,omitempty"`
}

// CodespacescreateForAuthenticatedUserJSONBody defines parameters for CodespacescreateForAuthenticatedUser.
type CodespacescreateForAuthenticatedUserJSONBody interface{}

// CodespaceslistSecretsForAuthenticatedUserParams defines parameters for CodespaceslistSecretsForAuthenticatedUser.
type CodespaceslistSecretsForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// CodespacescreateOrUpdateSecretForAuthenticatedUserJSONBody defines parameters for CodespacescreateOrUpdateSecretForAuthenticatedUser.
type CodespacescreateOrUpdateSecretForAuthenticatedUserJSONBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyId string `json:"key_id"`

	// An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
	SelectedRepositoryIds *[]string `json:"selected_repository_ids,omitempty"`
}

// CodespacessetRepositoriesForSecretForAuthenticatedUserJSONBody defines parameters for CodespacessetRepositoriesForSecretForAuthenticatedUser.
type CodespacessetRepositoriesForSecretForAuthenticatedUserJSONBody struct {
	// An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
	SelectedRepositoryIds []int `json:"selected_repository_ids"`
}

// CodespacesupdateForAuthenticatedUserJSONBody defines parameters for CodespacesupdateForAuthenticatedUser.
type CodespacesupdateForAuthenticatedUserJSONBody struct {
	// Display name for this codespace
	DisplayName *string `json:"display_name,omitempty"`

	// A valid machine to transition this codespace to.
	Machine *string `json:"machine,omitempty"`

	// Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
	RecentFolders *[]string `json:"recent_folders,omitempty"`
}

// UserssetPrimaryEmailVisibilityForAuthenticatedUserJSONBody defines parameters for UserssetPrimaryEmailVisibilityForAuthenticatedUser.
type UserssetPrimaryEmailVisibilityForAuthenticatedUserJSONBody struct {
	// Denotes whether an email is publicly visible.
	Visibility UserssetPrimaryEmailVisibilityForAuthenticatedUserJSONBodyVisibility `json:"visibility"`
}

// UserssetPrimaryEmailVisibilityForAuthenticatedUserJSONBodyVisibility defines parameters for UserssetPrimaryEmailVisibilityForAuthenticatedUser.
type UserssetPrimaryEmailVisibilityForAuthenticatedUserJSONBodyVisibility string

// UsersdeleteEmailForAuthenticatedUserJSONBody defines parameters for UsersdeleteEmailForAuthenticatedUser.
type UsersdeleteEmailForAuthenticatedUserJSONBody interface{}

// UserslistEmailsForAuthenticatedUserParams defines parameters for UserslistEmailsForAuthenticatedUser.
type UserslistEmailsForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UsersaddEmailForAuthenticatedUserJSONBody defines parameters for UsersaddEmailForAuthenticatedUser.
type UsersaddEmailForAuthenticatedUserJSONBody interface{}

// UserslistFollowersForAuthenticatedUserParams defines parameters for UserslistFollowersForAuthenticatedUser.
type UserslistFollowersForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UserslistFollowedByAuthenticatedUserParams defines parameters for UserslistFollowedByAuthenticatedUser.
type UserslistFollowedByAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UserslistGpgKeysForAuthenticatedUserParams defines parameters for UserslistGpgKeysForAuthenticatedUser.
type UserslistGpgKeysForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UserscreateGpgKeyForAuthenticatedUserJSONBody defines parameters for UserscreateGpgKeyForAuthenticatedUser.
type UserscreateGpgKeyForAuthenticatedUserJSONBody struct {
	// A GPG key in ASCII-armored format.
	ArmoredPublicKey string `json:"armored_public_key"`

	// A descriptive name for the new key.
	Name *string `json:"name,omitempty"`
}

// AppslistInstallationsForAuthenticatedUserParams defines parameters for AppslistInstallationsForAuthenticatedUser.
type AppslistInstallationsForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// AppslistInstallationReposForAuthenticatedUserParams defines parameters for AppslistInstallationReposForAuthenticatedUser.
type AppslistInstallationReposForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// InteractionssetRestrictionsForAuthenticatedUserJSONBody defines parameters for InteractionssetRestrictionsForAuthenticatedUser.
type InteractionssetRestrictionsForAuthenticatedUserJSONBody InteractionLimit

// IssueslistForAuthenticatedUserParams defines parameters for IssueslistForAuthenticatedUser.
type IssueslistForAuthenticatedUserParams struct {
	// Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
	Filter *IssueslistForAuthenticatedUserParamsFilter `json:"filter,omitempty"`

	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State *IssueslistForAuthenticatedUserParamsState `json:"state,omitempty"`

	// A list of comma separated label names. Example: `bug,ui,@high`
	Labels *Labels `json:"labels,omitempty"`

	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort *IssueslistForAuthenticatedUserParamsSort `json:"sort,omitempty"`

	// The direction to sort the results by.
	Direction *IssueslistForAuthenticatedUserParamsDirection `json:"direction,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// IssueslistForAuthenticatedUserParamsFilter defines parameters for IssueslistForAuthenticatedUser.
type IssueslistForAuthenticatedUserParamsFilter string

// IssueslistForAuthenticatedUserParamsState defines parameters for IssueslistForAuthenticatedUser.
type IssueslistForAuthenticatedUserParamsState string

// IssueslistForAuthenticatedUserParamsSort defines parameters for IssueslistForAuthenticatedUser.
type IssueslistForAuthenticatedUserParamsSort string

// IssueslistForAuthenticatedUserParamsDirection defines parameters for IssueslistForAuthenticatedUser.
type IssueslistForAuthenticatedUserParamsDirection string

// UserslistPublicSshKeysForAuthenticatedUserParams defines parameters for UserslistPublicSshKeysForAuthenticatedUser.
type UserslistPublicSshKeysForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UserscreatePublicSshKeyForAuthenticatedUserJSONBody defines parameters for UserscreatePublicSshKeyForAuthenticatedUser.
type UserscreatePublicSshKeyForAuthenticatedUserJSONBody struct {
	// The public SSH key to add to your GitHub account.
	Key string `json:"key"`

	// A descriptive name for the new key.
	Title *string `json:"title,omitempty"`
}

// AppslistSubscriptionsForAuthenticatedUserParams defines parameters for AppslistSubscriptionsForAuthenticatedUser.
type AppslistSubscriptionsForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// AppslistSubscriptionsForAuthenticatedUserStubbedParams defines parameters for AppslistSubscriptionsForAuthenticatedUserStubbed.
type AppslistSubscriptionsForAuthenticatedUserStubbedParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgslistMembershipsForAuthenticatedUserParams defines parameters for OrgslistMembershipsForAuthenticatedUser.
type OrgslistMembershipsForAuthenticatedUserParams struct {
	// Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.
	State *OrgslistMembershipsForAuthenticatedUserParamsState `json:"state,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgslistMembershipsForAuthenticatedUserParamsState defines parameters for OrgslistMembershipsForAuthenticatedUser.
type OrgslistMembershipsForAuthenticatedUserParamsState string

// OrgsupdateMembershipForAuthenticatedUserJSONBody defines parameters for OrgsupdateMembershipForAuthenticatedUser.
type OrgsupdateMembershipForAuthenticatedUserJSONBody struct {
	// The state that the membership should be in. Only `"active"` will be accepted.
	State OrgsupdateMembershipForAuthenticatedUserJSONBodyState `json:"state"`
}

// OrgsupdateMembershipForAuthenticatedUserJSONBodyState defines parameters for OrgsupdateMembershipForAuthenticatedUser.
type OrgsupdateMembershipForAuthenticatedUserJSONBodyState string

// MigrationslistForAuthenticatedUserParams defines parameters for MigrationslistForAuthenticatedUser.
type MigrationslistForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// MigrationsstartForAuthenticatedUserJSONBody defines parameters for MigrationsstartForAuthenticatedUser.
type MigrationsstartForAuthenticatedUserJSONBody struct {
	// Exclude attributes from the API response to improve performance
	Exclude *[]MigrationsstartForAuthenticatedUserJSONBodyExclude `json:"exclude,omitempty"`

	// Do not include attachments in the migration
	ExcludeAttachments *bool `json:"exclude_attachments,omitempty"`

	// Indicates whether projects owned by the organization or users should be excluded.
	ExcludeOwnerProjects *bool `json:"exclude_owner_projects,omitempty"`

	// Do not include releases in the migration
	ExcludeReleases *bool `json:"exclude_releases,omitempty"`

	// Lock the repositories being migrated at the start of the migration
	LockRepositories *bool    `json:"lock_repositories,omitempty"`
	Repositories     []string `json:"repositories"`
}

// MigrationsstartForAuthenticatedUserJSONBodyExclude defines parameters for MigrationsstartForAuthenticatedUser.
type MigrationsstartForAuthenticatedUserJSONBodyExclude string

// MigrationsgetStatusForAuthenticatedUserParams defines parameters for MigrationsgetStatusForAuthenticatedUser.
type MigrationsgetStatusForAuthenticatedUserParams struct {
	Exclude *[]string `json:"exclude,omitempty"`
}

// MigrationslistReposForAuthenticatedUserParams defines parameters for MigrationslistReposForAuthenticatedUser.
type MigrationslistReposForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgslistForAuthenticatedUserParams defines parameters for OrgslistForAuthenticatedUser.
type OrgslistForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PackageslistPackagesForAuthenticatedUserParams defines parameters for PackageslistPackagesForAuthenticatedUser.
type PackageslistPackagesForAuthenticatedUserParams struct {
	// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
	PackageType PackageslistPackagesForAuthenticatedUserParamsPackageType `json:"package_type"`

	// The selected visibility of the packages. Only `container` package_types currently support `internal` visibility properly. For other ecosystems `internal` is synonymous with `private`. This parameter is optional and only filters an existing result set.
	Visibility *PackageslistPackagesForAuthenticatedUserParamsVisibility `json:"visibility,omitempty"`
}

// PackageslistPackagesForAuthenticatedUserParamsPackageType defines parameters for PackageslistPackagesForAuthenticatedUser.
type PackageslistPackagesForAuthenticatedUserParamsPackageType string

// PackageslistPackagesForAuthenticatedUserParamsVisibility defines parameters for PackageslistPackagesForAuthenticatedUser.
type PackageslistPackagesForAuthenticatedUserParamsVisibility string

// PackagesdeletePackageForAuthenticatedUserParamsPackageType defines parameters for PackagesdeletePackageForAuthenticatedUser.
type PackagesdeletePackageForAuthenticatedUserParamsPackageType string

// PackagesgetPackageForAuthenticatedUserParamsPackageType defines parameters for PackagesgetPackageForAuthenticatedUser.
type PackagesgetPackageForAuthenticatedUserParamsPackageType string

// PackagesrestorePackageForAuthenticatedUserParams defines parameters for PackagesrestorePackageForAuthenticatedUser.
type PackagesrestorePackageForAuthenticatedUserParams struct {
	// package token
	Token *string `json:"token,omitempty"`
}

// PackagesrestorePackageForAuthenticatedUserParamsPackageType defines parameters for PackagesrestorePackageForAuthenticatedUser.
type PackagesrestorePackageForAuthenticatedUserParamsPackageType string

// PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams defines parameters for PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUser.
type PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUserParams struct {
	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// The state of the package, either active or deleted.
	State *PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsState `json:"state,omitempty"`
}

// PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsState defines parameters for PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUser.
type PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsState string

// PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsPackageType defines parameters for PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUser.
type PackagesgetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamsPackageType string

// PackagesdeletePackageVersionForAuthenticatedUserParamsPackageType defines parameters for PackagesdeletePackageVersionForAuthenticatedUser.
type PackagesdeletePackageVersionForAuthenticatedUserParamsPackageType string

// PackagesgetPackageVersionForAuthenticatedUserParamsPackageType defines parameters for PackagesgetPackageVersionForAuthenticatedUser.
type PackagesgetPackageVersionForAuthenticatedUserParamsPackageType string

// PackagesrestorePackageVersionForAuthenticatedUserParamsPackageType defines parameters for PackagesrestorePackageVersionForAuthenticatedUser.
type PackagesrestorePackageVersionForAuthenticatedUserParamsPackageType string

// ProjectscreateForAuthenticatedUserJSONBody defines parameters for ProjectscreateForAuthenticatedUser.
type ProjectscreateForAuthenticatedUserJSONBody struct {
	// Body of the project
	Body *string `json:"body"`

	// Name of the project
	Name string `json:"name"`
}

// UserslistPublicEmailsForAuthenticatedUserParams defines parameters for UserslistPublicEmailsForAuthenticatedUser.
type UserslistPublicEmailsForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistForAuthenticatedUserParams defines parameters for ReposlistForAuthenticatedUser.
type ReposlistForAuthenticatedUserParams struct {
	// Limit results to repositories with the specified visibility.
	Visibility *ReposlistForAuthenticatedUserParamsVisibility `json:"visibility,omitempty"`

	// Comma-separated list of values. Can include:
	// \* `owner`: Repositories that are owned by the authenticated user.
	// \* `collaborator`: Repositories that the user has been added to as a collaborator.
	// \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
	Affiliation *string `json:"affiliation,omitempty"`

	// Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
	Type *ReposlistForAuthenticatedUserParamsType `json:"type,omitempty"`

	// The property to sort the results by.
	Sort *ReposlistForAuthenticatedUserParamsSort `json:"sort,omitempty"`

	// The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
	Direction *ReposlistForAuthenticatedUserParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`

	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Before *Before `json:"before,omitempty"`
}

// ReposlistForAuthenticatedUserParamsVisibility defines parameters for ReposlistForAuthenticatedUser.
type ReposlistForAuthenticatedUserParamsVisibility string

// ReposlistForAuthenticatedUserParamsType defines parameters for ReposlistForAuthenticatedUser.
type ReposlistForAuthenticatedUserParamsType string

// ReposlistForAuthenticatedUserParamsSort defines parameters for ReposlistForAuthenticatedUser.
type ReposlistForAuthenticatedUserParamsSort string

// ReposlistForAuthenticatedUserParamsDirection defines parameters for ReposlistForAuthenticatedUser.
type ReposlistForAuthenticatedUserParamsDirection string

// ReposcreateForAuthenticatedUserJSONBody defines parameters for ReposcreateForAuthenticatedUser.
type ReposcreateForAuthenticatedUserJSONBody struct {
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Whether the repository is initialized with a minimal README.
	AutoInit *bool `json:"auto_init,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// A short description of the repository.
	Description *string `json:"description,omitempty"`

	// The desired language or platform to apply to the .gitignore.
	GitignoreTemplate *string `json:"gitignore_template,omitempty"`

	// Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`

	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate *bool `json:"is_template,omitempty"`

	// The license keyword of the open source license for this repository.
	LicenseTemplate *string `json:"license_template,omitempty"`

	// The name of the repository.
	Name string `json:"name"`

	// Whether the repository is private.
	Private *bool `json:"private,omitempty"`

	// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
	TeamId *int `json:"team_id,omitempty"`
}

// ReposlistInvitationsForAuthenticatedUserParams defines parameters for ReposlistInvitationsForAuthenticatedUser.
type ReposlistInvitationsForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistReposStarredByAuthenticatedUserParams defines parameters for ActivitylistReposStarredByAuthenticatedUser.
type ActivitylistReposStarredByAuthenticatedUserParams struct {
	// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
	Sort *ActivitylistReposStarredByAuthenticatedUserParamsSort `json:"sort,omitempty"`

	// The direction to sort the results by.
	Direction *ActivitylistReposStarredByAuthenticatedUserParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistReposStarredByAuthenticatedUserParamsSort defines parameters for ActivitylistReposStarredByAuthenticatedUser.
type ActivitylistReposStarredByAuthenticatedUserParamsSort string

// ActivitylistReposStarredByAuthenticatedUserParamsDirection defines parameters for ActivitylistReposStarredByAuthenticatedUser.
type ActivitylistReposStarredByAuthenticatedUserParamsDirection string

// ActivitylistWatchedReposForAuthenticatedUserParams defines parameters for ActivitylistWatchedReposForAuthenticatedUser.
type ActivitylistWatchedReposForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// TeamslistForAuthenticatedUserParams defines parameters for TeamslistForAuthenticatedUser.
type TeamslistForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UserslistParams defines parameters for Userslist.
type UserslistParams struct {
	// A user ID. Only return users with an ID greater than this ID.
	Since *SinceUser `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`
}

// ActivitylistEventsForAuthenticatedUserParams defines parameters for ActivitylistEventsForAuthenticatedUser.
type ActivitylistEventsForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistOrgEventsForAuthenticatedUserParams defines parameters for ActivitylistOrgEventsForAuthenticatedUser.
type ActivitylistOrgEventsForAuthenticatedUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistPublicEventsForUserParams defines parameters for ActivitylistPublicEventsForUser.
type ActivitylistPublicEventsForUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UserslistFollowersForUserParams defines parameters for UserslistFollowersForUser.
type UserslistFollowersForUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UserslistFollowingForUserParams defines parameters for UserslistFollowingForUser.
type UserslistFollowingForUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// GistslistForUserParams defines parameters for GistslistForUser.
type GistslistForUserParams struct {
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *Since `json:"since,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UserslistGpgKeysForUserParams defines parameters for UserslistGpgKeysForUser.
type UserslistGpgKeysForUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// UsersgetContextForUserParams defines parameters for UsersgetContextForUser.
type UsersgetContextForUserParams struct {
	// Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
	SubjectType *UsersgetContextForUserParamsSubjectType `json:"subject_type,omitempty"`

	// Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
	SubjectId *string `json:"subject_id,omitempty"`
}

// UsersgetContextForUserParamsSubjectType defines parameters for UsersgetContextForUser.
type UsersgetContextForUserParamsSubjectType string

// UserslistPublicKeysForUserParams defines parameters for UserslistPublicKeysForUser.
type UserslistPublicKeysForUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// OrgslistForUserParams defines parameters for OrgslistForUser.
type OrgslistForUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// PackageslistPackagesForUserParams defines parameters for PackageslistPackagesForUser.
type PackageslistPackagesForUserParams struct {
	// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
	PackageType PackageslistPackagesForUserParamsPackageType `json:"package_type"`

	// The selected visibility of the packages. Only `container` package_types currently support `internal` visibility properly. For other ecosystems `internal` is synonymous with `private`. This parameter is optional and only filters an existing result set.
	Visibility *PackageslistPackagesForUserParamsVisibility `json:"visibility,omitempty"`
}

// PackageslistPackagesForUserParamsPackageType defines parameters for PackageslistPackagesForUser.
type PackageslistPackagesForUserParamsPackageType string

// PackageslistPackagesForUserParamsVisibility defines parameters for PackageslistPackagesForUser.
type PackageslistPackagesForUserParamsVisibility string

// PackagesdeletePackageForUserParamsPackageType defines parameters for PackagesdeletePackageForUser.
type PackagesdeletePackageForUserParamsPackageType string

// PackagesgetPackageForUserParamsPackageType defines parameters for PackagesgetPackageForUser.
type PackagesgetPackageForUserParamsPackageType string

// PackagesrestorePackageForUserParams defines parameters for PackagesrestorePackageForUser.
type PackagesrestorePackageForUserParams struct {
	// package token
	Token *string `json:"token,omitempty"`
}

// PackagesrestorePackageForUserParamsPackageType defines parameters for PackagesrestorePackageForUser.
type PackagesrestorePackageForUserParamsPackageType string

// PackagesgetAllPackageVersionsForPackageOwnedByUserParamsPackageType defines parameters for PackagesgetAllPackageVersionsForPackageOwnedByUser.
type PackagesgetAllPackageVersionsForPackageOwnedByUserParamsPackageType string

// PackagesdeletePackageVersionForUserParamsPackageType defines parameters for PackagesdeletePackageVersionForUser.
type PackagesdeletePackageVersionForUserParamsPackageType string

// PackagesgetPackageVersionForUserParamsPackageType defines parameters for PackagesgetPackageVersionForUser.
type PackagesgetPackageVersionForUserParamsPackageType string

// PackagesrestorePackageVersionForUserParamsPackageType defines parameters for PackagesrestorePackageVersionForUser.
type PackagesrestorePackageVersionForUserParamsPackageType string

// ProjectslistForUserParams defines parameters for ProjectslistForUser.
type ProjectslistForUserParams struct {
	// Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
	State *ProjectslistForUserParamsState `json:"state,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ProjectslistForUserParamsState defines parameters for ProjectslistForUser.
type ProjectslistForUserParamsState string

// ActivitylistReceivedEventsForUserParams defines parameters for ActivitylistReceivedEventsForUser.
type ActivitylistReceivedEventsForUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistReceivedPublicEventsForUserParams defines parameters for ActivitylistReceivedPublicEventsForUser.
type ActivitylistReceivedPublicEventsForUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistForUserParams defines parameters for ReposlistForUser.
type ReposlistForUserParams struct {
	// Limit results to repositories of the specified type.
	Type *ReposlistForUserParamsType `json:"type,omitempty"`

	// The property to sort the results by.
	Sort *ReposlistForUserParamsSort `json:"sort,omitempty"`

	// The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
	Direction *ReposlistForUserParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ReposlistForUserParamsType defines parameters for ReposlistForUser.
type ReposlistForUserParamsType string

// ReposlistForUserParamsSort defines parameters for ReposlistForUser.
type ReposlistForUserParamsSort string

// ReposlistForUserParamsDirection defines parameters for ReposlistForUser.
type ReposlistForUserParamsDirection string

// ActivitylistReposStarredByUserParams defines parameters for ActivitylistReposStarredByUser.
type ActivitylistReposStarredByUserParams struct {
	// The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
	Sort *ActivitylistReposStarredByUserParamsSort `json:"sort,omitempty"`

	// The direction to sort the results by.
	Direction *ActivitylistReposStarredByUserParamsDirection `json:"direction,omitempty"`

	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// ActivitylistReposStarredByUserParamsSort defines parameters for ActivitylistReposStarredByUser.
type ActivitylistReposStarredByUserParamsSort string

// ActivitylistReposStarredByUserParamsDirection defines parameters for ActivitylistReposStarredByUser.
type ActivitylistReposStarredByUserParamsDirection string

// ActivitylistReposWatchedByUserParams defines parameters for ActivitylistReposWatchedByUser.
type ActivitylistReposWatchedByUserParams struct {
	// The number of results per page (max 100).
	PerPage *PerPage `json:"per_page,omitempty"`

	// Page number of the results to fetch.
	Page *Page `json:"page,omitempty"`
}

// AppsupdateWebhookConfigForAppJSONRequestBody defines body for AppsupdateWebhookConfigForApp for application/json ContentType.
type AppsupdateWebhookConfigForAppJSONRequestBody AppsupdateWebhookConfigForAppJSONBody

// AppscreateInstallationAccessTokenJSONRequestBody defines body for AppscreateInstallationAccessToken for application/json ContentType.
type AppscreateInstallationAccessTokenJSONRequestBody AppscreateInstallationAccessTokenJSONBody

// AppsdeleteAuthorizationJSONRequestBody defines body for AppsdeleteAuthorization for application/json ContentType.
type AppsdeleteAuthorizationJSONRequestBody AppsdeleteAuthorizationJSONBody

// AppsdeleteTokenJSONRequestBody defines body for AppsdeleteToken for application/json ContentType.
type AppsdeleteTokenJSONRequestBody AppsdeleteTokenJSONBody

// AppsresetTokenJSONRequestBody defines body for AppsresetToken for application/json ContentType.
type AppsresetTokenJSONRequestBody AppsresetTokenJSONBody

// AppscheckTokenJSONRequestBody defines body for AppscheckToken for application/json ContentType.
type AppscheckTokenJSONRequestBody AppscheckTokenJSONBody

// AppsscopeTokenJSONRequestBody defines body for AppsscopeToken for application/json ContentType.
type AppsscopeTokenJSONRequestBody AppsscopeTokenJSONBody

// OauthAuthorizationscreateAuthorizationJSONRequestBody defines body for OauthAuthorizationscreateAuthorization for application/json ContentType.
type OauthAuthorizationscreateAuthorizationJSONRequestBody OauthAuthorizationscreateAuthorizationJSONBody

// OauthAuthorizationsgetOrCreateAuthorizationForAppJSONRequestBody defines body for OauthAuthorizationsgetOrCreateAuthorizationForApp for application/json ContentType.
type OauthAuthorizationsgetOrCreateAuthorizationForAppJSONRequestBody OauthAuthorizationsgetOrCreateAuthorizationForAppJSONBody

// OauthAuthorizationsgetOrCreateAuthorizationForAppAndFingerprintJSONRequestBody defines body for OauthAuthorizationsgetOrCreateAuthorizationForAppAndFingerprint for application/json ContentType.
type OauthAuthorizationsgetOrCreateAuthorizationForAppAndFingerprintJSONRequestBody OauthAuthorizationsgetOrCreateAuthorizationForAppAndFingerprintJSONBody

// OauthAuthorizationsupdateAuthorizationJSONRequestBody defines body for OauthAuthorizationsupdateAuthorization for application/json ContentType.
type OauthAuthorizationsupdateAuthorizationJSONRequestBody OauthAuthorizationsupdateAuthorizationJSONBody

// EnterpriseAdminsetGithubActionsPermissionsEnterpriseJSONRequestBody defines body for EnterpriseAdminsetGithubActionsPermissionsEnterprise for application/json ContentType.
type EnterpriseAdminsetGithubActionsPermissionsEnterpriseJSONRequestBody EnterpriseAdminsetGithubActionsPermissionsEnterpriseJSONBody

// EnterpriseAdminsetSelectedOrganizationsEnabledGithubActionsEnterpriseJSONRequestBody defines body for EnterpriseAdminsetSelectedOrganizationsEnabledGithubActionsEnterprise for application/json ContentType.
type EnterpriseAdminsetSelectedOrganizationsEnabledGithubActionsEnterpriseJSONRequestBody EnterpriseAdminsetSelectedOrganizationsEnabledGithubActionsEnterpriseJSONBody

// EnterpriseAdminsetAllowedActionsEnterpriseJSONRequestBody defines body for EnterpriseAdminsetAllowedActionsEnterprise for application/json ContentType.
type EnterpriseAdminsetAllowedActionsEnterpriseJSONRequestBody EnterpriseAdminsetAllowedActionsEnterpriseJSONBody

// ActionssetGithubActionsDefaultWorkflowPermissionsEnterpriseJSONRequestBody defines body for ActionssetGithubActionsDefaultWorkflowPermissionsEnterprise for application/json ContentType.
type ActionssetGithubActionsDefaultWorkflowPermissionsEnterpriseJSONRequestBody ActionssetGithubActionsDefaultWorkflowPermissionsEnterpriseJSONBody

// EnterpriseAdmincreateSelfHostedRunnerGroupForEnterpriseJSONRequestBody defines body for EnterpriseAdmincreateSelfHostedRunnerGroupForEnterprise for application/json ContentType.
type EnterpriseAdmincreateSelfHostedRunnerGroupForEnterpriseJSONRequestBody EnterpriseAdmincreateSelfHostedRunnerGroupForEnterpriseJSONBody

// EnterpriseAdminupdateSelfHostedRunnerGroupForEnterpriseJSONRequestBody defines body for EnterpriseAdminupdateSelfHostedRunnerGroupForEnterprise for application/json ContentType.
type EnterpriseAdminupdateSelfHostedRunnerGroupForEnterpriseJSONRequestBody EnterpriseAdminupdateSelfHostedRunnerGroupForEnterpriseJSONBody

// EnterpriseAdminsetOrgAccessToSelfHostedRunnerGroupInEnterpriseJSONRequestBody defines body for EnterpriseAdminsetOrgAccessToSelfHostedRunnerGroupInEnterprise for application/json ContentType.
type EnterpriseAdminsetOrgAccessToSelfHostedRunnerGroupInEnterpriseJSONRequestBody EnterpriseAdminsetOrgAccessToSelfHostedRunnerGroupInEnterpriseJSONBody

// EnterpriseAdminsetSelfHostedRunnersInGroupForEnterpriseJSONRequestBody defines body for EnterpriseAdminsetSelfHostedRunnersInGroupForEnterprise for application/json ContentType.
type EnterpriseAdminsetSelfHostedRunnersInGroupForEnterpriseJSONRequestBody EnterpriseAdminsetSelfHostedRunnersInGroupForEnterpriseJSONBody

// EnterpriseAdminaddCustomLabelsToSelfHostedRunnerForEnterpriseJSONRequestBody defines body for EnterpriseAdminaddCustomLabelsToSelfHostedRunnerForEnterprise for application/json ContentType.
type EnterpriseAdminaddCustomLabelsToSelfHostedRunnerForEnterpriseJSONRequestBody EnterpriseAdminaddCustomLabelsToSelfHostedRunnerForEnterpriseJSONBody

// EnterpriseAdminsetCustomLabelsForSelfHostedRunnerForEnterpriseJSONRequestBody defines body for EnterpriseAdminsetCustomLabelsForSelfHostedRunnerForEnterprise for application/json ContentType.
type EnterpriseAdminsetCustomLabelsForSelfHostedRunnerForEnterpriseJSONRequestBody EnterpriseAdminsetCustomLabelsForSelfHostedRunnerForEnterpriseJSONBody

// GistscreateJSONRequestBody defines body for Gistscreate for application/json ContentType.
type GistscreateJSONRequestBody GistscreateJSONBody

// GistsupdateJSONRequestBody defines body for Gistsupdate for application/json ContentType.
type GistsupdateJSONRequestBody GistsupdateJSONBody

// GistscreateCommentJSONRequestBody defines body for GistscreateComment for application/json ContentType.
type GistscreateCommentJSONRequestBody GistscreateCommentJSONBody

// GistsupdateCommentJSONRequestBody defines body for GistsupdateComment for application/json ContentType.
type GistsupdateCommentJSONRequestBody GistsupdateCommentJSONBody

// MarkdownrenderJSONRequestBody defines body for Markdownrender for application/json ContentType.
type MarkdownrenderJSONRequestBody MarkdownrenderJSONBody

// ActivitymarkNotificationsAsReadJSONRequestBody defines body for ActivitymarkNotificationsAsRead for application/json ContentType.
type ActivitymarkNotificationsAsReadJSONRequestBody ActivitymarkNotificationsAsReadJSONBody

// ActivitysetThreadSubscriptionJSONRequestBody defines body for ActivitysetThreadSubscription for application/json ContentType.
type ActivitysetThreadSubscriptionJSONRequestBody ActivitysetThreadSubscriptionJSONBody

// OrgsupdateJSONRequestBody defines body for Orgsupdate for application/json ContentType.
type OrgsupdateJSONRequestBody OrgsupdateJSONBody

// ActionssetGithubActionsPermissionsOrganizationJSONRequestBody defines body for ActionssetGithubActionsPermissionsOrganization for application/json ContentType.
type ActionssetGithubActionsPermissionsOrganizationJSONRequestBody ActionssetGithubActionsPermissionsOrganizationJSONBody

// ActionssetSelectedRepositoriesEnabledGithubActionsOrganizationJSONRequestBody defines body for ActionssetSelectedRepositoriesEnabledGithubActionsOrganization for application/json ContentType.
type ActionssetSelectedRepositoriesEnabledGithubActionsOrganizationJSONRequestBody ActionssetSelectedRepositoriesEnabledGithubActionsOrganizationJSONBody

// ActionssetAllowedActionsOrganizationJSONRequestBody defines body for ActionssetAllowedActionsOrganization for application/json ContentType.
type ActionssetAllowedActionsOrganizationJSONRequestBody ActionssetAllowedActionsOrganizationJSONBody

// ActionssetGithubActionsDefaultWorkflowPermissionsOrganizationJSONRequestBody defines body for ActionssetGithubActionsDefaultWorkflowPermissionsOrganization for application/json ContentType.
type ActionssetGithubActionsDefaultWorkflowPermissionsOrganizationJSONRequestBody ActionssetGithubActionsDefaultWorkflowPermissionsOrganizationJSONBody

// ActionscreateSelfHostedRunnerGroupForOrgJSONRequestBody defines body for ActionscreateSelfHostedRunnerGroupForOrg for application/json ContentType.
type ActionscreateSelfHostedRunnerGroupForOrgJSONRequestBody ActionscreateSelfHostedRunnerGroupForOrgJSONBody

// ActionsupdateSelfHostedRunnerGroupForOrgJSONRequestBody defines body for ActionsupdateSelfHostedRunnerGroupForOrg for application/json ContentType.
type ActionsupdateSelfHostedRunnerGroupForOrgJSONRequestBody ActionsupdateSelfHostedRunnerGroupForOrgJSONBody

// ActionssetRepoAccessToSelfHostedRunnerGroupInOrgJSONRequestBody defines body for ActionssetRepoAccessToSelfHostedRunnerGroupInOrg for application/json ContentType.
type ActionssetRepoAccessToSelfHostedRunnerGroupInOrgJSONRequestBody ActionssetRepoAccessToSelfHostedRunnerGroupInOrgJSONBody

// ActionssetSelfHostedRunnersInGroupForOrgJSONRequestBody defines body for ActionssetSelfHostedRunnersInGroupForOrg for application/json ContentType.
type ActionssetSelfHostedRunnersInGroupForOrgJSONRequestBody ActionssetSelfHostedRunnersInGroupForOrgJSONBody

// ActionsaddCustomLabelsToSelfHostedRunnerForOrgJSONRequestBody defines body for ActionsaddCustomLabelsToSelfHostedRunnerForOrg for application/json ContentType.
type ActionsaddCustomLabelsToSelfHostedRunnerForOrgJSONRequestBody ActionsaddCustomLabelsToSelfHostedRunnerForOrgJSONBody

// ActionssetCustomLabelsForSelfHostedRunnerForOrgJSONRequestBody defines body for ActionssetCustomLabelsForSelfHostedRunnerForOrg for application/json ContentType.
type ActionssetCustomLabelsForSelfHostedRunnerForOrgJSONRequestBody ActionssetCustomLabelsForSelfHostedRunnerForOrgJSONBody

// ActionscreateOrUpdateOrgSecretJSONRequestBody defines body for ActionscreateOrUpdateOrgSecret for application/json ContentType.
type ActionscreateOrUpdateOrgSecretJSONRequestBody ActionscreateOrUpdateOrgSecretJSONBody

// ActionssetSelectedReposForOrgSecretJSONRequestBody defines body for ActionssetSelectedReposForOrgSecret for application/json ContentType.
type ActionssetSelectedReposForOrgSecretJSONRequestBody ActionssetSelectedReposForOrgSecretJSONBody

// DependabotcreateOrUpdateOrgSecretJSONRequestBody defines body for DependabotcreateOrUpdateOrgSecret for application/json ContentType.
type DependabotcreateOrUpdateOrgSecretJSONRequestBody DependabotcreateOrUpdateOrgSecretJSONBody

// DependabotsetSelectedReposForOrgSecretJSONRequestBody defines body for DependabotsetSelectedReposForOrgSecret for application/json ContentType.
type DependabotsetSelectedReposForOrgSecretJSONRequestBody DependabotsetSelectedReposForOrgSecretJSONBody

// OrgscreateWebhookJSONRequestBody defines body for OrgscreateWebhook for application/json ContentType.
type OrgscreateWebhookJSONRequestBody OrgscreateWebhookJSONBody

// OrgsupdateWebhookJSONRequestBody defines body for OrgsupdateWebhook for application/json ContentType.
type OrgsupdateWebhookJSONRequestBody OrgsupdateWebhookJSONBody

// OrgsupdateWebhookConfigForOrgJSONRequestBody defines body for OrgsupdateWebhookConfigForOrg for application/json ContentType.
type OrgsupdateWebhookConfigForOrgJSONRequestBody OrgsupdateWebhookConfigForOrgJSONBody

// InteractionssetRestrictionsForOrgJSONRequestBody defines body for InteractionssetRestrictionsForOrg for application/json ContentType.
type InteractionssetRestrictionsForOrgJSONRequestBody InteractionssetRestrictionsForOrgJSONBody

// OrgscreateInvitationJSONRequestBody defines body for OrgscreateInvitation for application/json ContentType.
type OrgscreateInvitationJSONRequestBody OrgscreateInvitationJSONBody

// OrgssetMembershipForUserJSONRequestBody defines body for OrgssetMembershipForUser for application/json ContentType.
type OrgssetMembershipForUserJSONRequestBody OrgssetMembershipForUserJSONBody

// MigrationsstartForOrgJSONRequestBody defines body for MigrationsstartForOrg for application/json ContentType.
type MigrationsstartForOrgJSONRequestBody MigrationsstartForOrgJSONBody

// ProjectscreateForOrgJSONRequestBody defines body for ProjectscreateForOrg for application/json ContentType.
type ProjectscreateForOrgJSONRequestBody ProjectscreateForOrgJSONBody

// ReposcreateInOrgJSONRequestBody defines body for ReposcreateInOrg for application/json ContentType.
type ReposcreateInOrgJSONRequestBody ReposcreateInOrgJSONBody

// TeamscreateJSONRequestBody defines body for Teamscreate for application/json ContentType.
type TeamscreateJSONRequestBody TeamscreateJSONBody

// TeamsupdateInOrgJSONRequestBody defines body for TeamsupdateInOrg for application/json ContentType.
type TeamsupdateInOrgJSONRequestBody TeamsupdateInOrgJSONBody

// TeamscreateDiscussionInOrgJSONRequestBody defines body for TeamscreateDiscussionInOrg for application/json ContentType.
type TeamscreateDiscussionInOrgJSONRequestBody TeamscreateDiscussionInOrgJSONBody

// TeamsupdateDiscussionInOrgJSONRequestBody defines body for TeamsupdateDiscussionInOrg for application/json ContentType.
type TeamsupdateDiscussionInOrgJSONRequestBody TeamsupdateDiscussionInOrgJSONBody

// TeamscreateDiscussionCommentInOrgJSONRequestBody defines body for TeamscreateDiscussionCommentInOrg for application/json ContentType.
type TeamscreateDiscussionCommentInOrgJSONRequestBody TeamscreateDiscussionCommentInOrgJSONBody

// TeamsupdateDiscussionCommentInOrgJSONRequestBody defines body for TeamsupdateDiscussionCommentInOrg for application/json ContentType.
type TeamsupdateDiscussionCommentInOrgJSONRequestBody TeamsupdateDiscussionCommentInOrgJSONBody

// ReactionscreateForTeamDiscussionCommentInOrgJSONRequestBody defines body for ReactionscreateForTeamDiscussionCommentInOrg for application/json ContentType.
type ReactionscreateForTeamDiscussionCommentInOrgJSONRequestBody ReactionscreateForTeamDiscussionCommentInOrgJSONBody

// ReactionscreateForTeamDiscussionInOrgJSONRequestBody defines body for ReactionscreateForTeamDiscussionInOrg for application/json ContentType.
type ReactionscreateForTeamDiscussionInOrgJSONRequestBody ReactionscreateForTeamDiscussionInOrgJSONBody

// TeamslinkExternalIdpGroupToTeamForOrgJSONRequestBody defines body for TeamslinkExternalIdpGroupToTeamForOrg for application/json ContentType.
type TeamslinkExternalIdpGroupToTeamForOrgJSONRequestBody TeamslinkExternalIdpGroupToTeamForOrgJSONBody

// TeamsaddOrUpdateMembershipForUserInOrgJSONRequestBody defines body for TeamsaddOrUpdateMembershipForUserInOrg for application/json ContentType.
type TeamsaddOrUpdateMembershipForUserInOrgJSONRequestBody TeamsaddOrUpdateMembershipForUserInOrgJSONBody

// TeamsaddOrUpdateProjectPermissionsInOrgJSONRequestBody defines body for TeamsaddOrUpdateProjectPermissionsInOrg for application/json ContentType.
type TeamsaddOrUpdateProjectPermissionsInOrgJSONRequestBody TeamsaddOrUpdateProjectPermissionsInOrgJSONBody

// TeamsaddOrUpdateRepoPermissionsInOrgJSONRequestBody defines body for TeamsaddOrUpdateRepoPermissionsInOrg for application/json ContentType.
type TeamsaddOrUpdateRepoPermissionsInOrgJSONRequestBody TeamsaddOrUpdateRepoPermissionsInOrgJSONBody

// TeamscreateOrUpdateIdpGroupConnectionsInOrgJSONRequestBody defines body for TeamscreateOrUpdateIdpGroupConnectionsInOrg for application/json ContentType.
type TeamscreateOrUpdateIdpGroupConnectionsInOrgJSONRequestBody TeamscreateOrUpdateIdpGroupConnectionsInOrgJSONBody

// ProjectsupdateCardJSONRequestBody defines body for ProjectsupdateCard for application/json ContentType.
type ProjectsupdateCardJSONRequestBody ProjectsupdateCardJSONBody

// ProjectsmoveCardJSONRequestBody defines body for ProjectsmoveCard for application/json ContentType.
type ProjectsmoveCardJSONRequestBody ProjectsmoveCardJSONBody

// ProjectsupdateColumnJSONRequestBody defines body for ProjectsupdateColumn for application/json ContentType.
type ProjectsupdateColumnJSONRequestBody ProjectsupdateColumnJSONBody

// ProjectscreateCardJSONRequestBody defines body for ProjectscreateCard for application/json ContentType.
type ProjectscreateCardJSONRequestBody ProjectscreateCardJSONBody

// ProjectsmoveColumnJSONRequestBody defines body for ProjectsmoveColumn for application/json ContentType.
type ProjectsmoveColumnJSONRequestBody ProjectsmoveColumnJSONBody

// ProjectsupdateJSONRequestBody defines body for Projectsupdate for application/json ContentType.
type ProjectsupdateJSONRequestBody ProjectsupdateJSONBody

// ProjectsaddCollaboratorJSONRequestBody defines body for ProjectsaddCollaborator for application/json ContentType.
type ProjectsaddCollaboratorJSONRequestBody ProjectsaddCollaboratorJSONBody

// ProjectscreateColumnJSONRequestBody defines body for ProjectscreateColumn for application/json ContentType.
type ProjectscreateColumnJSONRequestBody ProjectscreateColumnJSONBody

// ReposupdateJSONRequestBody defines body for Reposupdate for application/json ContentType.
type ReposupdateJSONRequestBody ReposupdateJSONBody

// ActionsreRunJobForWorkflowRunJSONRequestBody defines body for ActionsreRunJobForWorkflowRun for application/json ContentType.
type ActionsreRunJobForWorkflowRunJSONRequestBody ActionsreRunJobForWorkflowRunJSONBody

// ActionssetGithubActionsPermissionsRepositoryJSONRequestBody defines body for ActionssetGithubActionsPermissionsRepository for application/json ContentType.
type ActionssetGithubActionsPermissionsRepositoryJSONRequestBody ActionssetGithubActionsPermissionsRepositoryJSONBody

// ActionssetWorkflowAccessToRepositoryJSONRequestBody defines body for ActionssetWorkflowAccessToRepository for application/json ContentType.
type ActionssetWorkflowAccessToRepositoryJSONRequestBody ActionssetWorkflowAccessToRepositoryJSONBody

// ActionssetAllowedActionsRepositoryJSONRequestBody defines body for ActionssetAllowedActionsRepository for application/json ContentType.
type ActionssetAllowedActionsRepositoryJSONRequestBody ActionssetAllowedActionsRepositoryJSONBody

// ActionssetGithubActionsDefaultWorkflowPermissionsRepositoryJSONRequestBody defines body for ActionssetGithubActionsDefaultWorkflowPermissionsRepository for application/json ContentType.
type ActionssetGithubActionsDefaultWorkflowPermissionsRepositoryJSONRequestBody ActionssetGithubActionsDefaultWorkflowPermissionsRepositoryJSONBody

// ActionsaddCustomLabelsToSelfHostedRunnerForRepoJSONRequestBody defines body for ActionsaddCustomLabelsToSelfHostedRunnerForRepo for application/json ContentType.
type ActionsaddCustomLabelsToSelfHostedRunnerForRepoJSONRequestBody ActionsaddCustomLabelsToSelfHostedRunnerForRepoJSONBody

// ActionssetCustomLabelsForSelfHostedRunnerForRepoJSONRequestBody defines body for ActionssetCustomLabelsForSelfHostedRunnerForRepo for application/json ContentType.
type ActionssetCustomLabelsForSelfHostedRunnerForRepoJSONRequestBody ActionssetCustomLabelsForSelfHostedRunnerForRepoJSONBody

// ActionsreviewPendingDeploymentsForRunJSONRequestBody defines body for ActionsreviewPendingDeploymentsForRun for application/json ContentType.
type ActionsreviewPendingDeploymentsForRunJSONRequestBody ActionsreviewPendingDeploymentsForRunJSONBody

// ActionsreRunWorkflowJSONRequestBody defines body for ActionsreRunWorkflow for application/json ContentType.
type ActionsreRunWorkflowJSONRequestBody ActionsreRunWorkflowJSONBody

// ActionsreRunWorkflowFailedJobsJSONRequestBody defines body for ActionsreRunWorkflowFailedJobs for application/json ContentType.
type ActionsreRunWorkflowFailedJobsJSONRequestBody ActionsreRunWorkflowFailedJobsJSONBody

// ActionscreateOrUpdateRepoSecretJSONRequestBody defines body for ActionscreateOrUpdateRepoSecret for application/json ContentType.
type ActionscreateOrUpdateRepoSecretJSONRequestBody ActionscreateOrUpdateRepoSecretJSONBody

// ActionscreateWorkflowDispatchJSONRequestBody defines body for ActionscreateWorkflowDispatch for application/json ContentType.
type ActionscreateWorkflowDispatchJSONRequestBody ActionscreateWorkflowDispatchJSONBody

// ReposcreateAutolinkJSONRequestBody defines body for ReposcreateAutolink for application/json ContentType.
type ReposcreateAutolinkJSONRequestBody ReposcreateAutolinkJSONBody

// ReposupdateBranchProtectionJSONRequestBody defines body for ReposupdateBranchProtection for application/json ContentType.
type ReposupdateBranchProtectionJSONRequestBody ReposupdateBranchProtectionJSONBody

// ReposupdatePullRequestReviewProtectionJSONRequestBody defines body for ReposupdatePullRequestReviewProtection for application/json ContentType.
type ReposupdatePullRequestReviewProtectionJSONRequestBody ReposupdatePullRequestReviewProtectionJSONBody

// ReposupdateStatusCheckProtectionJSONRequestBody defines body for ReposupdateStatusCheckProtection for application/json ContentType.
type ReposupdateStatusCheckProtectionJSONRequestBody ReposupdateStatusCheckProtectionJSONBody

// ReposremoveStatusCheckContextsJSONRequestBody defines body for ReposremoveStatusCheckContexts for application/json ContentType.
type ReposremoveStatusCheckContextsJSONRequestBody ReposremoveStatusCheckContextsJSONBody

// ReposaddStatusCheckContextsJSONRequestBody defines body for ReposaddStatusCheckContexts for application/json ContentType.
type ReposaddStatusCheckContextsJSONRequestBody ReposaddStatusCheckContextsJSONBody

// RepossetStatusCheckContextsJSONRequestBody defines body for RepossetStatusCheckContexts for application/json ContentType.
type RepossetStatusCheckContextsJSONRequestBody RepossetStatusCheckContextsJSONBody

// ReposremoveAppAccessRestrictionsJSONRequestBody defines body for ReposremoveAppAccessRestrictions for application/json ContentType.
type ReposremoveAppAccessRestrictionsJSONRequestBody ReposremoveAppAccessRestrictionsJSONBody

// ReposaddAppAccessRestrictionsJSONRequestBody defines body for ReposaddAppAccessRestrictions for application/json ContentType.
type ReposaddAppAccessRestrictionsJSONRequestBody ReposaddAppAccessRestrictionsJSONBody

// RepossetAppAccessRestrictionsJSONRequestBody defines body for RepossetAppAccessRestrictions for application/json ContentType.
type RepossetAppAccessRestrictionsJSONRequestBody RepossetAppAccessRestrictionsJSONBody

// ReposremoveTeamAccessRestrictionsJSONRequestBody defines body for ReposremoveTeamAccessRestrictions for application/json ContentType.
type ReposremoveTeamAccessRestrictionsJSONRequestBody ReposremoveTeamAccessRestrictionsJSONBody

// ReposaddTeamAccessRestrictionsJSONRequestBody defines body for ReposaddTeamAccessRestrictions for application/json ContentType.
type ReposaddTeamAccessRestrictionsJSONRequestBody ReposaddTeamAccessRestrictionsJSONBody

// RepossetTeamAccessRestrictionsJSONRequestBody defines body for RepossetTeamAccessRestrictions for application/json ContentType.
type RepossetTeamAccessRestrictionsJSONRequestBody RepossetTeamAccessRestrictionsJSONBody

// ReposremoveUserAccessRestrictionsJSONRequestBody defines body for ReposremoveUserAccessRestrictions for application/json ContentType.
type ReposremoveUserAccessRestrictionsJSONRequestBody ReposremoveUserAccessRestrictionsJSONBody

// ReposaddUserAccessRestrictionsJSONRequestBody defines body for ReposaddUserAccessRestrictions for application/json ContentType.
type ReposaddUserAccessRestrictionsJSONRequestBody ReposaddUserAccessRestrictionsJSONBody

// RepossetUserAccessRestrictionsJSONRequestBody defines body for RepossetUserAccessRestrictions for application/json ContentType.
type RepossetUserAccessRestrictionsJSONRequestBody RepossetUserAccessRestrictionsJSONBody

// ReposrenameBranchJSONRequestBody defines body for ReposrenameBranch for application/json ContentType.
type ReposrenameBranchJSONRequestBody ReposrenameBranchJSONBody

// CheckscreateJSONRequestBody defines body for Checkscreate for application/json ContentType.
type CheckscreateJSONRequestBody CheckscreateJSONBody

// ChecksupdateJSONRequestBody defines body for Checksupdate for application/json ContentType.
type ChecksupdateJSONRequestBody ChecksupdateJSONBody

// CheckscreateSuiteJSONRequestBody defines body for CheckscreateSuite for application/json ContentType.
type CheckscreateSuiteJSONRequestBody CheckscreateSuiteJSONBody

// CheckssetSuitesPreferencesJSONRequestBody defines body for CheckssetSuitesPreferences for application/json ContentType.
type CheckssetSuitesPreferencesJSONRequestBody CheckssetSuitesPreferencesJSONBody

// CodeScanningupdateAlertJSONRequestBody defines body for CodeScanningupdateAlert for application/json ContentType.
type CodeScanningupdateAlertJSONRequestBody CodeScanningupdateAlertJSONBody

// CodeScanninguploadSarifJSONRequestBody defines body for CodeScanninguploadSarif for application/json ContentType.
type CodeScanninguploadSarifJSONRequestBody CodeScanninguploadSarifJSONBody

// CodespacescreateWithRepoForAuthenticatedUserJSONRequestBody defines body for CodespacescreateWithRepoForAuthenticatedUser for application/json ContentType.
type CodespacescreateWithRepoForAuthenticatedUserJSONRequestBody CodespacescreateWithRepoForAuthenticatedUserJSONBody

// CodespacescreateOrUpdateRepoSecretJSONRequestBody defines body for CodespacescreateOrUpdateRepoSecret for application/json ContentType.
type CodespacescreateOrUpdateRepoSecretJSONRequestBody CodespacescreateOrUpdateRepoSecretJSONBody

// ReposaddCollaboratorJSONRequestBody defines body for ReposaddCollaborator for application/json ContentType.
type ReposaddCollaboratorJSONRequestBody ReposaddCollaboratorJSONBody

// ReposupdateCommitCommentJSONRequestBody defines body for ReposupdateCommitComment for application/json ContentType.
type ReposupdateCommitCommentJSONRequestBody ReposupdateCommitCommentJSONBody

// ReactionscreateForCommitCommentJSONRequestBody defines body for ReactionscreateForCommitComment for application/json ContentType.
type ReactionscreateForCommitCommentJSONRequestBody ReactionscreateForCommitCommentJSONBody

// ReposcreateCommitCommentJSONRequestBody defines body for ReposcreateCommitComment for application/json ContentType.
type ReposcreateCommitCommentJSONRequestBody ReposcreateCommitCommentJSONBody

// ReposdeleteFileJSONRequestBody defines body for ReposdeleteFile for application/json ContentType.
type ReposdeleteFileJSONRequestBody ReposdeleteFileJSONBody

// ReposcreateOrUpdateFileContentsJSONRequestBody defines body for ReposcreateOrUpdateFileContents for application/json ContentType.
type ReposcreateOrUpdateFileContentsJSONRequestBody ReposcreateOrUpdateFileContentsJSONBody

// DependabotcreateOrUpdateRepoSecretJSONRequestBody defines body for DependabotcreateOrUpdateRepoSecret for application/json ContentType.
type DependabotcreateOrUpdateRepoSecretJSONRequestBody DependabotcreateOrUpdateRepoSecretJSONBody

// ReposcreateDeploymentJSONRequestBody defines body for ReposcreateDeployment for application/json ContentType.
type ReposcreateDeploymentJSONRequestBody ReposcreateDeploymentJSONBody

// ReposcreateDeploymentStatusJSONRequestBody defines body for ReposcreateDeploymentStatus for application/json ContentType.
type ReposcreateDeploymentStatusJSONRequestBody ReposcreateDeploymentStatusJSONBody

// ReposcreateDispatchEventJSONRequestBody defines body for ReposcreateDispatchEvent for application/json ContentType.
type ReposcreateDispatchEventJSONRequestBody ReposcreateDispatchEventJSONBody

// ReposcreateOrUpdateEnvironmentJSONRequestBody defines body for ReposcreateOrUpdateEnvironment for application/json ContentType.
type ReposcreateOrUpdateEnvironmentJSONRequestBody ReposcreateOrUpdateEnvironmentJSONBody

// ReposcreateForkJSONRequestBody defines body for ReposcreateFork for application/json ContentType.
type ReposcreateForkJSONRequestBody ReposcreateForkJSONBody

// GitcreateBlobJSONRequestBody defines body for GitcreateBlob for application/json ContentType.
type GitcreateBlobJSONRequestBody GitcreateBlobJSONBody

// GitcreateCommitJSONRequestBody defines body for GitcreateCommit for application/json ContentType.
type GitcreateCommitJSONRequestBody GitcreateCommitJSONBody

// GitcreateRefJSONRequestBody defines body for GitcreateRef for application/json ContentType.
type GitcreateRefJSONRequestBody GitcreateRefJSONBody

// GitupdateRefJSONRequestBody defines body for GitupdateRef for application/json ContentType.
type GitupdateRefJSONRequestBody GitupdateRefJSONBody

// GitcreateTagJSONRequestBody defines body for GitcreateTag for application/json ContentType.
type GitcreateTagJSONRequestBody GitcreateTagJSONBody

// GitcreateTreeJSONRequestBody defines body for GitcreateTree for application/json ContentType.
type GitcreateTreeJSONRequestBody GitcreateTreeJSONBody

// ReposcreateWebhookJSONRequestBody defines body for ReposcreateWebhook for application/json ContentType.
type ReposcreateWebhookJSONRequestBody ReposcreateWebhookJSONBody

// ReposupdateWebhookJSONRequestBody defines body for ReposupdateWebhook for application/json ContentType.
type ReposupdateWebhookJSONRequestBody ReposupdateWebhookJSONBody

// ReposupdateWebhookConfigForRepoJSONRequestBody defines body for ReposupdateWebhookConfigForRepo for application/json ContentType.
type ReposupdateWebhookConfigForRepoJSONRequestBody ReposupdateWebhookConfigForRepoJSONBody

// MigrationsupdateImportJSONRequestBody defines body for MigrationsupdateImport for application/json ContentType.
type MigrationsupdateImportJSONRequestBody MigrationsupdateImportJSONBody

// MigrationsstartImportJSONRequestBody defines body for MigrationsstartImport for application/json ContentType.
type MigrationsstartImportJSONRequestBody MigrationsstartImportJSONBody

// MigrationsmapCommitAuthorJSONRequestBody defines body for MigrationsmapCommitAuthor for application/json ContentType.
type MigrationsmapCommitAuthorJSONRequestBody MigrationsmapCommitAuthorJSONBody

// MigrationssetLfsPreferenceJSONRequestBody defines body for MigrationssetLfsPreference for application/json ContentType.
type MigrationssetLfsPreferenceJSONRequestBody MigrationssetLfsPreferenceJSONBody

// InteractionssetRestrictionsForRepoJSONRequestBody defines body for InteractionssetRestrictionsForRepo for application/json ContentType.
type InteractionssetRestrictionsForRepoJSONRequestBody InteractionssetRestrictionsForRepoJSONBody

// ReposupdateInvitationJSONRequestBody defines body for ReposupdateInvitation for application/json ContentType.
type ReposupdateInvitationJSONRequestBody ReposupdateInvitationJSONBody

// IssuescreateJSONRequestBody defines body for Issuescreate for application/json ContentType.
type IssuescreateJSONRequestBody IssuescreateJSONBody

// IssuesupdateCommentJSONRequestBody defines body for IssuesupdateComment for application/json ContentType.
type IssuesupdateCommentJSONRequestBody IssuesupdateCommentJSONBody

// ReactionscreateForIssueCommentJSONRequestBody defines body for ReactionscreateForIssueComment for application/json ContentType.
type ReactionscreateForIssueCommentJSONRequestBody ReactionscreateForIssueCommentJSONBody

// IssuesupdateJSONRequestBody defines body for Issuesupdate for application/json ContentType.
type IssuesupdateJSONRequestBody IssuesupdateJSONBody

// IssuesremoveAssigneesJSONRequestBody defines body for IssuesremoveAssignees for application/json ContentType.
type IssuesremoveAssigneesJSONRequestBody IssuesremoveAssigneesJSONBody

// IssuesaddAssigneesJSONRequestBody defines body for IssuesaddAssignees for application/json ContentType.
type IssuesaddAssigneesJSONRequestBody IssuesaddAssigneesJSONBody

// IssuescreateCommentJSONRequestBody defines body for IssuescreateComment for application/json ContentType.
type IssuescreateCommentJSONRequestBody IssuescreateCommentJSONBody

// IssuesaddLabelsJSONRequestBody defines body for IssuesaddLabels for application/json ContentType.
type IssuesaddLabelsJSONRequestBody IssuesaddLabelsJSONBody

// IssuessetLabelsJSONRequestBody defines body for IssuessetLabels for application/json ContentType.
type IssuessetLabelsJSONRequestBody IssuessetLabelsJSONBody

// IssueslockJSONRequestBody defines body for Issueslock for application/json ContentType.
type IssueslockJSONRequestBody IssueslockJSONBody

// ReactionscreateForIssueJSONRequestBody defines body for ReactionscreateForIssue for application/json ContentType.
type ReactionscreateForIssueJSONRequestBody ReactionscreateForIssueJSONBody

// ReposcreateDeployKeyJSONRequestBody defines body for ReposcreateDeployKey for application/json ContentType.
type ReposcreateDeployKeyJSONRequestBody ReposcreateDeployKeyJSONBody

// IssuescreateLabelJSONRequestBody defines body for IssuescreateLabel for application/json ContentType.
type IssuescreateLabelJSONRequestBody IssuescreateLabelJSONBody

// IssuesupdateLabelJSONRequestBody defines body for IssuesupdateLabel for application/json ContentType.
type IssuesupdateLabelJSONRequestBody IssuesupdateLabelJSONBody

// ReposmergeUpstreamJSONRequestBody defines body for ReposmergeUpstream for application/json ContentType.
type ReposmergeUpstreamJSONRequestBody ReposmergeUpstreamJSONBody

// ReposmergeJSONRequestBody defines body for Reposmerge for application/json ContentType.
type ReposmergeJSONRequestBody ReposmergeJSONBody

// IssuescreateMilestoneJSONRequestBody defines body for IssuescreateMilestone for application/json ContentType.
type IssuescreateMilestoneJSONRequestBody IssuescreateMilestoneJSONBody

// IssuesupdateMilestoneJSONRequestBody defines body for IssuesupdateMilestone for application/json ContentType.
type IssuesupdateMilestoneJSONRequestBody IssuesupdateMilestoneJSONBody

// ActivitymarkRepoNotificationsAsReadJSONRequestBody defines body for ActivitymarkRepoNotificationsAsRead for application/json ContentType.
type ActivitymarkRepoNotificationsAsReadJSONRequestBody ActivitymarkRepoNotificationsAsReadJSONBody

// ReposcreatePagesSiteJSONRequestBody defines body for ReposcreatePagesSite for application/json ContentType.
type ReposcreatePagesSiteJSONRequestBody ReposcreatePagesSiteJSONBody

// ReposupdateInformationAboutPagesSiteJSONRequestBody defines body for ReposupdateInformationAboutPagesSite for application/json ContentType.
type ReposupdateInformationAboutPagesSiteJSONRequestBody ReposupdateInformationAboutPagesSiteJSONBody

// ProjectscreateForRepoJSONRequestBody defines body for ProjectscreateForRepo for application/json ContentType.
type ProjectscreateForRepoJSONRequestBody ProjectscreateForRepoJSONBody

// PullscreateJSONRequestBody defines body for Pullscreate for application/json ContentType.
type PullscreateJSONRequestBody PullscreateJSONBody

// PullsupdateReviewCommentJSONRequestBody defines body for PullsupdateReviewComment for application/json ContentType.
type PullsupdateReviewCommentJSONRequestBody PullsupdateReviewCommentJSONBody

// ReactionscreateForPullRequestReviewCommentJSONRequestBody defines body for ReactionscreateForPullRequestReviewComment for application/json ContentType.
type ReactionscreateForPullRequestReviewCommentJSONRequestBody ReactionscreateForPullRequestReviewCommentJSONBody

// PullsupdateJSONRequestBody defines body for Pullsupdate for application/json ContentType.
type PullsupdateJSONRequestBody PullsupdateJSONBody

// CodespacescreateWithPrForAuthenticatedUserJSONRequestBody defines body for CodespacescreateWithPrForAuthenticatedUser for application/json ContentType.
type CodespacescreateWithPrForAuthenticatedUserJSONRequestBody CodespacescreateWithPrForAuthenticatedUserJSONBody

// PullscreateReviewCommentJSONRequestBody defines body for PullscreateReviewComment for application/json ContentType.
type PullscreateReviewCommentJSONRequestBody PullscreateReviewCommentJSONBody

// PullscreateReplyForReviewCommentJSONRequestBody defines body for PullscreateReplyForReviewComment for application/json ContentType.
type PullscreateReplyForReviewCommentJSONRequestBody PullscreateReplyForReviewCommentJSONBody

// PullsmergeJSONRequestBody defines body for Pullsmerge for application/json ContentType.
type PullsmergeJSONRequestBody PullsmergeJSONBody

// PullsremoveRequestedReviewersJSONRequestBody defines body for PullsremoveRequestedReviewers for application/json ContentType.
type PullsremoveRequestedReviewersJSONRequestBody PullsremoveRequestedReviewersJSONBody

// PullsrequestReviewersJSONRequestBody defines body for PullsrequestReviewers for application/json ContentType.
type PullsrequestReviewersJSONRequestBody PullsrequestReviewersJSONBody

// PullscreateReviewJSONRequestBody defines body for PullscreateReview for application/json ContentType.
type PullscreateReviewJSONRequestBody PullscreateReviewJSONBody

// PullsupdateReviewJSONRequestBody defines body for PullsupdateReview for application/json ContentType.
type PullsupdateReviewJSONRequestBody PullsupdateReviewJSONBody

// PullsdismissReviewJSONRequestBody defines body for PullsdismissReview for application/json ContentType.
type PullsdismissReviewJSONRequestBody PullsdismissReviewJSONBody

// PullssubmitReviewJSONRequestBody defines body for PullssubmitReview for application/json ContentType.
type PullssubmitReviewJSONRequestBody PullssubmitReviewJSONBody

// PullsupdateBranchJSONRequestBody defines body for PullsupdateBranch for application/json ContentType.
type PullsupdateBranchJSONRequestBody PullsupdateBranchJSONBody

// ReposcreateReleaseJSONRequestBody defines body for ReposcreateRelease for application/json ContentType.
type ReposcreateReleaseJSONRequestBody ReposcreateReleaseJSONBody

// ReposupdateReleaseAssetJSONRequestBody defines body for ReposupdateReleaseAsset for application/json ContentType.
type ReposupdateReleaseAssetJSONRequestBody ReposupdateReleaseAssetJSONBody

// ReposgenerateReleaseNotesJSONRequestBody defines body for ReposgenerateReleaseNotes for application/json ContentType.
type ReposgenerateReleaseNotesJSONRequestBody ReposgenerateReleaseNotesJSONBody

// ReposupdateReleaseJSONRequestBody defines body for ReposupdateRelease for application/json ContentType.
type ReposupdateReleaseJSONRequestBody ReposupdateReleaseJSONBody

// ReactionscreateForReleaseJSONRequestBody defines body for ReactionscreateForRelease for application/json ContentType.
type ReactionscreateForReleaseJSONRequestBody ReactionscreateForReleaseJSONBody

// SecretScanningupdateAlertJSONRequestBody defines body for SecretScanningupdateAlert for application/json ContentType.
type SecretScanningupdateAlertJSONRequestBody SecretScanningupdateAlertJSONBody

// ReposcreateCommitStatusJSONRequestBody defines body for ReposcreateCommitStatus for application/json ContentType.
type ReposcreateCommitStatusJSONRequestBody ReposcreateCommitStatusJSONBody

// ActivitysetRepoSubscriptionJSONRequestBody defines body for ActivitysetRepoSubscription for application/json ContentType.
type ActivitysetRepoSubscriptionJSONRequestBody ActivitysetRepoSubscriptionJSONBody

// ReposcreateTagProtectionJSONRequestBody defines body for ReposcreateTagProtection for application/json ContentType.
type ReposcreateTagProtectionJSONRequestBody ReposcreateTagProtectionJSONBody

// ReposreplaceAllTopicsJSONRequestBody defines body for ReposreplaceAllTopics for application/json ContentType.
type ReposreplaceAllTopicsJSONRequestBody ReposreplaceAllTopicsJSONBody

// RepostransferJSONRequestBody defines body for Repostransfer for application/json ContentType.
type RepostransferJSONRequestBody RepostransferJSONBody

// ReposcreateUsingTemplateJSONRequestBody defines body for ReposcreateUsingTemplate for application/json ContentType.
type ReposcreateUsingTemplateJSONRequestBody ReposcreateUsingTemplateJSONBody

// ActionscreateOrUpdateEnvironmentSecretJSONRequestBody defines body for ActionscreateOrUpdateEnvironmentSecret for application/json ContentType.
type ActionscreateOrUpdateEnvironmentSecretJSONRequestBody ActionscreateOrUpdateEnvironmentSecretJSONBody

// EnterpriseAdminprovisionAndInviteEnterpriseGroupJSONRequestBody defines body for EnterpriseAdminprovisionAndInviteEnterpriseGroup for application/json ContentType.
type EnterpriseAdminprovisionAndInviteEnterpriseGroupJSONRequestBody EnterpriseAdminprovisionAndInviteEnterpriseGroupJSONBody

// EnterpriseAdminupdateAttributeForEnterpriseGroupJSONRequestBody defines body for EnterpriseAdminupdateAttributeForEnterpriseGroup for application/json ContentType.
type EnterpriseAdminupdateAttributeForEnterpriseGroupJSONRequestBody EnterpriseAdminupdateAttributeForEnterpriseGroupJSONBody

// EnterpriseAdminsetInformationForProvisionedEnterpriseGroupJSONRequestBody defines body for EnterpriseAdminsetInformationForProvisionedEnterpriseGroup for application/json ContentType.
type EnterpriseAdminsetInformationForProvisionedEnterpriseGroupJSONRequestBody EnterpriseAdminsetInformationForProvisionedEnterpriseGroupJSONBody

// EnterpriseAdminprovisionAndInviteEnterpriseUserJSONRequestBody defines body for EnterpriseAdminprovisionAndInviteEnterpriseUser for application/json ContentType.
type EnterpriseAdminprovisionAndInviteEnterpriseUserJSONRequestBody EnterpriseAdminprovisionAndInviteEnterpriseUserJSONBody

// EnterpriseAdminupdateAttributeForEnterpriseUserJSONRequestBody defines body for EnterpriseAdminupdateAttributeForEnterpriseUser for application/json ContentType.
type EnterpriseAdminupdateAttributeForEnterpriseUserJSONRequestBody EnterpriseAdminupdateAttributeForEnterpriseUserJSONBody

// EnterpriseAdminsetInformationForProvisionedEnterpriseUserJSONRequestBody defines body for EnterpriseAdminsetInformationForProvisionedEnterpriseUser for application/json ContentType.
type EnterpriseAdminsetInformationForProvisionedEnterpriseUserJSONRequestBody EnterpriseAdminsetInformationForProvisionedEnterpriseUserJSONBody

// ScimprovisionAndInviteUserJSONRequestBody defines body for ScimprovisionAndInviteUser for application/json ContentType.
type ScimprovisionAndInviteUserJSONRequestBody ScimprovisionAndInviteUserJSONBody

// ScimupdateAttributeForUserJSONRequestBody defines body for ScimupdateAttributeForUser for application/json ContentType.
type ScimupdateAttributeForUserJSONRequestBody ScimupdateAttributeForUserJSONBody

// ScimsetInformationForProvisionedUserJSONRequestBody defines body for ScimsetInformationForProvisionedUser for application/json ContentType.
type ScimsetInformationForProvisionedUserJSONRequestBody ScimsetInformationForProvisionedUserJSONBody

// TeamsupdateLegacyJSONRequestBody defines body for TeamsupdateLegacy for application/json ContentType.
type TeamsupdateLegacyJSONRequestBody TeamsupdateLegacyJSONBody

// TeamscreateDiscussionLegacyJSONRequestBody defines body for TeamscreateDiscussionLegacy for application/json ContentType.
type TeamscreateDiscussionLegacyJSONRequestBody TeamscreateDiscussionLegacyJSONBody

// TeamsupdateDiscussionLegacyJSONRequestBody defines body for TeamsupdateDiscussionLegacy for application/json ContentType.
type TeamsupdateDiscussionLegacyJSONRequestBody TeamsupdateDiscussionLegacyJSONBody

// TeamscreateDiscussionCommentLegacyJSONRequestBody defines body for TeamscreateDiscussionCommentLegacy for application/json ContentType.
type TeamscreateDiscussionCommentLegacyJSONRequestBody TeamscreateDiscussionCommentLegacyJSONBody

// TeamsupdateDiscussionCommentLegacyJSONRequestBody defines body for TeamsupdateDiscussionCommentLegacy for application/json ContentType.
type TeamsupdateDiscussionCommentLegacyJSONRequestBody TeamsupdateDiscussionCommentLegacyJSONBody

// ReactionscreateForTeamDiscussionCommentLegacyJSONRequestBody defines body for ReactionscreateForTeamDiscussionCommentLegacy for application/json ContentType.
type ReactionscreateForTeamDiscussionCommentLegacyJSONRequestBody ReactionscreateForTeamDiscussionCommentLegacyJSONBody

// ReactionscreateForTeamDiscussionLegacyJSONRequestBody defines body for ReactionscreateForTeamDiscussionLegacy for application/json ContentType.
type ReactionscreateForTeamDiscussionLegacyJSONRequestBody ReactionscreateForTeamDiscussionLegacyJSONBody

// TeamsaddOrUpdateMembershipForUserLegacyJSONRequestBody defines body for TeamsaddOrUpdateMembershipForUserLegacy for application/json ContentType.
type TeamsaddOrUpdateMembershipForUserLegacyJSONRequestBody TeamsaddOrUpdateMembershipForUserLegacyJSONBody

// TeamsaddOrUpdateProjectPermissionsLegacyJSONRequestBody defines body for TeamsaddOrUpdateProjectPermissionsLegacy for application/json ContentType.
type TeamsaddOrUpdateProjectPermissionsLegacyJSONRequestBody TeamsaddOrUpdateProjectPermissionsLegacyJSONBody

// TeamsaddOrUpdateRepoPermissionsLegacyJSONRequestBody defines body for TeamsaddOrUpdateRepoPermissionsLegacy for application/json ContentType.
type TeamsaddOrUpdateRepoPermissionsLegacyJSONRequestBody TeamsaddOrUpdateRepoPermissionsLegacyJSONBody

// TeamscreateOrUpdateIdpGroupConnectionsLegacyJSONRequestBody defines body for TeamscreateOrUpdateIdpGroupConnectionsLegacy for application/json ContentType.
type TeamscreateOrUpdateIdpGroupConnectionsLegacyJSONRequestBody TeamscreateOrUpdateIdpGroupConnectionsLegacyJSONBody

// UsersupdateAuthenticatedJSONRequestBody defines body for UsersupdateAuthenticated for application/json ContentType.
type UsersupdateAuthenticatedJSONRequestBody UsersupdateAuthenticatedJSONBody

// CodespacescreateForAuthenticatedUserJSONRequestBody defines body for CodespacescreateForAuthenticatedUser for application/json ContentType.
type CodespacescreateForAuthenticatedUserJSONRequestBody CodespacescreateForAuthenticatedUserJSONBody

// CodespacescreateOrUpdateSecretForAuthenticatedUserJSONRequestBody defines body for CodespacescreateOrUpdateSecretForAuthenticatedUser for application/json ContentType.
type CodespacescreateOrUpdateSecretForAuthenticatedUserJSONRequestBody CodespacescreateOrUpdateSecretForAuthenticatedUserJSONBody

// CodespacessetRepositoriesForSecretForAuthenticatedUserJSONRequestBody defines body for CodespacessetRepositoriesForSecretForAuthenticatedUser for application/json ContentType.
type CodespacessetRepositoriesForSecretForAuthenticatedUserJSONRequestBody CodespacessetRepositoriesForSecretForAuthenticatedUserJSONBody

// CodespacesupdateForAuthenticatedUserJSONRequestBody defines body for CodespacesupdateForAuthenticatedUser for application/json ContentType.
type CodespacesupdateForAuthenticatedUserJSONRequestBody CodespacesupdateForAuthenticatedUserJSONBody

// UserssetPrimaryEmailVisibilityForAuthenticatedUserJSONRequestBody defines body for UserssetPrimaryEmailVisibilityForAuthenticatedUser for application/json ContentType.
type UserssetPrimaryEmailVisibilityForAuthenticatedUserJSONRequestBody UserssetPrimaryEmailVisibilityForAuthenticatedUserJSONBody

// UsersdeleteEmailForAuthenticatedUserJSONRequestBody defines body for UsersdeleteEmailForAuthenticatedUser for application/json ContentType.
type UsersdeleteEmailForAuthenticatedUserJSONRequestBody UsersdeleteEmailForAuthenticatedUserJSONBody

// UsersaddEmailForAuthenticatedUserJSONRequestBody defines body for UsersaddEmailForAuthenticatedUser for application/json ContentType.
type UsersaddEmailForAuthenticatedUserJSONRequestBody UsersaddEmailForAuthenticatedUserJSONBody

// UserscreateGpgKeyForAuthenticatedUserJSONRequestBody defines body for UserscreateGpgKeyForAuthenticatedUser for application/json ContentType.
type UserscreateGpgKeyForAuthenticatedUserJSONRequestBody UserscreateGpgKeyForAuthenticatedUserJSONBody

// InteractionssetRestrictionsForAuthenticatedUserJSONRequestBody defines body for InteractionssetRestrictionsForAuthenticatedUser for application/json ContentType.
type InteractionssetRestrictionsForAuthenticatedUserJSONRequestBody InteractionssetRestrictionsForAuthenticatedUserJSONBody

// UserscreatePublicSshKeyForAuthenticatedUserJSONRequestBody defines body for UserscreatePublicSshKeyForAuthenticatedUser for application/json ContentType.
type UserscreatePublicSshKeyForAuthenticatedUserJSONRequestBody UserscreatePublicSshKeyForAuthenticatedUserJSONBody

// OrgsupdateMembershipForAuthenticatedUserJSONRequestBody defines body for OrgsupdateMembershipForAuthenticatedUser for application/json ContentType.
type OrgsupdateMembershipForAuthenticatedUserJSONRequestBody OrgsupdateMembershipForAuthenticatedUserJSONBody

// MigrationsstartForAuthenticatedUserJSONRequestBody defines body for MigrationsstartForAuthenticatedUser for application/json ContentType.
type MigrationsstartForAuthenticatedUserJSONRequestBody MigrationsstartForAuthenticatedUserJSONBody

// ProjectscreateForAuthenticatedUserJSONRequestBody defines body for ProjectscreateForAuthenticatedUser for application/json ContentType.
type ProjectscreateForAuthenticatedUserJSONRequestBody ProjectscreateForAuthenticatedUserJSONBody

// ReposcreateForAuthenticatedUserJSONRequestBody defines body for ReposcreateForAuthenticatedUser for application/json ContentType.
type ReposcreateForAuthenticatedUserJSONRequestBody ReposcreateForAuthenticatedUserJSONBody

// Getter for additional properties for GistscreateJSONBody_Files. Returns the specified
// element and whether it was found
func (a GistscreateJSONBody_Files) Get(fieldName string) (value struct {
	// Content of the file
	Content string `json:"content"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GistscreateJSONBody_Files
func (a *GistscreateJSONBody_Files) Set(fieldName string, value struct {
	// Content of the file
	Content string `json:"content"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			// Content of the file
			Content string `json:"content"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GistscreateJSONBody_Files to handle AdditionalProperties
func (a *GistscreateJSONBody_Files) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			// Content of the file
			Content string `json:"content"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				// Content of the file
				Content string `json:"content"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GistscreateJSONBody_Files to handle AdditionalProperties
func (a GistscreateJSONBody_Files) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ActionscreateWorkflowDispatchJSONBody_Inputs. Returns the specified
// element and whether it was found
func (a ActionscreateWorkflowDispatchJSONBody_Inputs) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ActionscreateWorkflowDispatchJSONBody_Inputs
func (a *ActionscreateWorkflowDispatchJSONBody_Inputs) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ActionscreateWorkflowDispatchJSONBody_Inputs to handle AdditionalProperties
func (a *ActionscreateWorkflowDispatchJSONBody_Inputs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ActionscreateWorkflowDispatchJSONBody_Inputs to handle AdditionalProperties
func (a ActionscreateWorkflowDispatchJSONBody_Inputs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReposcreateDispatchEventJSONBody_ClientPayload. Returns the specified
// element and whether it was found
func (a ReposcreateDispatchEventJSONBody_ClientPayload) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReposcreateDispatchEventJSONBody_ClientPayload
func (a *ReposcreateDispatchEventJSONBody_ClientPayload) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReposcreateDispatchEventJSONBody_ClientPayload to handle AdditionalProperties
func (a *ReposcreateDispatchEventJSONBody_ClientPayload) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReposcreateDispatchEventJSONBody_ClientPayload to handle AdditionalProperties
func (a ReposcreateDispatchEventJSONBody_ClientPayload) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuditLogEvent_Data. Returns the specified
// element and whether it was found
func (a AuditLogEvent_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuditLogEvent_Data
func (a *AuditLogEvent_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuditLogEvent_Data to handle AdditionalProperties
func (a *AuditLogEvent_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuditLogEvent_Data to handle AdditionalProperties
func (a AuditLogEvent_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BaseGist_Files. Returns the specified
// element and whether it was found
func (a BaseGist_Files) Get(fieldName string) (value struct {
	Filename *string `json:"filename,omitempty"`
	Language *string `json:"language,omitempty"`
	RawUrl   *string `json:"raw_url,omitempty"`
	Size     *int    `json:"size,omitempty"`
	Type     *string `json:"type,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BaseGist_Files
func (a *BaseGist_Files) Set(fieldName string, value struct {
	Filename *string `json:"filename,omitempty"`
	Language *string `json:"language,omitempty"`
	RawUrl   *string `json:"raw_url,omitempty"`
	Size     *int    `json:"size,omitempty"`
	Type     *string `json:"type,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Filename *string `json:"filename,omitempty"`
			Language *string `json:"language,omitempty"`
			RawUrl   *string `json:"raw_url,omitempty"`
			Size     *int    `json:"size,omitempty"`
			Type     *string `json:"type,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BaseGist_Files to handle AdditionalProperties
func (a *BaseGist_Files) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Filename *string `json:"filename,omitempty"`
			Language *string `json:"language,omitempty"`
			RawUrl   *string `json:"raw_url,omitempty"`
			Size     *int    `json:"size,omitempty"`
			Type     *string `json:"type,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Filename *string `json:"filename,omitempty"`
				Language *string `json:"language,omitempty"`
				RawUrl   *string `json:"raw_url,omitempty"`
				Size     *int    `json:"size,omitempty"`
				Type     *string `json:"type,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BaseGist_Files to handle AdditionalProperties
func (a BaseGist_Files) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GistSimple_Files. Returns the specified
// element and whether it was found
func (a GistSimple_Files) Get(fieldName string) (value struct {
	Content   *string `json:"content,omitempty"`
	Filename  *string `json:"filename,omitempty"`
	Language  *string `json:"language,omitempty"`
	RawUrl    *string `json:"raw_url,omitempty"`
	Size      *int    `json:"size,omitempty"`
	Truncated *bool   `json:"truncated,omitempty"`
	Type      *string `json:"type,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GistSimple_Files
func (a *GistSimple_Files) Set(fieldName string, value struct {
	Content   *string `json:"content,omitempty"`
	Filename  *string `json:"filename,omitempty"`
	Language  *string `json:"language,omitempty"`
	RawUrl    *string `json:"raw_url,omitempty"`
	Size      *int    `json:"size,omitempty"`
	Truncated *bool   `json:"truncated,omitempty"`
	Type      *string `json:"type,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Content   *string `json:"content,omitempty"`
			Filename  *string `json:"filename,omitempty"`
			Language  *string `json:"language,omitempty"`
			RawUrl    *string `json:"raw_url,omitempty"`
			Size      *int    `json:"size,omitempty"`
			Truncated *bool   `json:"truncated,omitempty"`
			Type      *string `json:"type,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GistSimple_Files to handle AdditionalProperties
func (a *GistSimple_Files) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Content   *string `json:"content,omitempty"`
			Filename  *string `json:"filename,omitempty"`
			Language  *string `json:"language,omitempty"`
			RawUrl    *string `json:"raw_url,omitempty"`
			Size      *int    `json:"size,omitempty"`
			Truncated *bool   `json:"truncated,omitempty"`
			Type      *string `json:"type,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Content   *string `json:"content,omitempty"`
				Filename  *string `json:"filename,omitempty"`
				Language  *string `json:"language,omitempty"`
				RawUrl    *string `json:"raw_url,omitempty"`
				Size      *int    `json:"size,omitempty"`
				Truncated *bool   `json:"truncated,omitempty"`
				Type      *string `json:"type,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GistSimple_Files to handle AdditionalProperties
func (a GistSimple_Files) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GistSimple_ForkOf_Files. Returns the specified
// element and whether it was found
func (a GistSimple_ForkOf_Files) Get(fieldName string) (value struct {
	Filename *string `json:"filename,omitempty"`
	Language *string `json:"language,omitempty"`
	RawUrl   *string `json:"raw_url,omitempty"`
	Size     *int    `json:"size,omitempty"`
	Type     *string `json:"type,omitempty"`
}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GistSimple_ForkOf_Files
func (a *GistSimple_ForkOf_Files) Set(fieldName string, value struct {
	Filename *string `json:"filename,omitempty"`
	Language *string `json:"language,omitempty"`
	RawUrl   *string `json:"raw_url,omitempty"`
	Size     *int    `json:"size,omitempty"`
	Type     *string `json:"type,omitempty"`
}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]struct {
			Filename *string `json:"filename,omitempty"`
			Language *string `json:"language,omitempty"`
			RawUrl   *string `json:"raw_url,omitempty"`
			Size     *int    `json:"size,omitempty"`
			Type     *string `json:"type,omitempty"`
		})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GistSimple_ForkOf_Files to handle AdditionalProperties
func (a *GistSimple_ForkOf_Files) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]struct {
			Filename *string `json:"filename,omitempty"`
			Language *string `json:"language,omitempty"`
			RawUrl   *string `json:"raw_url,omitempty"`
			Size     *int    `json:"size,omitempty"`
			Type     *string `json:"type,omitempty"`
		})
		for fieldName, fieldBuf := range object {
			var fieldVal struct {
				Filename *string `json:"filename,omitempty"`
				Language *string `json:"language,omitempty"`
				RawUrl   *string `json:"raw_url,omitempty"`
				Size     *int    `json:"size,omitempty"`
				Type     *string `json:"type,omitempty"`
			}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GistSimple_ForkOf_Files to handle AdditionalProperties
func (a GistSimple_ForkOf_Files) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HookDelivery_Request_Headers. Returns the specified
// element and whether it was found
func (a HookDelivery_Request_Headers) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HookDelivery_Request_Headers
func (a *HookDelivery_Request_Headers) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HookDelivery_Request_Headers to handle AdditionalProperties
func (a *HookDelivery_Request_Headers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HookDelivery_Request_Headers to handle AdditionalProperties
func (a HookDelivery_Request_Headers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HookDelivery_Request_Payload. Returns the specified
// element and whether it was found
func (a HookDelivery_Request_Payload) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HookDelivery_Request_Payload
func (a *HookDelivery_Request_Payload) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HookDelivery_Request_Payload to handle AdditionalProperties
func (a *HookDelivery_Request_Payload) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HookDelivery_Request_Payload to handle AdditionalProperties
func (a HookDelivery_Request_Payload) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HookDelivery_Response_Headers. Returns the specified
// element and whether it was found
func (a HookDelivery_Response_Headers) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HookDelivery_Response_Headers
func (a *HookDelivery_Response_Headers) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HookDelivery_Response_Headers to handle AdditionalProperties
func (a *HookDelivery_Response_Headers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HookDelivery_Response_Headers to handle AdditionalProperties
func (a HookDelivery_Response_Headers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Integration_Permissions. Returns the specified
// element and whether it was found
func (a Integration_Permissions) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Integration_Permissions
func (a *Integration_Permissions) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Integration_Permissions to handle AdditionalProperties
func (a *Integration_Permissions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["checks"]; found {
		err = json.Unmarshal(raw, &a.Checks)
		if err != nil {
			return fmt.Errorf("error reading 'checks': %w", err)
		}
		delete(object, "checks")
	}

	if raw, found := object["contents"]; found {
		err = json.Unmarshal(raw, &a.Contents)
		if err != nil {
			return fmt.Errorf("error reading 'contents': %w", err)
		}
		delete(object, "contents")
	}

	if raw, found := object["deployments"]; found {
		err = json.Unmarshal(raw, &a.Deployments)
		if err != nil {
			return fmt.Errorf("error reading 'deployments': %w", err)
		}
		delete(object, "deployments")
	}

	if raw, found := object["issues"]; found {
		err = json.Unmarshal(raw, &a.Issues)
		if err != nil {
			return fmt.Errorf("error reading 'issues': %w", err)
		}
		delete(object, "issues")
	}

	if raw, found := object["metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading 'metadata': %w", err)
		}
		delete(object, "metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Integration_Permissions to handle AdditionalProperties
func (a Integration_Permissions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Checks != nil {
		object["checks"], err = json.Marshal(a.Checks)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'checks': %w", err)
		}
	}

	if a.Contents != nil {
		object["contents"], err = json.Marshal(a.Contents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contents': %w", err)
		}
	}

	if a.Deployments != nil {
		object["deployments"], err = json.Marshal(a.Deployments)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deployments': %w", err)
		}
	}

	if a.Issues != nil {
		object["issues"], err = json.Marshal(a.Issues)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'issues': %w", err)
		}
	}

	if a.Metadata != nil {
		object["metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Language. Returns the specified
// element and whether it was found
func (a Language) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Language
func (a *Language) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Language to handle AdditionalProperties
func (a *Language) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Language to handle AdditionalProperties
func (a Language) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NullableIntegration_Permissions. Returns the specified
// element and whether it was found
func (a NullableIntegration_Permissions) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NullableIntegration_Permissions
func (a *NullableIntegration_Permissions) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NullableIntegration_Permissions to handle AdditionalProperties
func (a *NullableIntegration_Permissions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["checks"]; found {
		err = json.Unmarshal(raw, &a.Checks)
		if err != nil {
			return fmt.Errorf("error reading 'checks': %w", err)
		}
		delete(object, "checks")
	}

	if raw, found := object["contents"]; found {
		err = json.Unmarshal(raw, &a.Contents)
		if err != nil {
			return fmt.Errorf("error reading 'contents': %w", err)
		}
		delete(object, "contents")
	}

	if raw, found := object["deployments"]; found {
		err = json.Unmarshal(raw, &a.Deployments)
		if err != nil {
			return fmt.Errorf("error reading 'deployments': %w", err)
		}
		delete(object, "deployments")
	}

	if raw, found := object["issues"]; found {
		err = json.Unmarshal(raw, &a.Issues)
		if err != nil {
			return fmt.Errorf("error reading 'issues': %w", err)
		}
		delete(object, "issues")
	}

	if raw, found := object["metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading 'metadata': %w", err)
		}
		delete(object, "metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NullableIntegration_Permissions to handle AdditionalProperties
func (a NullableIntegration_Permissions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Checks != nil {
		object["checks"], err = json.Marshal(a.Checks)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'checks': %w", err)
		}
	}

	if a.Contents != nil {
		object["contents"], err = json.Marshal(a.Contents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contents': %w", err)
		}
	}

	if a.Deployments != nil {
		object["deployments"], err = json.Marshal(a.Deployments)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deployments': %w", err)
		}
	}

	if a.Issues != nil {
		object["issues"], err = json.Marshal(a.Issues)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'issues': %w", err)
		}
	}

	if a.Metadata != nil {
		object["metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
